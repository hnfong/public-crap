44:class DefinitionError(ValueError):
---
47:class AmbiguousPronunciationError(DefinitionError):
---
50:class InvalidJyutPingError(DefinitionError):
---
53:class IllegalCharacterError(DefinitionError):
---
60:class MissingItemError(DefinitionError):
---
146:    raise ValueError("Invalid label name")
---
151:    "ref": re.compile(r'^https?://[^\s]+'),
---
152:    "img": re.compile(r'^https?://[^\s]+'),
---
182:                        raise ValueError("Unknown tag: %s" % k)
---
186:                    v = validator(v)
---
189:                            raise ValueError(errmsg)
---
203:                        if req_tag == "pos" and unknown_pos:
---
207:                            errmsg = "Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str)
---
208:                            raise ValueError(errmsg)
---
212:                items_str = def_str
---
213:                self._is_stub = True
---
219:                    raise e
---
229:                dj.DEBUG("Got error: %s when parsing '%s'" % (e, explanation))
---
233:                raise ValueError("No valid item to parse")
---
234:                dj.DEBUG("Got error: no valid item when parsing '%s'" % explanation)
---
244:    def has_label(self, k):
---
254:        """returns a list, may be empty"""
---
268:        for item in self._item_list:
---
271:        ret = "".join(ret).strip()
---
278:        """Returns an object fit for converting to JSON. Consists of lists and dicts of strings."""
---
286:                tags.append({tag: v})
---
296:        try:
---
300:            dj.DEBUG("Cannot find shortened_pos: %s" % e)
---
304:        from . import models
---
310:                ret.append(sim)
---
311:
---
318:        """Runs a ad-hoc, best-effort check and returns a list of human
---
322:            from lib import common
---
329:                    problems.append((wrchar, jyutping))
---
333:            import urllib.request as req
---
334:            import urllib.parse as parse
---
339:                if (len(text.split(" ")) < 4):
---
343:            resp_data = json.loads(q.read())
---
344:            return resp_data["matches"]
---
350:                char_pronunciations = json.loads(f.read())
---
357:                    problems.append((rm, str(sub_problems)))
---
363:            dj.ERROR("Exception while checking problem for %d - %s" %(word_id, str(e)))
---
365:            problems.append("請刪除 (label:gpt)")
---
370:class InvalidLangCodeFormat(ValueError):
---
374:    """This is a global setting, not intended to be used except for standalone
---
384:            lc = raw[:3]
---
388:            lc = iso639.two_to_three(raw[:2])
---
394:        if strict or _g_lang_force_strict:
---
401:        guess = iso639.two_to_three(guess)
---
416:        self._translations = MultilingualFormat.parse(raw, self.CONSTRUCTOR)
---
419:            self._translations = [self.CONSTRUCTOR(raw.strip())]
---
420:            self._originally_had_lang_code = False
---
444:                choplang(line, strict=True)
---
446:                if cur:
---
450:                    ret.append(constructor("\n".join(cur)))
---
451:                    cur = []
---
453:            except ValueError:
---
460:        ret.sort(key=lambda x: lang_order.get(x.lang) or 0)
---
477:        if external == 'zh-hk': # FIXME: this should be yue
---
478:        if external == 'en' or external.startswith('en-'):
---
483:        lang, nolang = choplang(raw.strip())
---
488:        pronunciation = ""
---
493:            if looks_like_jyutping(jyutping):
---
494:                pronunciation = jyutping
---
495:                raw = raw[:open_brace].strip()
---
503:        self.lang, self.text, self.pronunciation = Example.parse(raw)
---
507:        self.lang, self.text, self.pronunciation = Example.parse(raw)
---
513:        return format_explanation_and_example(self.text, limit)
---
517:        return zilib.ruby_match_zipped(self.text, self._RUBY_STRIP_PUNCTUATIONS.sub('', self.pronunciation))
---
524:            if item.strip() == '' and not p:
---
530:                item = custom_formatter(item)
---
544:        import dj
---
548:            return dj.mark_safe(self.ruby_match_html(formatter))
---
550:            dj.ERROR(f"Can't format as ruby text! {self.text} {self.pronunciation} {e}")
---
552:            return self.html() + " (" + self.pronunciation + ")"
---
566:        self.explanation = MultilingualExplanation("\n".join(cur_block))
---
573:        return self.explanation.html(limit)
---
588:        selected = self._translations[0]
---
589:        for tran in self._translations:
---
593:        return selected.html(limit)
---
606:        self.explanation = MultilingualExplanation("\n".join(cur_block))
---
613:        self.explanation = MultilingualExplanation("\n".join(cur_block))
---
616:        eg = MultilingualExample("\n".join(cur_block))
---
618:            if eg.is_probably_phrase:
---
620:            else:
---
623:        eg = MultilingualExample("\n".join(cur_block))
---
625:            if eg.is_probably_phrase:
---
627:            else:
---
631:        eg = MultilingualExample("\n".join(cur_block))
---
633:            if eg.is_probably_phrase:
---
635:            else:
---
647:        return self.explanation.html(limit)
---
652:        ret.append("<explanation>")
---
658:        ret.append("<eg>")
---
660:        ret.append("<eg>")
---
662:        ret.append("<eg>")
---
664:        ret.append("<eg>")
---
671:        return "".join(ret).strip()
---
678:        return {
---
683:                tags.append({tag: v})
---
687:        for t in self.explanation.translations():
---
691:        """Sample input: '唔係詞:m4 hai6 ci4:ng4 hai6 ci4,樣本:joeng6 bun2' """
---
696:        """Sample input: the output of parse_written_form_and_pronunciation()"""
---
703:        while s[-1] == ",": s = s[:-1]  # Remove trailing commas
---
709:                item = (wr, [cantonese.canonicalize_jyutping(y.strip(), allow_exceptions=True, raise_on_error=True) for y in t[1:]])
---
713:                raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)
---
716:            auto_pronounce = "!" + zilib.get_ping3jam1(wr)
---
724:    """Formats the explanation"""
---
726:    import dj
---
737:    idx = -1
---
741:        idx = html.find("#", idx + 1)
---
743:        length = len(html)
---
747:        for term_idx in range(idx + 1, length):
---
750:        if not premature_break:
---
754:        if models.Word.objects.filter(writtenform__representation=html[idx+1:term_idx]).count() > 0:
---
762:                '<a href="/zidin/' + urllib.parse.quote(html[idx+1:term_idx].encode("utf-8")) + '">' + html[idx+1:term_idx] + '</a>' +
---
766:                html[term_idx + eat_trailing_space:]
---
771:        if limit + additional_length < len(html):
---
773:        html = util.find_until(html, limit + additional_length, "。")
---
 [end of text]


