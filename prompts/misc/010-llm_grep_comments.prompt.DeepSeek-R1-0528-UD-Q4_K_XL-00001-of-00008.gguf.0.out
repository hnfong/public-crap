<think>
We are looking for lines that are comments. In bash, comments start with '#'.
 However, note that the shebang (line 1) is also a comment, but we should include it if the query is for comments.
 Also, note that line 3 is empty and does not contain a comment.

 Steps:
 - We'll go through each line and check if it starts with '#' (ignoring any leading whitespace?).
 - But note: in the input, the comments are at the beginning of the line (no leading whitespace for the comment lines in this example).

 However, note that in bash, a comment can also be at the end of a command? But in this input, we don't have any such lines.

 But the query says: "all lines with comments". So we are to include any line that has a comment, even if it's not the whole line?
 However, the problem says: "Only trigger when the input obviously matches the query". In the given input, the only comments are whole-line comments.

 But note: the example input does not have any inline comments (like a command followed by a comment). So we can stick to lines that start with '#'?

 However, the problem says: "For every line in the input, output the line (together with line number) only if the line has something that matches"

 Since the query is for "comments", and in bash a comment starts with '#' and goes to the end of the line, we can consider:

   - If a line has a '#' that is not part of a string or other context, then it's a comment.

 But note: the input has lines like:
   Line 5: script_path=$(python3 -c 'import os,sys; print(os.path.realpath(sys.argv[1]))' "$0")
   This has a '#' inside a string? Actually, no: the string is inside single quotes and the '#' is part of the code string for Python.

 However, we are not asked to parse the code deeply. The problem says "obviously matches". So we can look for lines that have a '#' that is not inside a string? But that's complex.

 Since the input only has whole-line comments and no inline comments, we can simply look for lines that start with '#' (ignoring spaces?).

 But note: the shebang (line 1) is: "#!/bin/bash" -> starts with '#!'

 Also, note that line 5 does not start with '#' and has a '#' inside a string? Actually, the string is in the Python code, but the line itself is a command.

 How about we do: if the first non-whitespace character is '#' then it's a comment? That would capture the whole-line comments.

 However, the problem says: "has something that matches". So if there's a comment anywhere in the line? But in bash, an inline comment starts with '#' and must be at a point where the shell would recognize it as a comment (i.e., not inside quotes). But we don't have any in this input.

 Since the input doesn't have inline comments, we can stick to the simple rule: the line must start with '#' (with optional leading whitespace?).

 But note: in the input, the comments are at the beginning without any whitespace. However, let's check:

   Line 4: "# Save the path to ./download_check script"
   Line 15: "# This is a script to build and install tmux on macOS without homebrew."

 So we'll look for lines that have a '#' at the very beginning? Or with leading whitespace? Actually, the input doesn't have any leading whitespace in comments.

 However, to be safe, we can consider that a comment line is one that has a '#' as the first non-whitespace character.

 But note: the problem says "obviously matches", so we don't want to overcomplicate. Since the input only has whole-line comments that start at the beginning, we can do:

   If the line (after stripping leading whitespace) starts with '#' then it's a comment.

 However, note that the shebang (line 1) is also a comment and starts with '#!'.

 So let's do:

   For each line:
      stripped_line = line.strip()
      if stripped_line.startswith('#'):
          then output the original line (with line number)

 But note: the problem says "output the line (together with line number)" and then "---" after each line.

 Also, note that line 3 is empty -> stripped_line is empty -> skip.

 Let's list the lines that are comments:

   Line 1: #!/bin/bash -> comment
   Line 4: # Save the path to ./download_check script -> comment
   Line 15: # This is a script to build and install tmux on macOS without homebrew. -> comment

 Also, note:

   Line 20: # Download and build pkg-config -> comment
   Line 29: # Download and build ncurses -> comment
   Line 38: # Download and build libevent -> comment
   Line 48: # Download and build utf8proc -> comment
   Line 56: # Download and build tmux -> comment

 But wait, what about:

   Line 5: ... it has a '#' inside? But it doesn't start with '#' -> skip.

   Line 60: PKG_CONFIG="$prefix"/bin/pkg-config ... -> this has a '#' in the string? Actually, no. It has a double quote and then a variable. The '#' is inside the variable expansion? Actually, no: the string is "$prefix"/bin/pkg-config -> the '#' is not in a comment position. It's part of the string? Actually, no: the string is only the part in double quotes? The rest is outside. But note: the shell would interpret a '#' that is not quoted as the start of a comment? But in this line, the '#' is inside the double quotes? Actually, no: the double quotes end at the end of "$prefix", then we have /bin/pkg-config. Then the next character is a space and then './configure'. So there is no '#' in that line.

 Therefore, we can safely use the rule: if the line, after stripping leading whitespace, starts with a '#' then we output.

 Let's code accordingly.

 Steps:

   For each line in the input (with line numbers as provided in the input):

      If the line, after stripping leading whitespace, starts with '#' (which includes '#!') then output the line in the format:

          <line_number>:<original_line_content>

      Then output "---"

 But note: the input has line numbers at the beginning of each line? Actually, the input is given with line numbers as:

      1:#!/bin/bash
      2:set -ex

   We are to output the line number and the original line (without the line number prefix? because the input already has the line number as part of the content?).

   Actually, the input is provided with the line numbers as part of the text? But note the problem says:

        "For every line in the input, output the line (together with line number)"

   And the input is given with the line numbers at the start. So we have to preserve that? Or should we output the line number and then the line without the line number?

   The problem says: "output the line (together with line number)". The input format for each line is:

        <number>:<content>

   We are to output the same format? But note: the problem says "output the line (together with line number)" meaning we output the line number and the content? But the input already has the line number in the text.

   However, the example input is:

        1:#!/bin/bash

   And we want to output:

        1:#!/bin/bash

   So we just output the entire line as given? But note: the problem says "output the line (together with line number)" and the input already has the line number.

   Therefore, we can output the entire line as it appears in the input (including the line number prefix) for the lines that are comments.

   But wait: what if we have a line that is a comment and has the line number prefix? We are to output the same.

   Example: for line 4, the input is:

        4:# Save the path to ./download_check script

   We output:

        4:# Save the path to ./download_check script

   Then "---"

   So we don't change the line.

   However, note that the input has been provided with the line numbers. We are to output the same representation.

   Therefore, we can simply output the entire line (with the line number and colon and the content) for the lines that are comments.

   But note: the problem says "output the line (together with line number)" and the input already has that.

   So we can do:

        For each line in the input (as given, with the line number prefix) that is a comment (by our rule), output the entire line as given.

   How to check? We can remove the line number prefix? But note: the line number prefix is at the beginning and is of the form "<number>:". We don't want to consider that as part of the content.

   Actually, the problem says: the input is:

        1:#!/bin/bash
        2:set -ex
        ...

   We are to consider the content after the colon for the purpose of checking if it's a comment? But the line number prefix is not part of the code.

   Therefore, we should split the line into:

        [line_num_str, content] = line.split(':', 1)

   Then check the content: if content.strip().startswith('#') then the entire line (with the line number and colon) is a comment line? But note: the content might have leading spaces? We strip the content and then check for '#' at the beginning.

   However, note that the input does not have any leading spaces in the content of the comment lines. But to be safe, we do:

        content = line.split(':', 1)[1]   # because the first part is the line number
        if content.strip().startswith('#'):

   But wait: what about the shebang? The content of line 1 is "#!/bin/bash", which starts with '#' -> it will be caught.

   Alternatively, we can note that the line number prefix is always at the beginning and then a colon. So the content starts at the next character. We can do:

        content = line[len(line_num_str)+1:]   # but we don't have the line_num_str as a separate variable.

   Actually, we are reading the input line by line. Each line is of the form:

        "4:# Save the path to ./download_check script"

   We can split at the first colon.

   Steps:

        For each line in the input (as provided):

            parts = line.split(':', 1)   # split into two parts: the first part is the line number string, the rest is the content.

            If the number of parts is not 2, then skip? But every line has a colon? Actually, the input is provided with line numbers and colon.

            Then, content = parts[1]

            stripped_content = content.strip()

            if stripped_content.startswith('#'):

                then output the entire original line (which is the line as given, including the line number and colon)

            Then output "---" after each matching line.

   But note: what if the content has a colon? For example, if the content was:

        echo "hello:world"   # a comment

   Then our split would break at the first colon? But in the input, the line number is the first colon. So the content would be:

        echo "hello:world"   # a comment

   And then we strip and check: the stripped content would be 'echo "hello:world"   # a comment' -> which does not start with '#' -> so it wouldn't be considered a comment? But that's correct because it's not a whole-line comment? However, the problem says "all lines with comments", meaning even if it's an inline comment? But the problem says "obviously matches", and we are only to trigger when obvious.

   However, in the given input, there are no inline comments. So we don't have to worry.

   But the problem says: "all lines with comments" -> meaning any line that has a comment, even if it's inline? But note: the example input doesn't have any. And the problem says "obviously", so we can stick to whole-line comments? Or should we also include lines that have an inline comment?

   Let me re-read the problem: "Only trigger when the input obviously matches the query, i.e. not tangentially related."

   Since the query is "all lines with comments", and an inline comment is a comment, we should include it? But how to detect it? We would have to parse the shell code to know if a '#' is in a comment context? That's complex.

   Given the complexity and the fact that the input doesn't have any, and the problem says "obviously", we can stick to whole-line comments? Or we can do:

        If the line (the content part) has a '#' that is not inside quotes and that is at a point where the shell would interpret it as a comment? -> too complex.

   Alternatively, we can look for any line that has a '#' and then assume it's a comment? But that would catch:

        Line 5: ... 'import os,sys; ...' ...   -> has a '#' in the string? Actually, no: the string is in single quotes and the '#' is inside the string? But the shell doesn't interpret it as a comment? But the line doesn't have a '#' outside the string? So we would not get a false positive? Actually, the line 5 does not have a '#' at all? Let me check:

            Line 5: script_path=$(python3 -c 'import os,sys; print(os.path.realpath(sys.argv[1]))' "$0")

        There is no '#' in that line.

        Line 60: PKG_CONFIG="$prefix"/bin/pkg-config ... -> no '#'.

   So in the entire input, the only '#' are at the beginning of lines (as whole-line comments) and the shebang.

   Therefore, we can do:

        For each line:

            content = the part after the colon

            if content.strip().startswith('#'):

                output the entire line

   But note: what about a line that has a comment but also code? For example:

        echo hello # world

   This line has a comment. We are not capturing it with the above? Because content.strip() would be "echo hello # world", which does not start with '#'? So we wouldn't capture it.

   However, the problem says "obviously matches". Since the input doesn't have any such line, we can ignore.

   But the query is "all lines with comments", so we should capture that? But the problem says "obviously", meaning if it's clear that the line has a comment? We can try to capture any line that has a '#' that is not inside a string? But that's complex.

   Given the ambiguity, and since the input doesn't have any, we'll stick to whole-line comments.

   We'll output:

        Line 1: #!/bin/bash
        Line 4: # Save the path to ./download_check script
        Line 15: # This is a script to build and install tmux on macOS without homebrew.
        Line 20: # Download and build pkg-config
        Line 29: # Download and build ncurses
        Line 38: # Download and build libevent
        Line 48: # Download and build utf8proc
        Line 56: # Download and build tmux

   But note: line 3 is empty -> skip.

   Also, note that line 7 is empty -> skip.

   And line 65: no comment.

   So we output the above 8 lines.

   Format:

        <line as given in input>
        ---

   Example:

        1:#!/bin/bash
        ---
        4:# Save the path to ./download_check script
        ---
        ... and so on.

   Let's code accordingly.

   However, note: the input has been provided with the line numbers. We are to output the same.

   Implementation:

        We are going to read the input line by line (as provided, with the line numbers).

        For each line:

            # Split the line into line number part and content part by the first colon.
            parts = line.split(':', 1)
            if len(parts) < 2:
                # This line doesn't have a colon? Then skip (but in the input every line has a colon and a number)
                continue

            content = parts[1]
            stripped_content = content.strip()

            if stripped_content.startswith('#'):
                print(line)   # the entire line as given
                print('---')

   But note: the problem says "Don't explain. Just output as if you're a command line program". So we output only the matching lines and the separators.

   However, note that the input has a blank line at the end? We are to output nothing for non-matching lines.

   Let's simulate:

        Line 1: "1:#!/bin/bash" -> 
            parts = ['1', '#!/bin/bash'] -> content = '#!/bin/bash' -> stripped_content = '#!/bin/bash' -> starts with '#' -> output "1:#!/bin/bash" and then "---"

        Line 2: "2:set -ex" -> 
            content = "set -ex" -> stripped = "set -ex" -> doesn't start with '#' -> skip.

        Line 3: "3:" -> 
            content = "" -> stripped = "" -> skip.

        Line 4: "4:# Save the path to ./download_check script" -> 
            content = "# Save the path to ./download_check script" -> stripped starts with '#' -> output and then "---"

        ... and so on.

   We'll do that.

   But note: the input has a line 65: "65:ln -sf "$prefix"/bin/tmux ~/bin/tmux" -> no comment -> skip.

   So the output will be:

        1:#!/bin/bash
        ---
        4:# Save the path to ./download_check script
        ---
        15:# This is a script to build and install tmux on macOS without homebrew.
        ---
        20:# Download and build pkg-config
        ---
        29:# Download and build ncurses
        ---
        38:# Download and build libevent
        ---
        48:# Download and build utf8proc
        ---
        56:# Download and build tmux
        ---

   That's 8 lines.

   Let's write the output accordingly.
</think>
1:#!/bin/bash
---
4:# Save the path to ./download_check script
---
15:# This is a script to build and install tmux on macOS without homebrew.
---
20:# Download and build pkg-config
---
29:# Download and build ncurses
---
38:# Download and build libevent
---
48:# Download and build utf8proc
---
56:# Download and build tmux
--- [end of text]


