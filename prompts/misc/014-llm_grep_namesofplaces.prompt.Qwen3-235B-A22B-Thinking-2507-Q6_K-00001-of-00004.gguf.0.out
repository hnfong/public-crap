<think>
We are looking for lines that contain names of countries or regions.
 The query specifies: only output the country/region names with line number, in the style of `grep -n -o` (which outputs the matching part and the line number).

 Steps:
 1. We'll go through each line of the input (with line numbers as given in the input).
 2. For each line, we check if there is an obvious mention of a country or region (not tangential).
 3. We are to output only the country/region name(s) found in that line, along with the line number, in the format: 
        <line_number>:<country/region name>
    But note: the example says "something like grep -n -o", meaning we output the matching string (the country name) and the line number.

 However, note the instruction: "only output the country/region names with line number"

 Important: We must not output the entire line, only the country/region name(s) and the line number.

 Also note: "Only trigger when the input obviously matches the query, i.e. not tangentially related."

 We are to output in the format: 
        <line_number>:<country/region name>
    and after each line of output, emit "---"

 But note: the example input has line numbers already (like "1:", "2:", etc.). However, the input we are processing is the text that starts with "1: ...", so the line numbers we are to use are the ones provided in the input (the numbers before the colon).

 However, the problem says: "For every line in the input, output the line or requested contents of the line (together with line number)"

 But note: the input we are given is a block of text that has line numbers. We are to consider the line numbers as given (so the first line is line 1, second line 2, etc.).

 How to handle:
   We are to output for a matching line: 
        [line_number]:[country/region name]

   But note: the input already has the line numbers in the text? Actually, the input is presented as:

        1: Let's Talk about Unfair Trade Restrictions
        2: In today's world, ...

   However, the problem says: "For every line in the input", meaning the input we are processing is a list of lines, each starting with a number and a colon.

   But note: the instruction says "output the line or requested contents of the line (together with line number)".

   We are to output only the country/region name(s) and the line number (the original line number from the input).

   So for line 4: 
        "4: Take Britain, for example. They allow Silesia lawns to be imported for personal consumption, but prohibit French cambrics and lawns, even if they're meant for export. The UK also imposes higher duties on French wine, while being lenient towards Portugal. This uneven treatment is not only unfair but also stifles trade."

   We see: Britain, Silesia, France (implied by "French"), UK, Portugal.

   However, note:
      - "Britain" is a country (also known as the UK, but here it's mentioned as Britain and then UK).
      - "Silesia" is a region (historically a region in Central Europe, now part of Poland, Czech Republic, and Germany).
      - "French" refers to France, but note: the query says "names of countries or regions". We are to output the actual name, so for "French" we would output "France" (if we are to normalize) but the instruction says "output the country/region names" as they appear? 

   But the example of `grep -o` outputs the exact matching string. However, the problem says: "only output the country/region names". 

   Clarification: We are to output the exact string that is the name of the country or region as it appears in the text.

   However, note:
        - "French" is an adjective, not the country name. The country name is "France". But the text says "French cambrics", so the word "French" is there. But is "French" considered the country name? Typically, we would consider "France" as the country name, but the text uses the adjective.

   The problem says: "only output the country/region names". So we should look for the proper nouns that are country or region names.

   How to interpret:
        - "Britain" -> country name (output "Britain")
        - "Silesia" -> region name (output "Silesia")
        - "French" -> this is an adjective, but it is derived from the country name. However, the problem says "names", so we want the noun form? But note: sometimes country names are used as adjectives (like "French wine") and the adjective form is not the country name. The country name is "France".

   However, the problem does not specify whether to normalize. Since `grep -o` would output the exact string, and the query says "names", we should only output the exact string that is the name (so if the text says "France", we output "France"; if it says "British", that's an adjective and not the country name, so we skip?).

   But note: the example in the problem statement: 
        "Take Britain, for example. ... The UK also ... towards Portugal."

   Here, "Britain", "UK", and "Portugal" are country names.

   Also, "Silesia" is a region.

   However, "French" is not the country name. The country name is "France". But the text does not say "France", it says "French". So we should not output "French" as a country name? 

   Let's read the problem: "names of countries or regions". The name of the country is "France", not "French". So we should only output when the actual name (like "France", "Britain", "Portugal") appears.

   But note: sometimes the text might say "the French" to refer to the people of France, but that's still not the country name. The country name is "France".

   Therefore, we should look for:
        - Proper nouns that are country or region names.

   However, the problem says: "Only trigger when the input obviously matches the query, i.e. not tangentially related."

   So for line 4, we have:
        "Britain" -> country name (output "Britain")
        "Silesia" -> region name (output "Silesia")
        "UK" -> country name (output "UK")
        "Portugal" -> country name (output "Portugal")

   But note: "French" and "cambrics" are not country names. Similarly, "lawns" is not.

   However, what about "France"? The text says "French", but not "France". So we don't have "France" in that line.

   But wait: in line 6: "if French goods are cheaper and better quality, it's actually beneficial for Britain to buy from France, not Portugal or Germany."

   Here, we have "France" and "Germany" as country names.

   So for line 6, we would output:
        6:France
        6:Germany

   And note: "Portugal" also appears in line 6? Actually, in line 6: "not Portugal or Germany", so we have Portugal again.

   However, in line 4 we already had Portugal. But we output per line.

   How to handle multiple matches in one line?
        The example of `grep -o` outputs each match on a separate line.

   So for line 4, we would output:
        4:Britain
        4:Silesia
        4:UK
        4:Portugal

   But note: the problem says "only output the country/region names with line number", so each match on its own line.

   However, the problem also says: "after each line of output, also emit a '---'"

   So for each matching country/region name, we output:
        <line_number>:<name>
        ---

   But note: the problem says "after each line of output", meaning after each output line (each country name output) we put a "---".

   Example for line 4:
        4:Britain
        ---
        4:Silesia
        ---
        4:UK
        ---
        4:Portugal
        ---

   However, the problem says: "If no lines match just give empty response. Don't explain. Just output as if you're a command line program called 'semantic_grep'."

   We must be cautious: only obvious matches.

   Let's go through the input line by line:

   Line 1: "Let's Talk about Unfair Trade Restrictions" -> no country/region name.

   Line 2: "In today's world, it's hard to understand why countries impose extra restrictions on importing goods from nations they consider "unbalanced" in trade. This outdated practice hampers fair commerce and leads to smuggling." 
        -> mentions "countries" and "nations", but these are generic, not specific country names. So skip.

   Line 3: empty -> skip.

   Line 4: 
        "Take Britain, for example. They allow Silesia lawns to be imported for personal consumption, but prohibit French cambrics and lawns, even if they're meant for export. The UK also imposes higher duties on French wine, while being lenient towards Portugal. This uneven treatment is not only unfair but also stifles trade."
        -> Britain, Silesia, UK, Portugal.

        Note: 
            - "Britain" is a country (United Kingdom of Great Britain and Ireland at the time, but commonly referred to as Britain).
            - "Silesia" is a historical region (now split between Poland, Czech Republic, and Germany) but was a distinct region at the time of writing (the text seems historical).
            - "UK" is the abbreviation for United Kingdom.
            - "Portugal" is a country.

        We output each.

   Line 5: empty -> skip.

   Line 6: 
        "Some argue that if Britain imports French goods, the balance of trade will shift in favor of France. But that's a flawed assumption. If French goods are cheaper and better quality, it's actually beneficial for Britain to buy from France, not Portugal or Germany. Moreover, many French goods could be re-exported to other countries, generating revenue for Britain."
        -> Britain (appears multiple times, but we output each occurrence? Actually, the problem doesn't specify if we should output duplicates in the same line. But `grep -o` outputs every occurrence. However, note: the problem says "names of countries or regions", so if the same name appears multiple times, we output each time? But the example doesn't specify.

        However, the problem says: "only output the country/region names", meaning every time a country/region name appears.

        But note: in line 6, "Britain" appears three times? Actually:
            - "if Britain imports"
            - "beneficial for Britain"
            - "generating revenue for Britain"

        So we would output "Britain" three times? 

        However, the problem says: "only output the country/region names", so we output every occurrence.

        But wait: the problem says "something like grep -n -o", and `grep -o` outputs every matching string. So if the same word appears multiple times, it outputs multiple lines.

        However, note: the word "Britain" is the same each time, but it's three separate occurrences.

        But the problem does not specify whether to deduplicate per line. Since `grep -o` does not deduplicate, we output each occurrence.

        However, let's check the example: 
            Input: "Britain ... Britain ... Britain"
            Output: 
                6:Britain
                6:Britain
                6:Britain

        But in the text of line 6, we have:
            - "Britain" (first occurrence)
            - "France" (in "in favor of France")
            - "France" (again: "to buy from France")
            - "Portugal"
            - "Germany"
            - "Britain" (twice more)

        Actually, let's break down line 6:

            "Some argue that if Britain imports French goods, the balance of trade will shift in favor of France. But that's a flawed assumption. If French goods are cheaper and better quality, it's actually beneficial for Britain to buy from France, not Portugal or Germany. Moreover, many French goods could be re-exported to other countries, generating revenue for Britain."

        Occurrences:
            Britain: at the beginning, then later "for Britain", and then "for Britain" at the end -> three times.
            France: "in favor of France", then "to buy from France" -> two times.
            Portugal: once.
            Germany: once.

        However, note: "French" is an adjective and not the country name, so we skip "French". Similarly, "other countries" is generic.

        So for line 6, we output:
            Britain (three times), France (two times), Portugal, Germany.

        But wait: the problem says "only output the country/region names". The country name for "French" is "France", but the text does not say "France" in the adjective form? Actually, the text says "French" (which is the adjective) and then separately says "France" (the noun). So we only output when the noun form (the actual country name) appears.

        Therefore, in line 6, we have:
            - "Britain" (three times)
            - "France" (two times: "in favor of France", "to buy from France")
            - "Portugal" (once)
            - "Germany" (once)

        So we output each occurrence.

   Line 7: empty -> skip.

   Line 8: 
        "Another issue is that there's no reliable way to determine which country has the "balance of trade" in their favor. National biases and prejudices often influence decisions, rather than objective facts. Custom-house books and the course of exchange are supposed to be indicators, but they're often inaccurate."
        -> mentions "country" (generic) and "National" (adjective, not a country name). Skip.

   Line 9: 
        "When the exchange rate between two countries is at par, it's said to indicate a balance. But when a premium is paid for a bill, it means one country has to send money to the other. This doesn't necessarily mean one country is exporting more than it imports."
        -> generic terms: "countries", "country". Skip.

   Line 10: 
        "It's time for countries to rethink these outdated trade restrictions and focus on fair, free, and open commerce."
        -> generic "countries". Skip.

   Line 11: empty -> skip.

   Line 12: 
        "The value of trade between two countries isn't always easy to determine. Just because one country usually pays its debts to another doesn't mean that the trade balance is in its favor. Imagine if England's merchants often pay for goods from Hamburg, Dantzic, and Riga using bills from Holland. This would affect the debt and credit balance between England and Holland, even if England's exports to Holland exceed its imports."
        -> Here we have:
            - England (three times: "England's merchants", "between England and Holland", "England's exports")
            - Hamburg (a city in Germany, but is it a region? The problem says "regions", and cities are not typically considered regions in the context of country/region names for trade. However, note: the problem says "regions", and sometimes cities are used to represent regions? But the problem says "only obvious matches". Hamburg is a city, not a country or a region (like a state or province). However, in historical context, Hamburg was a free city and a major trading center, but it is not a country. Similarly, Dantzic (now Gdansk) was a free city, and Riga is a city in Latvia. 
            - Holland: this is a region in the Netherlands, but often used to refer to the Netherlands. However, the problem says "regions", so Holland is a region. But note: the text says "Holland" twice.

        How to handle:
            - England: country (output each occurrence)
            - Holland: region (and commonly used for the Netherlands, but here it's a region) -> output
            - Hamburg, Dantzic, Riga: these are cities. The problem says "countries or regions". Are cities considered regions? Typically, in the context of trade, we might refer to cities, but the problem specifies "regions" meaning larger areas (like states, provinces, or historical regions). However, the problem does not define "region". 

        But note: the problem says "only trigger when the input obviously matches the query". For cities, it's not obvious that they are considered regions in the context of country/region names for trade. The query is about "names of countries or regions", and regions are typically larger than cities (like states, provinces, or historical regions such as Silesia). 

        However, Silesia was a historical region that included multiple cities, but Hamburg is a single city. 

        Given the ambiguity, and the instruction "only obvious", we might skip the cities. But note: in the historical context of trade, cities like Hamburg, Dantzic, and Riga were important trading centers and sometimes treated as distinct entities (like free cities). However, the problem says "regions", and these are cities, not regions.

        Let's compare with line 4: Silesia was output because it's a region. But Hamburg is a city. 

        The problem does not specify, but to be safe, we should only output when it's clearly a country or a well-known region (like Silesia, which is a historical region). 

        However, note: the text says "from Hamburg, Dantzic, and Riga" — these are cities. The problem says "regions", and a city is not a region. So we skip them.

        Therefore, for line 12, we output:
            England (three times) and Holland (twice).

        But note: the text says "Holland" twice? 
            - "using bills from Holland"
            - "between England and Holland"

        So two occurrences of "Holland".

   Line 13: 
        "The way we calculate exchange rates can also be misleading. It's like saying that a country's currency is worth a certain amount based on its mint's standard, but this standard might not reflect the actual value of the currency. For example, before a coin reform in England, the value of the English currency was actually lower than its standard value. This means that the real exchange rate might be different from the calculated one."
        -> 
            - England: "in England" -> country name (output)
            - Also, "English" is an adjective, so skip.

        So only one occurrence: "England"

   Line 14: empty -> skip.

   Line 15: 
        "[Show original]" -> skip.

   Line 16: 
        "Another issue is that the cost of coinage is different in each country. In England, the government covers the cost, but in France, individuals pay a duty of 8% for coinage. This makes French coins more valuable than English coins with the same amount of silver. So, even if the coins are near their standard values, a sum of English money couldn't buy an equal amount of French money."
        -> 
            - England: "In England"
            - France: "in France"

        Note: "French" and "English" are adjectives, so skip.

        So output: 
            England (once) and France (once)

   However, wait: the text says "in England" and "in France", so the country names are "England" and "France".

   But note: in line 13 we had "England", and in line 16 we have "England" and "France".

   Now, let's compile the list of lines that have country/region names:

   Line 4: Britain, Silesia, UK, Portugal
   Line 6: Britain (3 times), France (2 times), Portugal, Germany
   Line 12: England (3 times), Holland (2 times)
   Line 13: England (1 time)
   Line 16: England, France

   However, note: in line 12, we have "England" and "Holland", but we decided to skip the cities (Hamburg, etc.) but include Holland? Why?

        - Holland is a region (a historical region and a province in the Netherlands). It is commonly used to refer to the Netherlands in informal contexts, but it is a region. So we include it.

   But note: in line 4, we have "Britain" and "UK", which are the same country. But we output both because they are different strings.

   Now, we must output each occurrence.

   However, note: the problem says "only output the country/region names", meaning the exact string as it appears.

   So for line 4:
        Britain -> output "Britain"
        Silesia -> output "Silesia"
        UK -> output "UK"
        Portugal -> output "Portugal"

   For line 6:
        Britain (three times) -> three lines of "Britain"
        France (two times) -> two lines of "France"
        Portugal -> one line of "Portugal"
        Germany -> one line of "Germany"

   For line 12:
        England (three times) -> three lines of "England"
        Holland (two times) -> two lines of "Holland"

   For line 13:
        England -> one line of "England"

   For line 16:
        England -> one line of "England"
        France -> one line of "France"

   Now, note: the problem says "after each line of output, also emit a '---'"

   So the output will be:

        4:Britain
        ---
        4:Silesia
        ---
        4:UK
        ---
        4:Portugal
        ---
        6:Britain
        ---
        6:Britain
        ---
        6:Britain
        ---
        6:France
        ---
        6:France
        ---
        6:Portugal
        ---
        6:Germany
        ---
        12:England
        ---
        12:England
        ---
        12:England
        ---
        12:Holland
        ---
        12:Holland
        ---
        13:England
        ---
        16:England
        ---
        16:France
        ---

   However, wait: in line 12, the text says:
        "Imagine if England's merchants often pay for goods from Hamburg, Dantzic, and Riga using bills from Holland. This would affect the debt and credit balance between England and Holland, even if England's exports to Holland exceed its imports."

   Occurrences of "England":
        - "England's merchants" -> one
        - "between England and Holland" -> two
        - "England's exports" -> three

   Occurrences of "Holland":
        - "bills from Holland" -> one
        - "between England and Holland" -> two
        - "exports to Holland" -> three? 

        Actually: 
            "using bills from Holland" -> first Holland
            "between England and Holland" -> second Holland
            "exports to Holland" -> third Holland? 

        But the text: "even if England's exports to Holland exceed its imports" -> so yes, third Holland.

        However, the problem says: "only output the country/region names". So we output every occurrence.

        Therefore, for line 12, we have three "England" and three "Holland"?

        Let me count:

            England: 
                - "England's merchants" -> one
                - "between England and Holland" -> two
                - "England's exports" -> three

            Holland:
                - "bills from Holland" -> one
                - "between England and Holland" -> two
                - "exports to Holland" -> three

        So we should output three Hollands.

        Correction: I missed the third Holland in the initial count.

   Therefore, line 12: 
        England: 3 times
        Holland: 3 times

   Similarly, in line 6, we have three Britains? Let me recount line 6:

        "Some argue that if Britain imports French goods, the balance of trade will shift in favor of France. But that's a flawed assumption. If French goods are cheaper and better quality, it's actually beneficial for Britain to buy from France, not Portugal or Germany. Moreover, many French goods could be re-exported to other countries, generating revenue for Britain."

        Britain:
            - "if Britain imports" -> first
            - "beneficial for Britain" -> second
            - "generating revenue for Britain" -> third

        France:
            - "in favor of France" -> first
            - "to buy from France" -> second

        Portugal: one
        Germany: one

   So the output for line 6 is as above.

   Now, let's write the output accordingly.

   Important: The problem says "Don't explain. Just output as if you're a command line program"

   We output only the matches, each on a line in the format "<line_number>:<name>", followed by "---" on the next line.

   Note: The line numbers are the ones from the input (the numbers at the beginning of each line in the input block).

   However, note: the input block has line numbers that are part of the text? Actually, the input we are processing is:

        1: Let's Talk about Unfair Trade Restrictions
        2: In today's world, ...

   But the problem says: "For every line in the input", meaning the input has 16 lines (with the numbers 1 to 16). The line number we use is the number that is given at the start of the line.

   However, in the input, the line numbers are provided as part of the text. But we are to use that number as the line number.

   How we process: 
        We are given a block of text that has lines starting with "<number>:".

        We can split the input by newline, and for each line, the line number is the number at the beginning (before the colon).

        But note: the problem says "the input" is the block from "# START OF INPUT" to "# END OF INPUT", which includes the line numbers.

        However, the problem also says: "For every line in the input", meaning the input has 16 lines (as numbered).

        So we consider the line number as the number that is written at the start of the line.

   Implementation in our mind: 
        We are to simulate processing the input as a list of lines, where the first token (until the colon) is the line number.

        But note: the problem does not require us to parse the line number from the text? Actually, the input is presented with the line numbers, so we know that the first line is line 1, second line 2, etc.

        However, the problem says: "together with line number", meaning the line number in the input (which is given).

        So we can rely on the fact that the input lines are numbered consecutively starting at 1.

        But note: the input has:

            1: ...
            2: ...
            ...
            16: ...

        So the line number for the first line of the input block (after "# START OF INPUT") is 1, then 2, etc.

        However, the problem says: "the input" is the block from line 1 to line 16 (as numbered).

        Therefore, we can simply use the line number as the index (starting at 1).

   But note: the input block has:

        1: ...
        2: ...
        3: 
        4: ...

        So the third line is empty, but it's still line 3.

   How we'll do it:

        We'll split the input block (the part between # START and # END) by newline.

        Each line in this split is of the form: "<number>: <text>"

        However, note: the problem says the input is:

            1: Let's Talk about Unfair Trade Restrictions
            2: In today's world, ...

        So we can extract the line number by taking the part before the colon.

        But the problem says: "the line number" we output is the one that is in the input.

        Alternatively, we can note that the input is given with the line numbers, so we know the line number for each line.

        However, to be safe, we'll assume that the input block is exactly as provided, and the line numbers are sequential and match the position.

        But the problem says: "the input" has the line numbers as shown.

        Since the problem states the input with line numbers, we can use the provided line numbers.

        However, in our processing, we are going to:

            - Split the input block by newline.
            - For each line in the split list, the line number is the number at the beginning (we can extract it by splitting at the first colon).

        But note: the problem says "Don't explain", so we are just to output.

        Given the constraints, we'll simulate:

            We have the input as a string. We split it into lines.

            For i from 0 to n-1:
                line = input_lines[i]
                The actual line number is the number at the start (which should be i+1, but we'll extract it to be safe).

            However, the problem says the input is formatted with the line numbers, so we can extract:

                Example: "4: Take Britain, ..."

                We can split by the first colon: 
                    parts = line.split(':', 1)
                    line_number = parts[0].strip()
                    text = parts[1].strip()

            Then we search in `text` for country/region names.

        But note: the problem says we are a command line program, so we are to process the input as given.

        However, since we are writing the output, we can do:

            For each line in the input block (from the START to END), we extract the line number and the text.

        Steps for our simulation:

            Input block (without the START and END markers) is:

                1: Let's Talk about Unfair Trade Restrictions
                2: In today's world, it's hard to understand why countries impose extra restrictions on importing goods from nations they consider "unbalanced" in trade. This outdated practice hampers fair commerce and leads to smuggling.
                3: 
                4: Take Britain, for example. They allow Silesia lawns to be imported for personal consumption, but prohibit French cambrics and lawns, even if they're meant for export. The UK also imposes higher duties on French wine, while being lenient towards Portugal. This uneven treatment is not only unfair but also stifles trade.
                ... etc.

            We split by newline, and for each:

                line_str = "1: Let's ..."
                We split at the first colon: 
                    num = "1", text = " Let's ..."

            Then we search in `text` for country/region names.

        However, note: the problem says "only output the country/region names", so we are only concerned with the text part.

        But the line number we output is `num`.

   Given the above, we'll generate the output as described.

   Let's list all the matches:

   Line 4 (text: "Take Britain, for example. They allow Silesia lawns to be imported for personal consumption, but prohibit French cambrics and lawns, even if they're meant for export. The UK also imposes higher duties on French wine, while being lenient towards Portugal. This uneven treatment is not only unfair but also stifles trade."):

        Britain -> at "Britain,"
        Silesia -> at "Silesia lawns"
        UK -> at "The UK"
        Portugal -> at "towards Portugal"

        So four matches.

   Line 6 (text: "Some argue that if Britain imports French goods, the balance of trade will shift in favor of France. But that's a flawed assumption. If French goods are cheaper and better quality, it's actually beneficial for Britain to buy from France, not Portugal or Germany. Moreover, many French goods could be re-exported to other countries, generating revenue for Britain."):

        Britain: 
            - "if Britain imports"
            - "beneficial for Britain"
            - "revenue for Britain"
        France:
            - "in favor of France"
            - "to buy from France"
        Portugal: "not Portugal"
        Germany: "or Germany"

        So 3+2+1+1 = 7 matches.

   Line 12 (text: "The value of trade between two countries isn't always easy to determine. Just because one country usually pays its debts to another doesn't mean that the trade balance is in its favor. Imagine if England's merchants often pay for goods from Hamburg, Dantzic, and Riga using bills from Holland. This would affect the debt and credit balance between England and Holland, even if England's exports to Holland exceed its imports."):

        England:
            - "England's merchants"
            - "between England and Holland"
            - "England's exports"
        Holland:
            - "bills from Holland"
            - "between England and Holland"
            - "exports to Holland"

        So 3+3 = 6 matches.

   Line 13 (text: "The way we calculate exchange rates can also be misleading. It's like saying that a country's currency is worth a certain amount based on its mint's standard, but this standard might not reflect the actual value of the currency. For example, before a coin reform in England, the value of the English currency was actually lower than its standard value. This means that the real exchange rate might be different from the calculated one."):

        England: "in England"

        So 1 match.

   Line 16 (text: "Another issue is that the cost of coinage is different in each country. In England, the government covers the cost, but in France, individuals pay a duty of 8% for coinage. This makes French coins more valuable than English coins with the same amount of silver. So, even if the coins are near their standard values, a sum of English money couldn't buy an equal amount of French money."):

        England: "In England"
        France: "in France"

        So 2 matches.

   Now, we output:

        4:Britain
        ---
        4:Silesia
        ---
        4:UK
        ---
        4:Portugal
        ---
        6:Britain
        ---
        6:Britain
        ---
        6:Britain
        ---
        6:France
        ---
        6:France
        ---
        6:Portugal
        ---
        6:Germany
        ---
        12:England
        ---
        12:England
        ---
        12:England
        ---
        12:Holland
        ---
        12:Holland
        ---
        12:Holland
        ---
        13:England
        ---
        16:England
        ---
        16:France
        ---

   But note: the problem says "after each line of output, also emit a '---'", meaning after every output line (each country name line) we put a "---".

   Therefore, the last line of output is "---", but that's acceptable.

   However, the problem does not specify if there should be a trailing "---", but it says "after each line of output", so we do it for every output line.

   We are ready to output.

   Important: The problem says "If no lines match just give empty response." but we have matches.

   Let's write the output exactly as required.
</think>

4:Britain
---
4:Silesia
---
4:UK
---
4:Portugal
---
6:Britain
---
6:Britain
---
6:Britain
---
6:France
---
6:France
---
6:Portugal
---
6:Germany
---
12:England
---
12:England
---
12:England
---
12:Holland
---
12:Holland
---
12:Holland
---
13:England
---
16:England
---
16:France
--- [end of text]


