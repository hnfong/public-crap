<think>
Okay, let's tackle this problem. The user wants me to perform a semantic grep on the provided input code, looking for lines that obviously relate to error handling. The query is "code that relates to error handling," so I need to identify lines that define or handle errors.

First, I'll go through each line of the input and check if it's related to error handling. Error handling in Python typically involves exceptions, custom exception classes, functions that raise errors, or error validation.

Looking at the input code:

Line 44: class DefinitionError(ValueError): pass – This is a custom exception class, definitely related to error handling.

Line 47: class AmbiguousPronunciationError(DefinitionError): pass – Another custom exception, inheriting from DefinitionError.

Line 52: class InvalidJyutPingError(DefinitionError): pass – Another custom exception.

Line 57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ... – Custom exception with __init__ method.

Line 62: class MissingItemError(DefinitionError): pass – Another custom exception.

Line 100: ... – Not relevant.

Line 140: raise ValueError("Invalid part of speech") – This is an error raised during processing.

Line 146: raise ValueError("Invalid label name") – Another error raise.

Line 170: ... – Not relevant.

Line 177: raise ValueError("Unknown tag: %s" % k) – Error raised when an unknown tag is encountered.

Line 189: if validator is not None and not validator.match(v): raise ValueError(...) – Error handling code here.

Line 207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str)) – Error raised when a required tag is missing.

Line 220: raise e – If an error occurs, it's re-raised.

Line 240: return MultilingualExplanationAndExamples("") – Not an error.

Line 245: return ("label" in self._tags) and (k in self._tags["label"]) – Not error handling.

Line 250: return self._is_stub – Not error handling.

Line 254: x = self._tags.get(k) – Not error handling.

Line 270: ... – Not relevant.

Line 277: return ret – Not error handling.

Line 280: tags = [] – Not error handling.

Line 300: import dj – Not error handling.

Line 307: return [short_pos(pos) for pos in self._tags["pos"]] – Not error handling.

Line 310: return ret – Not error handling.

Line 317: return self._item_list – Not error handling.

Line 320: ... – Not error handling.

Line 323: def list_subproblems(subject, pronunciations): – Not error handling.

Line 330: if jyutping not in pronunciations[wrchar]: – This could be part of error handling if it raises an error, but in the code, it's just checking and not raising.

Line 337: if (len(text.split(" ")) < 4): return [] – Not error handling.

Line 340: print("Making query to languagetool.org", text) – Not error handling.

Line 341: data = parse.urlencode({'text':text, 'language':'auto'}) – Not error handling.

Line 342: q = req.urlopen(req.Request("https://api.languagetool.org/v2/check", method='POST', data=data.encode("utf-8"))) – Not error handling.

Line 343: resp_data = json.loads(q.read()) – Not error handling.

Line 344: print(resp_data) – Not error handling.

Line 345: return resp_data["matches"] – Not error handling.

Line 347: problems = [] – Not error handling.

Line 349: with open("lists/charlist.json") as f: – Not error handling.

Line 350: char_pronunciations = json.loads(f.read()) – Not error handling.

Line 352: for item in self.items(): – Not error handling.

Line 353: for multilingual_example in item.multilingual_examples(): – Not error handling.

Line 355: if example.lang == 'yue' and not common.looks_like_a_sentence(t.text): – Not error handling.

Line 357: if sub_problems := list_subproblems(rm, char_pronunciations): – Not error handling.

Line 358: problems.append((rm, str(sub_problems))) – Not error handling.

Line 360: problems.extend(grammar_check(example.text)) – Not error handling.

Line 362: except Exception as e: – This is a catch block, part of error handling.

Line 363: dj.ERROR("Exception while checking problem for %d - %s" %(word_id, str(e))) – Logging an error, part of error handling.

Line 366: problems.append("請刪除 (label:gpt)") – Not error handling.

Line 370: class InvalidLangCodeFormat(ValueError): pass – Custom exception for language code errors.

Line 374: def set_lang_force_strict(flag=True): – Not error handling.

Line 377: _g_lang_force_strict = flag – Not error handling.

Line 379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form") – This is raising an exception, part of error handling.

Line 387: if lc is not None and lc.lower() in iso639.supported_language_set(): return (lc.lower(), raw) – Not error handling.

Line 400: if external == 'zh-hk': external = 'yue' – Not error handling.

Line 401: if external == 'en' or external.startswith('en-'): external = 'eng' – Not error handling.

Line 405: def looks_like_jyutping(s): – Not error handling.

Line 407: s = s.split(" ") – Not error handling.

Line 408: k = sum([cantonese.is_valid_jyutping_form(w.strip(",!;?.")) for w in s]) – Not error handling.

Line 409: return (k * 1.0 / len(s)) > 0.7 – Not error handling.

Line 410: – Not error handling.

Line 417: try: – This is a try block, part of error handling.

Line 418: self._translations = MultilingualFormat.parse(raw, self.CONSTRUCTOR) – Not error handling.

Line 420: except InvalidLangCodeFormat: – Catching an exception, part of error handling.

Line 421: self._translations = [self.CONSTRUCTOR(raw.strip())] – Not error handling.

Line 424: self.is_probably_phrase = False – Not error handling.

Line 426: if self.CONSTRUCTOR == Example: – Not error handling.

Line 427: for t in self._translations: – Not error handling.

Line 428: if t.lang == "yue" and not common.looks_like_a_sentence(t.text): – Not error handling.

Line 429: self.is_probably_phrase = True – Not error handling.

Line 430: break – Not error handling.

Line 434: ret = [] – Not error handling.

Line 435: raw = raw.strip() – Not error handling.

Line 437: choplang(raw, strict=True) – Not error handling.

Line 439: if cur: – Not error handling.

Line 440: ret.append(constructor("\n".join(cur))) – Not error handling.

Line 441: cur = [] – Not error handling.

Line 443: line = line.strip() – Not error handling.

Line 445: choplang(line, strict=True) – Not error handling.

Line 447: if cur: – Not error handling.

Line 448: ret.append(constructor("\n".join(cur))) – Not error handling.

Line 449: cur = [] – Not error handling.

Line 450: if cur: – Not error handling.

Line 451: ret.append(constructor("\n".join(cur))) – Not error handling.

Line 454: ret.sort(key=lambda x: lang_order.get(x.lang) or 0) – Not error handling.

Line 456: return ret – Not error handling.

Line 459: def formatter(s): – Not error handling.

Line 460: try: – Try block for error handling.

Line 461: return dj.mark_safe(self.ruby_match_html(formatter)) – Not error handling.

Line 462: except Exception as e: – Catching exceptions, part of error handling.

Line 463: dj.ERROR(f"Can't format as ruby text! {self.text} {self.pronunciation} {e}") – Logging an error.

Line 464: return self.html() + " (" + self.pronunciation + ")" – Not error handling.

Line 467: return json.dumps(self.ruby_match) – Not error handling.

Line 470: if explanation_str.startswith("ref:"): return "【字典工程進行中】" – Not error handling.

Line 471: import dj – Not error handling.

Line 472: from zidin import models – Not error handling.

Line 473: # Find all #xxx and convert into links – Not error handling.

Line 474: # Not very efficient but N is expected to be small – Not error handling.

Line 475: # TODO: Unit test this – Not error handling.

Line 477: def parse_written_form_and_pronunciation(s): – Not error handling.

Line 478: """Sample input: '唔係詞:m4 hai6 ci4:ng4 hai6 ci4,樣本:joeng6 bun2' """ – Not error handling.

Line 479: for item in ["/", "\\"]: – Not error handling.

Line 480: if s.find(item) > -1: raise IllegalCharacterError(...) – This is raising an exception, so line 480 is part of error handling.

Line 481: from lib import cantonese – Not error handling.

Line 482: while s[-1] == ",": s = s[:-1] – Not error handling.

Line 484: for x in s.split(","): – Not error handling.

Line 485: t = x.strip().split(":") – Not error handling.

Line 486: wr = t[0].strip() – Not error handling.

Line 487: if len(t) > 1: – Not error handling.

Line 488: try: – Try block for error handling.

Line 489: item = (wr, [cantonese.canonicalize_jyutping(y.strip(), allow_exceptions=True, raise_on_error=True) for y in t[1:]])
– Not error handling.

Line 490: if item not in ret: ret.append(item) – Not error handling.

Line 491: except ValueError: – Catching an exception, part of error handling.

Line 492: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr) – Raising an exception.

Line 494: auto_pronounce = "!" + zilib.get_ping3jam1(wr) – Not error handling.

Line 495: ret.append((wr, [auto_pronounce])) – Not error handling.

Line 500: return ret – Not error handling.

Line 505: def encode_written_form_and_pronunciation(l): – Not error handling.

Line 507: return ",".join([ x[0] + ":" + ":".join(x[1]) for x in l ]) – Not error handling.

Line 510: return dj.mark_safe(html.strip()) – Not error handling.

So the lines that clearly relate to error handling are those that define custom exception classes or raise exceptions. Specifically:

- Line 44: DefinitionError is a custom exception.
- Line 47: AmbiguousPronunciationError inherits from DefinitionError.
- Line 52: InvalidJyutPingError inherits from DefinitionError.
- Line 57: IllegalCharacterError inherits from DefinitionError.
- Line 62: MissingItemError inherits from DefinitionError.
- Line 140: raises ValueError for invalid part of speech.
- Line 146: raises ValueError for invalid label name.
- Line 177: raises ValueError for unknown tag.
- Line 207: raises ValueError for missing required tag.
- Line 220: raises e (the exception) if an error occurs.
- Line 369: raises InvalidLangCodeFormat if an error occurs.
- Line 379: raises InvalidLangCodeFormat if strict mode is on.
- Line 480: raises IllegalCharacterError if slashes are found.
- Line 488: try block that catches ValueError and raises InvalidJyutPingError.

But the user wants lines that obviously match the query. So the exception classes and the raise statements that are directly related to error handling. The lines that define the exception classes (44, 47, 52, 57, 62, 370, 377) and the lines where exceptions are raised (140, 146, 177, 207, 480, 488, 369, 379) are the ones that should be included.

But wait, the user said "code that relates to error handling". So any code that defines an exception class or raises an exception. So lines 44-62, 140, 146, 177, 207, 369, 379, 480, 488.

But the user also said to ignore tangential lines. So for example, line 370 is a class definition, line 377 is a function that sets a global variable, but the actual error handling is in the raise statements.

So the lines that are clearly related are those that define the exception classes and the ones that raise exceptions. Let me check each line again.

Lines 44-62: All define exception classes that inherit from ValueError or other exceptions. These are clearly error handling related.

Lines 140, 146, 177, 207: These are raise statements for ValueError.

Lines 369: class InvalidLangCodeFormat(ValueError): pass – another exception.

Lines 379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form") – raising an exception.

Lines 480: if s.find(item) > -1: raise IllegalCharacterError(...) – raising an exception.

Lines 488: except ValueError: raise InvalidJyutPingError(...) – catching and re-raising.

So the lines that should be output are those that define the exception classes (44, 47, 52, 57, 62, 370, 377) and the lines where exceptions are raised (140, 146, 177, 207, 369, 379, 480, 488).

Wait, but line 377 is a function that sets a global variable, not raising an exception. So that's not part of error handling. So line 377 is not relevant.

Similarly, line 370 is a class definition, not a raise.

So the relevant lines are:

- Lines 44-62: classes DefinitionError, AmbiguousPronunciationError, InvalidJyutPingError, IllegalCharacterError, MissingItemError, InvalidLangCodeFormat.
- Lines 140, 146, 177, 207: raise statements.
- Lines 369, 379: raise statements.
- Line 480: raise statement.
- Line 488: except block that raises an exception.

But the user wants lines that have something that matches the query. So the lines that define the exceptions (44, 47, 52, 57, 62, 370) and the lines that raise exceptions (140, 146, 177, 207, 369, 379, 480, 488).

But line 379 is part of the function set_lang_force_strict, which raises an exception if strict mode is on. So that's part of error handling.

Line 488 is in the parse function, which catches ValueError and raises InvalidJyutPingError.

So the lines that should be output are:

44: class DefinitionError(ValueError): pass
47: class AmbiguousPronunciationError(DefinitionError): pass
52: class InvalidJyutPingError(DefinitionError): pass
57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
62: class MissingItemError(DefinitionError): pass
370: class InvalidLangCodeFormat(ValueError): pass
379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
480: if s.find(item) > -1: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')
488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

Wait, but line 488 is part of a try-except block. The code is:

try:
    item = (wr, [cantonese.canonicalize_jyutping(y.strip(), allow_exceptions=True, raise_on_error=True) for y in t[1:]])
    if item not in ret:
        ret.append(item)
except ValueError:
    raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

So line 488 is the except clause that raises an exception. So that line should be included.

Similarly, line 369 is the except clause in the check_problems function, which raises the error.

So the lines that are clearly related to error handling are those that define exception classes and those that raise exceptions.

Now, the user wants to output each line that matches, along with line numbers. So I need to list all these lines.

But wait, the user said "only trigger when the input obviously matches the query". So maybe some lines are not directly related. For example, line 377 is a function that sets a global variable, but not raising an error. So that's not part of error handling.

So the lines to output are:

44: class DefinitionError(ValueError): pass
47: class AmbiguousPronunciationError(DefinitionError): pass
52: class InvalidJyutPingError(DefinitionError): pass
57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
62: class MissingItemError(DefinitionError): pass
370: class InvalidLangCodeFormat(ValueError): pass
379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
480: if s.find(item) > -1: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')
488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)
140: raise ValueError("Invalid part of speech")
146: raise ValueError("Invalid label name")
177: raise ValueError("Unknown tag: %s" % k)
207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
369: problems.append("請刪除 (label:gpt)")
Wait, line 369 is part of the check_problems function, but it's not an exception. It's appending a message. So that's not error handling.

Wait, line 369 is:

if self.has_label("gpt"):
    problems.append("請刪除 (label:gpt)")

That's not an error, it's just adding a note. So that line is not related to error handling.

So the lines that are definitely related are the ones that define exception classes and the ones that raise exceptions.

So the lines are:

44: class DefinitionError(ValueError): pass
47: class AmbiguousPronunciationError(DefinitionError): pass
52: class InvalidJyutPingError(DefinitionError): pass
57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
62: class MissingItemError(DefinitionError): pass
370: class InvalidLangCodeFormat(ValueError): pass
379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
140: raise ValueError("Invalid part of speech")
146: raise ValueError("Invalid label name")
177: raise ValueError("Unknown tag: %s" % k)
207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)
480: if s.find(item) > -1: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

Wait, line 480 is part of the parse_written_form_and_pronunciation function. It checks for slashes and raises an error.

So these lines are the ones that should be output.

Now, I need to check if these lines are in the input. Let me check the input again.

Looking at the input lines:

Line 44: class DefinitionError(ValueError): pass
Line 47: class AmbiguousPronunciationError(DefinitionError): pass
Line 52: class InvalidJyutPingError(DefinitionError): pass
Line 57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
Line 62: class MissingItemError(DefinitionError): pass
Line 370: class InvalidLangCodeFormat(ValueError): pass
Line 379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
Line 140: raise ValueError("Invalid part of speech")
Line 146: raise ValueError("Invalid label name")
Line 177: raise ValueError("Unknown tag: %s" % k)
Line 207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
Line 488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)
Line 480: if s.find(item) > -1: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

So these lines are the ones that match the query. Now, I need to output each of these lines with their line numbers, followed by "---".

So the answer should be:

44:class DefinitionError(ValueError): pass
---
47:class AmbiguousPronunciationError(DefinitionError): pass
---
52:class InvalidJyutPingError(DefinitionError): pass
---
57:class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
---
62:class MissingItemError(DefinitionError): pass
---
370:class InvalidLangCodeFormat(ValueError): pass
---
379:if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
---
140:raise ValueError("Invalid part of speech")
---
146:raise ValueError("Invalid label name")
---
177:raise ValueError("Unknown tag: %s" % k)
---
207:raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
---
488:except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)
---
480:if s.find(item) > -1: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

Wait, but line 480 is part of the function parse_written_form_and_pronunciation. The line is:

480:    for item in ["/", "\\"]:
481:        if s.find(item) > -1:
482:            raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

So line 482 is the raise statement. So line 482 is the one that should be included.

But in the input, line 480 is the for loop, line 481 is the if, line 482 is the raise. So the line with the raise is line 482.

Wait, the user's input is:

479:    for item in ["/", "\\"]:
480:        if s.find(item) > -1:
481:            raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

So line 481 is the raise statement. So line 481 should be included.

But in the input, the line numbers are from 1 to 719. Let me check the input again.

Looking at the input:

Line 480:        if s.find(item) > -1:
Line 481:            raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')

So line 481 is the raise statement.

So the correct lines are:

44: class DefinitionError(ValueError): pass
47: class AmbiguousPronunciationError(DefinitionError): pass
52: class InvalidJyutPingError(DefinitionError): pass
57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
62: class MissingItemError(DefinitionError): pass
370: class InvalidLangCodeFormat(ValueError): pass
379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
140: raise ValueError("Invalid part of speech")
146: raise ValueError("Invalid label name")
177: raise ValueError("Unknown tag: %s" % k)
207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
481: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')
488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

Wait, line 488 is part of the code in the parse_written_form_and_pronunciation function. The code is:

488:        except ValueError:
489:            raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

So line 488 is the except clause, which raises an exception. So line 488 should be included.

So the lines are:

44, 47, 52, 57, 62, 370, 379, 140, 146, 177, 207, 481, 488.

Wait, line 379 is:

379:    if strict or _g_lang_force_strict:
380:        raise InvalidLangCodeFormat("Invalid form")

But in the input, line 379 is the line that starts with "if strict or _g_lang_force_strict: raise ...", so line 379 is the line that contains the raise statement.

So the lines to output are:

44: class DefinitionError(ValueError): pass
47: class AmbiguousPronunciationError(DefinitionError): pass
52: class InvalidJyutPingError(DefinitionError): pass
57: class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
62: class MissingItemError(DefinitionError): pass
370: class InvalidLangCodeFormat(ValueError): pass
379: if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
140: raise ValueError("Invalid part of speech")
146: raise ValueError("Invalid label name")
177: raise ValueError("Unknown tag: %s" % k)
207: raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
481: raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')
488: except ValueError: raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

Wait, line 488 is the except clause, which is part of the code. So the line is:

488:        except ValueError:
489:            raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

But the user wants the line that contains the code that matches the query. So line 488 is the except line, but the actual raise is on line 489. However, in the input, line 489 is not part of the input lines. Wait, the input is given as:

Looking at the input code:

Line 488:        except ValueError:
489:            raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

But in the input provided, the line numbers go up to 719. So line 488 is the except line, and line 489 is the raise line. But the user's input includes line 488 as part of the code. Wait, the input is:

488:        except ValueError:
489:            raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

So line 489 is the line that raises the exception. But in the input, the line numbers are as per the input. So the user's input is:

The input lines are numbered from 1 to 719. So line 489 is part of the input. But in the input provided, the line numbers are as follows:

Looking at the input:

The line numbers are:

488:        except ValueError:
489:            raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr)

So line 489 is the line that raises the exception. Therefore, line 489 should be included.

But the user's input may have line numbers as per the code. So the correct lines are:

44, 47, 52, 57, 62, 370, 379, 140, 146, 177, 207, 481, 489.

Wait, line 481 is the line that raises the IllegalCharacterError.

So the final list of lines to output are those that define exception classes or raise exceptions.

So the answer should include these lines with their line numbers.
</think>

44:class DefinitionError(ValueError): pass
---
47:class AmbiguousPronunciationError(DefinitionError): pass
---
52:class InvalidJyutPingError(DefinitionError): pass
---
57:class IllegalCharacterError(DefinitionError): def __init__(self, value): ...
---
62:class MissingItemError(DefinitionError): pass
---
370:class InvalidLangCodeFormat(ValueError): pass
---
379:if strict or _g_lang_force_strict: raise InvalidLangCodeFormat("Invalid form")
---
140:raise ValueError("Invalid part of speech")
---
146:raise ValueError("Invalid label name")
---
177:raise ValueError("Unknown tag: %s" % k)
---
207:raise ValueError("Required tag '%s' not found for '%s': '%s'!" % (req_tag, self, items_str))
---
481:raise IllegalCharacterError('Pronunciation cannot contain slashes or backslashes; if you want to add a different written/spoken form, add a separate form instead (i.e. 咖喱:gaa3 lei1,咖哩:gaa3 lei1)')
---
489:raise InvalidJyutPingError('Invalid jyutping in "%s"' % wr) [end of text]


