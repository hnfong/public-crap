 

### Instruction:

Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.


### Response:


Bubble Sort:

The idea behind bubble sort is to repeatedly go through a list, comparing adjacent elements and swapping them if they are in the wrong order. This process continues until no more swaps need to be made. 

This algorithm's time complexity is O(n^2) because we have to make n passes through the list and each pass takes n amount of time. The best case scenario is O(n), which occurs when the array is already sorted, in this case we only need one pass through the array. 

The space complexity is O(1), because we can sort the array without using extra memory. 

```python
def bubble_sort(arr):
    """
    Sorts an list of integers
    """
    n = len(arr)
    for i in range(n-1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
```

Merge Sort:

The idea behind merge sort is to divide a list into smaller sublists until each sublist has only one element. Then we merge those sublists together so that the elements in each merged sublist are sorted. This process continues until only one merged sublist remains, which will be our final sorted array. 

This algorithm's time complexity is O(n log n) because the number of passes through the list grows logarithmically with respect to the size of the array and each pass takes n amount of time. The best case scenario is O(n), which occurs when the array is already sorted, in this case we only need one pass through the array. 

The space complexity is O(n), because we create a new list to merge the sublists together. 

```python
def merge_sort(arr):
    """
    Sorts an list of integers
    """
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
```

Comparison:

Bubble sort is simple and easy to understand. It's also very efficient for small arrays but as the size of the array grows, bubble sort becomes less efficient. Merge sort on the other hand is more complicated but it's much faster than bubble sort. 