<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

<|im_start|>assistant
Bubble Sort:
```python
def bubbleSort(arr): 
    n = len(arr) 

   # Traverse through all array elements  
    for i in range(n-1): 

       # Last i elements are already sorted, so inner loop starts from 0 to n-i-1. 
       for j in range(0, n-i-1): 
           if arr[j] > arr[j+1] : 
               arr[j], arr[j+1] = arr[j+1], arr[j] 

# Test bubbleSort function  
array = [64, 34, 25, 12, 22, 11, 90]  
bubbleSort(array)  
print ("Sorted array is:") 
for i in range(len(array)): 
    print ("%d" %array[i]), 
```

Merge Sort:
```python
def mergeSort(arr):
   
    if len(arr) > 1 :

       # Finding the mid of array and dividing 
       mid = len(arr) // 2 

       L = arr[:mid]  # left half 
       R = arr[mid:] # right half 

       # Recursively sorting both halves 
       mergeSort(L) 
       mergeSort(R) 

       i = j = k = 0

       # Copy data to temp arrays L[] and R[] 
       while i < len(L) and j < len(R): 
           if L[i] < R[j]: 
               arr[k] = L[i] 
               i += 1
           else: 
                arr[k] = R[j] 
                j += 1
           k += 1

       # Checking if any element was left 
       while i < len(L): 
           arr[k] = L[i] 
           i += 1
           k += 1

       while j < len(R): 
           arr[k] = R[j] 
           j += 1
           k += 1

# Test mergeSort function  
array = [64, 34, 25, 12, 22, 11, 90]  
mergeSort(array)  
print ("Sorted array is:") 
for i in range(len(array)): 
    print ("%d" %array[i]), 
```

Discussion and Comparison:
Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until no more swaps are needed. 

Merge Sort, on the other hand, is a divide-and-conquer technique. It works by dividing the unsorted array into n subarrays, each containing one element, and then repeatedly merging these subarrays to produce new sorted subarrays until there is only one subarray remaining.

The time complexity of bubble sort is O(n^2), which means that the algorithm will take longer as the input size increases. In contrast, merge sort has a time complexity of O(n log n) and thus sorts elements more quickly with larger inputs. 

However, bubble sort has one advantage over merge sort - it performs well on nearly sorted lists. If your data is already partially sorted or almost sorted, then bubble sort will perform significantly better than merge sort. 

The space complexity of both sorting algorithms is O(1), meaning that they use a constant amount of extra space in relation to the size of the input list. 

In terms of stability (preserving relative order of equal elements), both sorts are stable, i.e., it preserves the original order of equal elements in the sorted array.

Finally, Bubble Sort is not good for large lists as it can take a lot more time due to its quadratic time complexity. Merge sort, being an efficient divide and conquer algorithm, is much better suited for larger datasets.