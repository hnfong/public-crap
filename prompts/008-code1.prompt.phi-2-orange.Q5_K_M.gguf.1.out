<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

<|im_start|>assistant
Bubble Sort Algorithm:

1. Start with an unsorted array.
2. Compare each element in the array with its adjacent element. If they are in the wrong order, swap them.
3. Repeat step 2 until no more swaps are needed, which means the array is sorted.

Here's a Python implementation of Bubble Sort:

```python
def bubble_sort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n-i-1):
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# Test bubble_sort function
numbers = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(numbers)
print("Sorted array is:", numbers)
```

Merge Sort Algorithm:

1. If the array has more than one element,
   - Find the mid point of the array and divide it into two halves, left and right.
   - Recursively sort both halves.
   - Merge the sorted halves back together.

Here's a Python implementation of Merge Sort:

```python
def merge_sort(arr):
    if len(arr) > 1:
        # Find the mid point of the array
        mid = len(arr) // 2

        # Split the array into two halves
        L = arr[:mid]
        R = arr[mid:]

        # Sort both halves recursively
        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        # Merge sorted halves back together
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        # If any element was left in left half
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        # If any element was left in right half
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

# Test merge_sort function
numbers = [64, 34, 25, 12, 22, 11, 90]
merge_sort(numbers)
print("Sorted array is:", numbers)
```

Comparison between Bubble Sort and Merge Sort:

1. Time Complexity: Merge Sort has a time complexity of O(n log n), while Bubble Sort has a time complexity of O(n^2). In large datasets, Bubble Sort will be inefficient as it performs many unnecessary comparisons and swaps.
2. Space Complexity: Both Bubble Sort and Merge Sort have a space complexity of O(n) because they both need extra space for temporary arrays during sorting.
3. Stability: Merge Sort is stable (i.e., it maintains the relative order of equal elements), whereas Bubble Sort is not.
4. Best Case Time Complexity: Both algorithms have a best-case time complexity of O(n). However, in practical scenarios, this best case is very unlikely due to the nature of the bubble sort algorithm.
5. Worst Case Time Complexity: Bubble Sort has a worst-case time complexity of O(n^2), while Merge Sort's worst-case time complexity is O(n log n). This makes Merge Sort much more efficient than Bubble Sort in all cases, making it suitable for large datasets.
6. Space Usage: Merge Sort requires additional space for merging the sorted halves, which uses O(n) extra space. On the other hand, Bubble Sort does not require any extra space during sorting and can be implemented without using extra memory (although this is not efficient).
7. Ease of Implementation: Bubble Sort is easier to understand and implement than Merge Sort due to its simple comparison-based algorithm. However, this comes at a cost of performance when dealing with large datasets. Merge Sort's divide-and-conquer approach might be harder to understand at first but offers better efficiency in the long run.
8. In-Place Sorting: Bubble Sort sorts an array in place (it does not need extra space), while Merge Sort does require additional space for merging the sorted halves, making it a less efficient option when sorting large datasets without extra space constraints. 

In conclusion, Merge Sort is a more efficient and stable algorithm than Bubble Sort, especially when dealing with large datasets. However, Bubble Sort might be preferred in cases where space constraints are an issue or when implementing algorithms for educational purposes due to its simplicity and ease of understanding.