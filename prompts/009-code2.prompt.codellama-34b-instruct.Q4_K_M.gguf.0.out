 

### Instruction:

Given a text file with lines that contain names sorted in lexicographical order. Discuss how to perform a binary search on the file directly, using at most O(log(n)) operations. Write a python function `def binary_search_file(file_path, target)` that returns the position of the target, or the insertion point (as in "bisect_left").


### Response:

We can use a seek pointer to jump around and read different parts of the file. We can first find out how big the file is by reading one byte at a time until we get an EOF character, but this is slow. Instead, we can do something like:
```python
seek(0, 2)
size = tell()
```
This will put the seek pointer at the end of the file and return the number of bytes in the file (the "tell" function returns the current position). Then, we can repeatedly divide the file into smaller pieces by jumping to positions that are halfway through the file:
```python
seek(size // 2)
midpoint = tell()
```
This will put the seek pointer at the midpoint of the file. Then, we can read a line from this position and decide which direction to go next. If the line is less than the target, then the target must be in the lower half of the file, so we can continue searching with `midpoint = (midpoint + size) // 2`. If the line is greater than the target, then the target must be in the upper half of the file, so we can search with `midpoint = (size + midpoint) // 2`. We can repeat this until we find the target or until we've searched the entire file.
