<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

<|im_start|>assistant
 Bubble Sort:
Bubble sort is an algorithm that compares adjacent elements in an array and swaps them if they are in the wrong order. This process is repeated until the entire array is sorted. The name "bubble sort" comes from the way smaller elements bubble up to their correct position throughout the iterations.

Here's a Python implementation of bubble sort:

```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        # Last i elements are already sorted, so we need not check them again
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
```

Merge Sort:
Merge sort is a divide and conquer algorithm that divides the input array into two halves, sorts them recursively, and then merges the sorted halves. The merge operation combines the sorted arrays by comparing their elements and putting them in the correct order.

Here's a Python implementation of merge sort:

```python
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])

    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])

    return result
```

Comparison of Bubble Sort and Merge Sort:
1. Time Complexity: Bubble sort has an average and worst-case time complexity of O(n^2), while merge sort has an average and worst-case time complexity of O(n log n). This makes merge sort more efficient than bubble sort for large data sets.

2. Space Complexity: The space complexity of bubble sort is O(1), as it only uses a constant amount of extra memory to store the temporary variable used in swapping elements. However, merge sort requires additional space to store the sorted halves and the merged result, leading to a space complexity of O(n).

3. Stability: Bubble sort is a stable sorting algorithm, meaning that it preserves the relative order of equal elements. Merge sort is also a stable sort if implemented correctly.

4. Usage: Due to its simplicity and ease of implementation, bubble sort can be useful for small data sets or when memory constraints are strict. However, for larger data sets, merge sort is more efficient and preferred for its lower time complexity.