user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

model
## Bubble Sort

```python
def bubble_sort(arr):
  n = len(arr)
  for i in range(n):
    swapped = False
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] = arr[j+1], arr[j]
        swapped = True
    if not swapped:
      break
  return arr

# Example usage
arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = bubble_sort(arr)
print("Sorted array:", sorted_arr)
```

## Merge Sort

```python
def merge_sort(arr):
  if len(arr) > 1:
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    merge_sort(left_half)
    merge_sort(right_half)

    i = j = k = 0
    while i < len(left_half) and j < len(right_half):
      if left_half[i] < right_half[j]:
        arr[k] = left_half[i]
        i += 1
      else:
        arr[k] = right_half[j]
        j += 1
      k += 1

    while i < len(left_half):
      arr[k] = left_half[i]
      i += 1
      k += 1

    while j < len(right_half):
      arr[k] = right_half[j]
      j += 1
      k += 1
  return arr

# Example usage
arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = merge_sort(arr)
print("Sorted array:", sorted_arr)
```

## Discussion and Comparison

**Bubble Sort:**

* **How it works:** Repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The largest element "bubbles" to the end in each pass.
* **Time Complexity:** O(n^2) in the worst and average case, O(n) in the best case (already sorted).
* **Space Complexity:** O(1) (in-place sorting).
* **Advantages:** Simple to understand and implement.
* **Disadvantages:** Very inefficient for large datasets.

**Merge Sort:**

* **How it works:** Divides the list into halves recursively until each sublist contains only one element. Then, it repeatedly merges the sorted sublists back together until the entire list is sorted.
* **Time Complexity:** O(n log n) in all cases (best, average, worst).
* **Space Complexity:** O(n) (requires additional space for merging).
* **Advantages:** Efficient for large datasets, stable sorting algorithm (preserves the relative order of equal elements).
* **Disadvantages:** More complex to implement than bubble sort.

**Comparison:**

* **Efficiency:** Merge sort is significantly more efficient than bubble sort for large datasets due to its O(n log n) time complexity compared to bubble sort's O(n^2).
* **Space Complexity:** Bubble sort is more space-efficient as it sorts in-place, while merge sort requires additional space for merging.
* **Simplicity:** Bubble sort is easier to understand and implement, while merge sort is more complex.

**Conclusion:**

For small datasets, bubble sort might be sufficient due to its simplicity. However, for larger datasets, merge sort is the preferred choice due to its superior efficiency.