To perform a binary search on a text file directly, we need to read the file in chunks to minimize the number of I/O operations. The idea is to use binary search to determine the range of lines that might contain the target, and then read those lines into memory to perform the final search.

Here's a Python function that implements this approach:

```python
def binary_search_file(file_path, target):
    def read_line(file, offset):
        file.seek(offset)
        line = file.readline()
        return line.strip()

    def find_range(file, low, high):
        while low < high:
            mid = (low + high) // 2
            line = read_line(file, mid)
            if line < target:
                low = mid + 1
            else:
                high = mid
        return low

    with open(file_path, 'r') as file:
        file.seek(0, 2)  # Move to the end of the file
        file_size = file.tell()
        file.seek(0)  # Move back to the beginning of the file

        if file_size == 0:
            return 0  # Empty file, return 0 as the insertion point

        low, high = 0, file_size

        # Find the range where the target might be
        low = find_range(file, low, high)

        # Read the lines in the range into memory
        file.seek(low)
        lines = []
        while True:
            line = file.readline()
            if not line:
                break
            lines.append(line.strip())

            # If the last line is greater than the target, we've found the insertion point
            if line.strip() > target:
                break

        # Perform binary search on the lines in memory
        low, high = 0, len(lines)
        while low < high:
            mid = (low + high) // 2
            if lines[mid] < target:
                low = mid + 1
            else:
                high = mid

        return low + find_range(file, 0, low)

# Example usage:
# binary_search_file('names.txt', 'target_name')
```

### Explanation:

1. **Reading a Line**: The `read_line` function reads a line from the file at a given offset. This is used to compare lines during the binary search.

2. **Finding the Range**: The `find_range` function narrows down the range of lines that might contain the target. It uses binary search to find the first line that is not less than the target.

3. **Reading Lines into Memory**: Once the range is found, the function reads the lines in that range into memory. This allows us to perform a binary search on the lines in memory, which is much faster than reading from the file.

4. **Binary Search on Memory**: The final binary search is performed on the lines in memory to find the exact position of the target or the insertion point.

5. **Combining Results**: The final position is calculated by combining the offset found in the file and the position found in the memory search.

### Complexity:
- The binary search on the file takes O(log(n)) operations, where n is the number of lines in the file.
- Reading lines into memory takes O(k) time, where k is the number of lines in the range.
- The final binary search on memory also takes O(log(k)) operations.

Overall, the function performs the binary search in O(log(n)) operations, as required. The actual time complexity will depend on the number of lines read into memory, but it is optimized to minimize I/O operations. 

### Note:
This function assumes that the file is not too large to fit into memory. If the file is extremely large, you might need to adjust the range of lines read into memory or use a different approach. 

### Example Usage:
To use this function, you would call it with the path to the file and the target name:

```python
position = binary_search_file('names.txt', 'target_name')
print(f"Target name '{target_name}' should be inserted at position {position}")
```

This will print the position where the target name should be inserted to maintain the lexicographical order. If the target name is already in the file, it will return the position of the target name. [end of text]


