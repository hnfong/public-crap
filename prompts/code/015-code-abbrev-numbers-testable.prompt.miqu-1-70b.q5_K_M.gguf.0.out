 Here's a Python function that meets your requirements:

```python
def abbrev_num(x: int) -> str:
    units = ['', 'K', 'M', 'B', 'T']
    unit_index = 0
    while x >= 1000 and unit_index < len(units) - 1:
        x /= 1000
        unit_index += 1
    if unit_index > 0:
        x = round(x, 1)
    if unit_index == 0 or x % 100 >= 50:
        return f"{int(x)}{units[unit_index]}"
    return f"{x:.1f}{units[unit_index]}"
```

This function uses a list of units to determine the order of magnitude and rounds the number to the nearest thousand if it's close to a multiple of 1000. If the number is less than 1000, it will be returned as is. If the number is a multiple of 1000, it will be rounded down to the nearest hundred and displayed with the appropriate unit. If the number is close to a multiple of 1000 but not exactly, it will be rounded to one decimal place and displayed with the appropriate unit.

Note that this function assumes the input is a positive integer. If you need to handle negative numbers or non-integer values, you may need to modify the function accordingly. [end of text]


