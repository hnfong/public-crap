<think>

</think>

```java
import java.util.*;
import java.util.regex.*;
import java.io.*;

public class Main {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        StringBuilder input = new StringBuilder();
        while (scanner.hasNextLine()) {
            input.append(scanner.nextLine()).append('\n');
        }

        double total = 0;
        double totalK = 0;
        double totalM = 0;
        double totalG = 0;

        Pattern pattern = Pattern.compile(
            "\\b\\d+(?:\\.\\d+)?(?:[,\s])?(?:k|K|m|M|g|G)?\\b"
        );
        Matcher matcher = pattern.matcher(input.toString());

        while (matcher.find()) {
            String match = matcher.group();
            double value = parseNumber(match);
            String suffix = match.toLowerCase().replaceAll("\\d+\\.?\\d*", "");

            double multiplier = 1;
            switch (suffix) {
                case "k":
                case "kb":
                    multiplier = 1024;
                    break;
                case "m":
                case "mb":
                    multiplier = 1024 * 1024;
                    break;
                case "g":
                case "gb":
                    multiplier = 1024 * 1024 * 1024;
                    break;
            }

            double converted = value * multiplier;
            total += converted;
            totalK += converted / 1024;
            totalM += converted / (1024 * 1024);
            totalG += converted / (1024 * 1024 * 1024);
        }

        System.out.printf("%.1f\n", total);
        System.out.printf("%.1f k\n", totalK);
        System.out.printf("%.1f M\n", totalM);
        System.out.printf("%.1f G\n", totalG);
    }

    private static double parseNumber(String s) {
        // Remove commas and optional suffix
        String numberStr = s.replaceAll("[^0-9.]", "");
        return Double.parseDouble(numberStr);
    }
}
``` [end of text]


