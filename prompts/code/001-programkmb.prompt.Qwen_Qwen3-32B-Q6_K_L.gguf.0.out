<think>

</think>

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class NumberSuffixSum {
    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            StringBuilder input = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                input.append(line).append(" ");
            }
            
            String inputStr = input.toString().trim();
            BigDecimal totalBytes = processInput(inputStr);
            
            System.out.println(totalBytes.stripTrailingZeros().toPlainString());
            System.out.println(totalBytes.divide(BigDecimal.valueOf(1024), 1, RoundingMode.HALF_UP) + " K");
            System.out.println(totalBytes.divide(BigDecimal.valueOf(1024 * 1024), 1, RoundingMode.HALF_UP) + " M");
            System.out.println(totalBytes.divide(BigDecimal.valueOf(1024 * 1024 * 1024), 1, RoundingMode.HALF_UP) + " G");
        } catch (IOException e) {
            System.err.println("Error reading input: " + e.getMessage());
        }
    }
    
    private static BigDecimal processInput(String input) {
        Pattern pattern = Pattern.compile("([\\d,.]+\\s*[kKmMgG]?)\\b");
        Matcher matcher = pattern.matcher(input);
        
        BigDecimal total = BigDecimal.ZERO;
        
        while (matcher.find()) {
            String match = matcher.group(1).trim();
            BigDecimal value = parseValue(match);
            total = total.add(value);
        }
        
        return total;
    }
    
    private static BigDecimal parseValue(String valueStr) {
        // Remove any commas and whitespace
        valueStr = valueStr.replaceAll("[,\\s]", "");
        
        char suffix = ' ';
        if (valueStr.length() > 0) {
            suffix = Character.toUpperCase(valueStr.charAt(valueStr.length() - 1));
            if (Character.isDigit(suffix)) {
                suffix = ' ';
            } else {
                valueStr = valueStr.substring(0, valueStr.length() - 1);
            }
        }
        
        BigDecimal value = new BigDecimal(valueStr);
        
        switch (suffix) {
            case 'G':
                return value.multiply(BigDecimal.valueOf(1024 * 1024 * 1024));
            case 'M':
                return value.multiply(BigDecimal.valueOf(1024 * 1024));
            case 'K':
                return value.multiply(BigDecimal.valueOf(1024));
            default:
                return value;
        }
    }
}
``` [end of text]


