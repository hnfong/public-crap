user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

model
## Python Implementations and Comparison: Bubble Sort vs. Merge Sort

**1. Bubble Sort**

Bubble sort repeatedly steps through the list, compares adjacent elements, and swaps them if they're in the wrong order. This "bubbling" process continues until no more swaps are needed, indicating a sorted list.

```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        if not swapped:
            break
    return arr

# Example usage:
test_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = bubble_sort(test_array)
print("Sorted array:", sorted_array)
```

**2. Merge Sort**

Merge sort follows a divide-and-conquer strategy:

* **Divide:** Recursively split the unsorted list into halves until reaching single-element sublists (inherently sorted).
* **Conquer:** Merge adjacent sorted sublists into larger sorted lists, comparing elements and placing them in order.
* **Combine:** Repeat merging until the entire list is sorted.

```python
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])

    return merge(left_half, right_half)

def merge(left, right):
    merged = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
    merged.extend(left[i:])
    merged.extend(right[j:])
    return merged

# Example usage:
test_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = merge_sort(test_array)
print("Sorted array:", sorted_array)
```

**Discussion and Comparison:**

| Feature        | Bubble Sort                 | Merge Sort                       |
|----------------|----------------------------|---------------------------------|
| **Time Complexity** | O(n^2) (worst, average)   | O(n log n) (all cases)          |
| **Space Complexity** | O(1) (in-place)           | O(n) (auxiliary space for merging) |
| **Stability**      | Stable (preserves order of equal elements) | Stable                           |
| **Best Case**     | O(n) (already sorted)      | O(n log n)                       |
| **Suitability**   | Small lists, nearly sorted data | Large lists, general purpose    |

**Bubble Sort:**

* **Pros:** Simple implementation, minimal extra space.
* **Cons:** Highly inefficient for larger lists due to quadratic time complexity. Performs many unnecessary comparisons even in nearly sorted data.

**Merge Sort:**

* **Pros:** Efficient for all cases (O(n log n)), consistently performs well, stable sorting.
* **Cons:** Requires additional space for merging sublists, slightly more complex implementation.

**Conclusion:**

* **Choose Bubble Sort** for educational purposes, extremely small lists, or nearly sorted data where simplicity outweighs performance.
* **Prefer Merge Sort** for general-purpose sorting, especially with larger datasets, as its logarithmic time complexity guarantees better scalability and efficiency. [end of text]


