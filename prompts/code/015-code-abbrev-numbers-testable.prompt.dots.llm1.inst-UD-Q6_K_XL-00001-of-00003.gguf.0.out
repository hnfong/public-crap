To solve this problem, we need to convert a given integer into a compact, human-readable string representation with a couple of significant digits and the appropriate order of magnitude (K for thousands, M for millions, etc.). The output string should be as short as possible, ideally 4 characters or fewer, which means we need to round the number to the nearest whole number if it would otherwise exceed the length limit.

### Approach
1. **Determine the Order of Magnitude**: The number will be divided into ranges based on powers of 1000 (K, M, B, etc.). For example:
   - Numbers between 1 and 999 remain as is.
   - Numbers between 1000 and 999,999 are in the thousands (K).
   - Numbers between 1,000,000 and 999,999,999 are in the millions (M).
   - And so on.

2. **Calculate the Value and Unit**: For each range, divide the number by the appropriate power of 1000 to get the value to display. For instance, 8180 becomes 8.18 when divided by 1000, which rounds to 8.2.

3. **Round the Value**: The value should be rounded to one decimal place if the resulting string would be 4 characters or fewer. Otherwise, it should be rounded to the nearest whole number. For example:
   - 8180 becomes 8.2K (4 characters).
   - 74581 becomes 75K (rounded to the nearest whole number because 74.6K would be 5 characters).

4. **Handle Edge Cases**: Numbers less than 1000 should be returned as strings without any unit. Numbers that are exactly at a boundary (like 1,000,000) should be handled correctly.

### Solution Code
```python
def abbrev_num(x):
    if x < 1000:
        return str(x)
    elif 1000 <= x < 1000000:
        value = x / 1000.0
        # Determine if rounding to one decimal or nearest whole keeps it <=4 chars
        rounded = round(value, 1)
        rounded_str = "{:.1f}".format(rounded)
        if len(rounded_str) + 1 <= 4:
            return f"{rounded_str}K"
        else:
            rounded_whole = round(value)
            return f"{rounded_whole}K"
    elif 1000000 <= x < 1000000000:
        value = x / 1000000.0
        rounded = round(value, 1)
        rounded_str = "{:.1f}".format(rounded)
        if len(rounded_str) + 1 <= 4:
            return f"{rounded_str}M"
        else:
            rounded_whole = round(value)
            return f"{rounded_whole}M"
    elif 1000000000 <= x < 1000000000000:
        value = x / 1000000000.0
        rounded = round(value, 1)
        rounded_str = "{:.1f}".format(rounded)
        if len(rounded_str) + 1 <= 4:
            return f"{rounded_str}B"
        else:
            rounded_whole = round(value)
            return f"{rounded_whole}B"
    else:
        value = x / 1000000000000.0
        rounded = round(value, 1)
        rounded_str = "{:.1f}".format(rounded)
        if len(rounded_str) + 1 <= 4:
            return f"{rounded_str}T"
        else:
            rounded_whole = round(value)
            return f"{rounded_whole}T"
```

### Explanation
1. **Initial Check**: If the number is less than 1000, it is returned as a string without any unit.
2. **Thousands (K) Range**: For numbers between 1000 and 999,999, the value is divided by 1000. The result is rounded to one decimal place. If the resulting string (including the unit 'K') is 4 characters or fewer, it is used; otherwise, the value is rounded to the nearest whole number.
3. **Millions (M) Range**: Similar to the thousands range but divided by 1,000,000.
4. **Billions (B) and Trillions (T) Ranges**: The same logic applies, adjusting the divisor to 1,000,000,000 and 1,000,000,000,000 respectively.
5. **Rounding Logic**: The rounding ensures the output string is concise, adhering to the 4-character limit by either showing one decimal place or rounding to the nearest whole number based on the length of the resulting string.

This approach efficiently handles the conversion of large numbers into compact, readable strings while adhering to the specified constraints. [end of text]


