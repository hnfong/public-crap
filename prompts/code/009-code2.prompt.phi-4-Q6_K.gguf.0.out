To perform a binary search on a text file containing names sorted in lexicographical order, we need to efficiently read and search through the file without loading the entire file into memory. This is crucial for handling large files. The goal is to achieve a time complexity of \(O(\log(n))\) for the search operation, where \(n\) is the number of lines in the file.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Determine File Size**: First, we need to determine the total number of lines in the file. This can be done by seeking to the end of the file and counting the newline characters.

2. **Binary Search Logic**: Implement the binary search algorithm. Instead of loading the entire file, we will read only the necessary lines to perform the search. This involves:
   - Calculating the middle position.
   - Seeking to the middle position in the file.
   - Reading lines from the middle position to find the exact line number.

3. **Reading Lines Efficiently**: When seeking to a position in the file, we need to handle partial lines. This means reading until we find a newline character to ensure we start reading from the beginning of a line.

4. **Comparison and Adjustment**: Compare the target with the line at the middle position. Adjust the search range based on the comparison result.

5. **Return Result**: If the target is found, return its position. If not, return the insertion point where the target would fit in the sorted order.

Here's the implementation of the `binary_search_file` function:

```python
def binary_search_file(file_path, target):
    def find_line_start(file, position):
        """Move to the start of the line containing the given byte position."""
        file.seek(position)
        while file.tell() > 0 and file.read(1) != '\n':
            file.seek(file.tell() - 2)
        return file.tell()

    def read_line(file):
        """Read a single line from the current file position."""
        return file.readline().strip()

    with open(file_path, 'r') as file:
        # Determine the number of lines in the file
        file.seek(0, 2)  # Move to the end of the file
        file_size = file.tell()
        
        # Binary search initialization
        low, high = 0, file_size
        
        while low < high:
            mid = (low + high) // 2
            file.seek(find_line_start(file, mid))
            line = read_line(file)
            
            if line == target:
                # Find the exact line number
                line_number = file.tell() - len(line) - 1
                while line_number >= 0 and read_line(file) == target:
                    line_number -= len(read_line(file)) + 1
                return line_number + 1
            
            if line < target:
                low = file.tell()
            else:
                high = mid
        
        # If not found, return the insertion point
        file.seek(find_line_start(file, low))
        return file.tell() - len(read_line(file)) - 1 + 1

# Example usage:
# position = binary_search_file('names.txt', 'Alice')
# print(position)
```

### Explanation:

- **find_line_start**: This helper function ensures that we start reading from the beginning of a line by moving backwards from a given byte position until a newline character is found.

- **read_line**: Reads a single line from the current file position and strips any trailing newline characters.

- **Binary Search**: The main loop performs the binary search by adjusting the `low` and `high` pointers based on comparisons with the target.

- **Insertion Point**: If the target is not found, the function returns the position where the target would be inserted to maintain order.

This approach ensures that we only read the necessary parts of the file, keeping the operation efficient even for large files. [end of text]


