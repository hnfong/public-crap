Performing a binary search directly on a text file is a bit more complex than doing it on an in-memory list because files are not random access by lines. However, we can achieve this by using a combination of file seeking and binary search techniques. The key idea is to use the file's byte offset to jump to the middle of the file, read a line, and then adjust the search range based on the comparison with the target.

Here's a step-by-step approach to implement this:

1. **Determine the file size**: This helps in calculating the middle point.
2. **Seek to the middle**: Use the `seek` method to jump to the middle of the file.
3. **Read a line**: Read the line at the current position.
4. **Adjust the search range**: Based on the comparison of the read line with the target, adjust the search range.
5. **Repeat**: Continue the process until the target is found or the search range is exhausted.

Here's the Python function `binary_search_file` that implements this approach:

```python
def binary_search_file(file_path, target):
    def read_line_at(file, pos):
        # Seek to the position and read the line
        file.seek(pos)
        # Move back to the start of the line
        while pos > 0 and file.read(1) != '\n':
            pos -= 1
            file.seek(pos)
        return file.readline().strip(), pos

    with open(file_path, 'r') as file:
        low = 0
        file.seek(0, 2)  # Move to the end of the file
        high = file.tell()  # Get the file size in bytes

        while low < high:
            mid = (low + high) // 2
            line, start_pos = read_line_at(file, mid)
            if line == target:
                return start_pos
            elif line < target:
                low = start_pos + len(line) + 1  # Move past the current line
            else:
                high = start_pos

        # If the target is not found, return the insertion point
        return low

# Example usage:
# position = binary_search_file('names.txt', 'John')
# print(position)
```

### Explanation:

1. **read_line_at function**: This helper function seeks to a given position in the file, moves back to the start of the line, and reads the line. It returns the line and the starting position of the line.
2. **Binary Search**:
   - **Initialization**: Set `low` to 0 and `high` to the file size.
   - **Loop**: While `low` is less than `high`, calculate the middle position `mid`.
   - **Read Line**: Use `read_line_at` to read the line at `mid` and get its starting position.
   - **Comparison**:
     - If the line matches the target, return the starting position.
     - If the line is less than the target, adjust `low` to move past the current line.
     - If the line is greater than the target, adjust `high` to the current starting position.
3. **Insertion Point**: If the target is not found, return `low` as the insertion point.

This approach ensures that the search is performed in O(log(n)) operations, where n is the number of lines in the file. The file is accessed in a binary search manner, making it efficient even for large files. [end of text]


