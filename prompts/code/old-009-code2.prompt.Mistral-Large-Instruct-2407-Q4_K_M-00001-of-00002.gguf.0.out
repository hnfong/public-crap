 To perform a binary search on a file directly, you need to be able to access specific lines in the file without reading the entire file into memory. This can be achieved by using the `seek` and `readline` methods in Python, which allow you to move to a specific position in the file and read a line from that position.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Determine the File Size**: Use `os.path.getsize` to get the size of the file.
2. **Binary Search Logic**: Implement the binary search logic to narrow down the search range.
3. **Seek and Read**: Use `seek` to move to a specific position in the file and `readline` to read the line at that position.
4. **Handle Edge Cases**: Ensure that the function handles cases where the target is not found and returns the insertion point.

Here's the implementation:

```python
import os

def binary_search_file(file_path, target):
    file_size = os.path.getsize(file_path)
    low, high = 0, file_size

    with open(file_path, 'r') as file:
        while low < high:
            mid = (low + high) // 2
            file.seek(mid)

            # Read the line starting from the middle position
            file.readline()  # Skip the partial line if any
            line = file.readline()

            if not line:
                break

            name = line.strip()

            if name == target:
                # Move to the start of the line
                file.seek(mid)
                file.readline()  # Skip the partial line if any
                return mid
            elif name < target:
                low = mid + 1
            else:
                high = mid

        # If the target is not found, return the insertion point
        file.seek(low)
        file.readline()  # Skip the partial line if any
        line = file.readline()

        if not line or line.strip() > target:
            return low
        else:
            return high

# Example usage
file_path = 'names.txt'
target = 'John'
position = binary_search_file(file_path, target)
print(f"The position of '{target}' is: {position}")
```

### Explanation:

1. **File Size**: `os.path.getsize(file_path)` gives the size of the file in bytes.
2. **Binary Search**: The `while` loop performs the binary search by adjusting the `low` and `high` pointers.
3. **Seek and Read**: `file.seek(mid)` moves the file pointer to the middle position. `file.readline()` reads the line starting from that position. An additional `file.readline()` is used to skip any partial line that might be read due to seeking.
4. **Comparison**: The `name` is compared with the `target`. If they match, the position is returned. If `name` is less than `target`, the search continues in the upper half; otherwise, it continues in the lower half.
5. **Insertion Point**: If the target is not found, the function returns the position where the target should be inserted to maintain the sorted order.

This approach ensures that the binary search is performed directly on the file with at most O(log(n)) operations. [end of text]


