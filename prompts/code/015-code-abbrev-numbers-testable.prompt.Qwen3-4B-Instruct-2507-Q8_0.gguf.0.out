```python
def abbrev_num(x):
    if x == 0:
        return "0"
    
    # Handle negative numbers
    negative = x < 0
    x = abs(x)
    
    # Determine the appropriate unit (K, M, B, T, etc.)
    if x < 1000:
        return str(x)
    elif x < 1000000:
        # K (thousands)
        return f"{x / 1000:.1f}K"
    elif x < 1000000000:
        # M (millions)
        return f"{x / 1000000:.1f}M"
    elif x < 1000000000000:
        # B (billions)
        return f"{x / 1000000000:.1f}B"
    else:
        # T (trillions)
        return f"{x / 1000000000000:.1f}T"
    
    # Round to nearest significant digit and ensure output is <= 4 characters
    # If the formatted string exceeds 4 characters, we need to adjust
    result = abbrev_num(x)
    if len(result) > 4:
        # If we have a decimal, round to nearest integer and remove decimal
        if '.' in result:
            result = str(round(float(result.split('.')[0])))
        # If we have a single digit, just return it
        if len(result) > 4:
            # For cases like 9.4M, we need to round to nearest 10K, 100K, etc.
            # But since we're already using 1 significant digit, we just need to ensure it's <= 4 chars
            # For example, 9.4M -> 9M (3 chars), 74.5K -> 75K (3 chars)
            # So we need to round the value to the nearest unit
            if 'K' in result:
                val = float(result.split('K')[0])
                rounded_val = round(val * 10) / 10
                return f"{int(rounded_val)}K"
            elif 'M' in result:
                val = float(result.split('M')[0])
                rounded_val = round(val * 10) / 10
                return f"{int(rounded_val)}M"
            elif 'B' in result:
                val = float(result.split('B')[0])
                rounded_val = round(val * 10) / 10
                return f"{int(rounded_val)}B"
            elif 'T' in result:
                val = float(result.split('T')[0])
                rounded_val = round(val * 10) / 10
                return f"{int(rounded_val)}T"
    
    # Final check: if the result is still too long, just return the rounded integer
    if len(result) > 4:
        # Extract the number part and round to nearest integer
        if 'K' in result:
            val = float(result.split('K')[0])
            return f"{int(round(val))}K"
        elif 'M' in result:
            val = float(result.split('M')[0])
            return f"{int(round(val))}M"
        elif 'B' in result:
            val = float(result.split('B')[0])
            return f"{int(round(val))}B"
        elif 'T' in result:
            val = float(result.split('T')[0])
            return f"{int(round(val))}T"
    
    return result if len(result) <= 4 else f"{int(round(float(result.split('.')[0])))}{result.split('.')[1] if '.' in result else ''}"
``` [end of text]


