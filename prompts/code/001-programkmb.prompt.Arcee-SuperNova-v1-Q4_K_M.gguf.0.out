```java
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class NumberParser {
    private static final Pattern NUMBER_PATTERN = Pattern.compile("\\d{1,3}(?:,\\d{3})*(?:\\.(\\d+))?(?:[kKmMgG]?)");
    private static final double[] SUFFIXES = {1, 1024, 1024 * 1024, 1024 * 1024 * 1024};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.useDelimiter("\\Z"); // Read until EOF
        String input = scanner.next();
        scanner.close();

        double total = 0;
        Matcher matcher = NUMBER_PATTERN.matcher(input);
        while (matcher.find()) {
            String number = matcher.group();
            int suffixIndex = -1;
            for (int i = 0; i < number.length(); i++) {
                char c = number.charAt(i);
                if (Character.isLetter(c)) {
                    suffixIndex = "kKmMgG".indexOf(c) / 2;
                    break;
                }
            }
            double value = Double.parseDouble(number.replaceAll(",", "").replaceAll("[kKmMgG]", ""));
            if (suffixIndex != -1) {
                value *= SUFFIXES[suffixIndex];
            }
            total += value;
        }

        System.out.printf("%.1f%n", total);
        System.out.printf("%.1f k%n", total / SUFFIXES[1]);
        System.out.printf("%.1f M%n", total / SUFFIXES[2]);
        System.out.printf("%.1f G%n", total / SUFFIXES[3]);
    }
}
``` [end of text]


