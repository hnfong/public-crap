<think>
We are going to perform a binary search on a text file where each line is a name in lexicographical order.
 Since the file is too large to load into memory, we cannot read all lines at once.
 We will use file seeking and reading in chunks (by lines) to achieve O(log n) disk accesses.

 Steps:
 1. Open the file in binary mode to allow seeking.
 2. We note that the file is sorted lexicographically (by string comparison of each line).
 3. We want to find the position (line number) where the target string would be inserted (like bisect_left).
 4. We'll use two pointers: low and high, which represent the byte offsets for the start of the search range and the end (exclusive) respectively.
    However, note that we cannot easily use byte offsets for line boundaries arbitrarily. Instead, we can use the following approach:

    We can let:
        low = 0 (start of file)
        high = the size of the file in bytes (i.e., the offset of the end of the file)

 5. We will read the file at the midpoint. But the midpoint might be in the middle of a line. So we have to adjust to the beginning of a line.

    Steps for each iteration:
        a. mid_byte = (low + high) // 2
        b. Seek to mid_byte.
        c. Read a chunk of data (or a line) from that point. But note: we might be in the middle of a line.
        d. To get a full line, we can read from mid_byte until the next newline to get the rest of the line? 
           But then we want the next complete line? Actually, we can do:

           - If we are not at the beginning of the file (mid_byte != 0), then we read a line from the current position and then discard it because it might be partial.
           - Then the next line is the first complete line in the current segment.

        However, a common method is:
          - Seek to mid_byte, then read a line (which might be partial). Then the next line is the one we consider as the start of the segment.
          - But we can also adjust mid_byte to the beginning of the next line? 

    Alternatively, we can do:

        low_ptr: the byte offset of the start of the first line in the current segment.
        high_ptr: the byte offset of the end of the file (or the byte after the last line).

        Then:
          mid_ptr = (low_ptr + high_ptr) // 2
          Seek to mid_ptr, then read a line (which might be incomplete). Then we skip that partial line and read the next full line? 
          But note: if we are at the beginning of a line, then we are safe.

        Actually, we can do:
          - If mid_ptr is not 0, then we read a line from mid_ptr and discard it (because it's partial) and then the next byte is the start of a new line.
          - But then we have to record the start of that new line as the beginning of the line we are going to compare.

        However, we can also adjust the mid_ptr to the beginning of the next line and then read a line. Then we compare that line with the target.

        But note: we might have an empty segment? 

    Another approach: 
        We can let the "mid" line be the first line that starts at or after the mid_byte. Then we compare that line.

    Steps for mid:
        - Seek to mid_byte.
        - If mid_byte is not 0, then we have to skip the current partial line. We read a line and then the position after that is the start of the next line.
        - Then we read a line from that position (the next line) and that is our mid line.

        But what if mid_byte is 0? Then we are at the beginning and we can read the first line.

        However, what if the mid_byte lands exactly at the beginning of a line? Then we don't need to skip. We can check: if the byte at mid_byte is the beginning of a line? 
        But we don't know. So we can do:

          if mid_byte != 0:
            # Read a line from mid_byte and discard it. Then the next line is the one we want.
          else:
            we are at the beginning, so we read the first line.

        But note: if we are at the beginning of a line, then reading a line from mid_byte will read the entire line. However, if we are in the middle, we get a partial line.

        Actually, we can do without condition: 
          - Seek to mid_byte and then read a line. This will read from mid_byte to the end of the line. Then we note the position after that (tell()) as the start of the next line.
          - Then we read the next line? But wait, that next line is the first complete line in the segment starting at mid_byte.

        However, we want to compare a line that is in the segment. But note: the line we read (the partial one) is not complete, so we skip it and use the next one.

        But what if mid_byte is at the beginning of a line? Then the line we read is complete. Then we don't want to skip it? 

        How to handle: 
          We can note that if mid_byte is at the beginning of a line, then the next character is not a newline? Actually, we don't know. 

        Instead, we can do:

          We want to get the first complete line at or after mid_byte. 

          Steps:
            file.seek(mid_byte)
            file.readline()   # This reads from mid_byte to the end of the line. 
            Then the current position (file.tell()) is the start of the next line. We record that as the start of the line we are going to read.

          Then we read the next line. But note: if mid_byte was at the beginning of a line, then we just read that line and then the next line is the following one. 
          That would skip the line at mid_byte. 

        Correction: 
          We want to get the line that starts at the first newline after mid_byte? Actually, we want the first complete line that starts at or after mid_byte. 

          But note: if mid_byte is in the middle of a line, we don't want that line because it's incomplete. So we skip to the next line.

          If mid_byte is at the beginning of a line, then we want that line. But our method above reads the line at mid_byte (if it's the beginning) and then moves to the next line? 

        Actually, we can do:

          We want to set the pointer to the beginning of the next line after mid_byte, unless mid_byte is 0 (then we are at the beginning). 

          Alternatively, we can do:

            if mid_byte is 0, then we are at the beginning, so we read the first line.

            else:
              We seek to mid_byte - 1 and then read a character? That might be complex.

        A simpler method: 
          We can always read from mid_byte to the end of the current line (which might be partial) and then the next line is the one we want. 

          But then we are effectively ignoring the line that starts before mid_byte? 

        However, note: the file is sorted. The line that starts before mid_byte might be the one we are interested in? 

        Actually, we are doing binary search on the entire file. We are going to compare the target with a line in the file. We must compare with a complete line.

        We can do:

          Let start = low_ptr, end = high_ptr.

          mid_byte = (start + end) // 2

          Seek to mid_byte.

          If mid_byte is not 0, then we skip the current line (because it might be partial) by reading until the next newline. Then we record the position of the next line as 'mid_line_start'.

          Then we read a line from 'mid_line_start'. This is the line we compare.

          But note: what if mid_byte is 0? Then we don't skip? Actually, if mid_byte is 0, we are at the beginning. We can read the first line.

          However, we can handle uniformly:

            file.seek(mid_byte)
            # If we are not at the beginning and the mid_byte is not at the start of a line, then we skip the partial line.
            # But we can always read a line and then note the position after that as the start of the next line? 
            # Then we use the next line.

          But wait: if we are at the beginning of a line, then reading a line will read the entire line. Then we can use that line? 

          Actually, we can do:

            file.seek(mid_byte)
            # We read a line. This line might be partial if mid_byte is not at the beginning of a line. We don't care about that line.
            # Then we record the current position (after reading that line) as the start of the next line.

          Then we read the next line? 

          But what if we are at the end? Then we might not have a next line.

        Alternatively, we can note that the line we are going to use for comparison is the first complete line that starts at or after mid_byte. 

        Steps:

          file.seek(mid_byte)
          # Read a line (which might be partial) and discard it. The position after that is the start of the next complete line.
          current_position = file.tell()
          # But if we are at the end of the file, then file.tell() might be the same as mid_byte? Actually, if we are at the end, readline() returns empty string.

          Then we read the next line at current_position. But if current_position is at the end, then we have no line? 

        Actually, we can do:

          file.seek(mid_byte)
          # We read a line and discard it. Then we record the next position as the start of the next line.
          next_line_start = file.tell()
          # Now, if next_line_start is at the end of the file (>= high_ptr?), then we don't have a line. Then we consider that we are at the end.

          Then we read a line from next_line_start. If that line is non-empty, we use it. Otherwise, we treat it as the end.

        But note: if the file has a trailing newline, then the last line might be empty? Actually, the problem says the file contains names. We assume non-empty lines? 

        However, to be safe, we should consider that the file might have empty lines? But the lexicographical order of empty lines? 

        We are going to assume that the file has one name per line and no empty lines? Or we have to handle empty lines? 

        The problem does not specify. Let's assume that the file can have empty lines? But the lexicographical order: the empty string is the smallest.

        We'll follow the specification: we are to return the insertion point (like bisect_left). So we have to compare the target with the lines.

        Steps for the binary search:

          low = 0 (byte offset of the beginning of the file)
          high = file_size (in bytes)

          while low < high:
            mid_byte = (low + high) // 2
            file.seek(mid_byte)

            # Skip the current partial line if any
            # If we are at the beginning of the file (mid_byte==0) then we are at a line start. Otherwise, we might be in the middle.
            # We read a line and discard it. Then record the start of the next line.
            file.readline()   # This moves the pointer to the next line.
            next_line_start = file.tell()

            # Now, if next_line_start is beyond the end of the file? Actually, we have high as the file size, so if next_line_start >= high, then we are at the end.
            if next_line_start >= high:
                # Then we cannot read a line? Then we set the line to None? Or we break? 
                # Actually, we can set the current line to None and then adjust the pointers accordingly? 
                # But note: we are at the end of the segment. Then we can set the line to a value that is greater than the target? 
                # However, we don't know the last line? 

                # Instead, we can try to read the last line? But that would complicate.

                # Alternatively, we can adjust: if we are at the end, then we set the line to a value that is greater than any string? 
                # But we don't know the last line. 

                # Actually, we can do: if we are at the end, then we set the current line to None and then we break the loop? 
                # But we are in the loop. Instead, we can set the current line to a value that is greater than the target? 

                # How about: we break the loop and then set the line to None? Then we have to adjust the binary search.

                # Alternatively, we can move the high pointer to mid_byte? 

                # Actually, we can do: 
                #   We note that we are at the end of the segment, so we set the current line to a sentinel value that is greater than the target? 
                #   But we don't know the target? 

                # Instead, we can avoid this by not reading beyond the file. We can check if next_line_start is beyond the file? 

                # But note: we set high to the file size. So if next_line_start >= file_size, then we are at the end. Then we can set the current line to None and then break? 

                # Actually, we can break the loop and then set the current line to None? 

                # But we are in the middle of the loop. We can set the current line to a value that is greater than any string? 

                # We can set current_line = None and then in the comparison, if current_line is None, we treat it as greater than the target? 

                # But then we have to adjust the pointers: we set high = mid_byte? 

                # Actually, we can do:

                #   if next_line_start >= high: 
                #       # Then we are at the end of the segment, so we set the current line to a value that is greater than the target? 
                #       # But we don't know the target? 
                #       # Instead, we can set the current line to a very large string? 
                #       current_line = None   # and then we break? 

                # This is messy.

            # Instead, we can avoid this by ensuring that we don't read beyond the file. We can check the file size.

            # Let's change: we break the loop when low and high are such that the segment has no complete line? 

            # Alternatively, we can read the line at next_line_start. If we get an empty string, then we are at the end.

            line = file.readline().rstrip('\n')   # We strip the newline for comparison? But note: the target might not have a newline.

            # But note: the target is given as a string without newline? 

            # We assume the target is a string without newline.

            # If we read an empty string, that could be an empty line? Or the end of the file? 

            # Actually, if we are at the end of the file, readline() returns an empty string.

            # So if line == '', then we are at the end. Then we can treat this as a line that is greater than the target? 

            # But what if the target is the empty string? Then we have to consider that the empty string is the smallest.

            # Actually, we are going to compare the target with the line we read.

            # If we read an empty string and the target is non-empty, then the empty string is less than the target? 
            # But wait: lexicographical order: '' < 'a'. 

            # So we can compare normally.

            # However, if we are at the end of the file, then we have no line? Then we break? 

            # Actually, if we are at the end of the file, then we have read an empty string. Then we can compare: 
            #   if target == '' and we read '', then we found it? 
            #   but if we are at the end, then the line we read is empty because of EOF, not because there's an empty line? 

            # How to distinguish? 
            #   We can check: if the file has a newline at the end? 

            # But the problem does not specify.

            # We can note: if we are at the end of the file and we read an empty string, then we are at the end. Then we can consider that we have no line? 

            # Actually, we can use the position: if next_line_start is at the end of the file, then the line we read is empty because of EOF. 
            # But if the file ends with a newline, then the last line is empty? 

            # We have to be consistent. We assume that each line is a name and the file may or may not have a trailing newline.

            # We'll do: 
            #   If we read an empty string and the position after reading is still at the same place (meaning we didn't advance) then it's EOF. 
            #   But actually, readline() returns '' when we are at EOF.

            # So if we get an empty string, then we are at the end. Then we can treat this as a line that is greater than the target? 
            # But wait: what if the last line is empty? Then we should consider that empty line.

            # How to know if the last line is empty? 
            #   We can check the file: if the file ends with a newline, then the last line is empty? 
            #   But we don't know the file structure.

            # We'll assume that the file does not contain empty lines? The problem says "names", so we assume non-empty? 

            # But the problem does not specify. To be safe, we have to consider that the file might have empty lines.

            # We can do: 
            #   We read the line. If the line is empty and we are not at the end of the file? But we don't know the end? 

            # Actually, we can check: after reading, if the file.tell() is at the end? 

            #   current_pos = file.tell()
            #   if current_pos == file_size: then we are at the end. Then the empty string we read might be because of EOF? 
            #   But wait: if the last line is empty and the file has a newline at the end, then we read the empty line and then the next read would be at the end? 

            #   Actually, if the file ends with a newline, then the last line is empty and we read it. Then the next read (if we do) would be at the end and return empty.

            #   But we are reading only one line. So we read the empty line? 

            #   So if we read an empty string and then the position is at the end, then it could be that we read the last empty line? 

            #   However, if the file does not end with a newline, then the last line is not empty? 

            # This is getting too complicated.

        Given the complexity, we can change the approach: 

        We can use the method that uses the number of lines? But we don't know the number of lines. 

        Alternatively, we can use the following method:

          We maintain two pointers: low and high, but in terms of line numbers? But we don't know the line numbers because we don't know the number of lines.

        We can do:

          low = 0
          high = file_size

          while low < high:
            mid_byte = (low+high)//2
            file.seek(mid_byte)

            # Skip to the next newline if not at the beginning and not at a newline boundary.
            if mid_byte != 0:
                # We are not at the beginning, so we might be in the middle of a line.
                # We read until we hit a newline so that we are at the beginning of the next line.
                # But note: we might be at the beginning of a line? We can check: if the byte at mid_byte is '\n', then we are at the beginning? 
                # But we don't know. So we read the current line and discard it, then the next line is the one we want.
                file.readline()   # This will take us to the next line.

            # Now we are at the beginning of a line (or at the end of the file).
            start_of_line = file.tell()
            line = file.readline().rstrip('\n')   # read the next full line.

            # If we read an empty string and we are at the end, then we break? 

            # But note: if we are at the end of the file, then line is empty. Then we treat it as a line that is greater than the target? 

            # Compare line and target:
            if line == target:
                # We found the target? But we want the insertion point? 
                # Actually, we want the first occurrence? 
                # We are doing bisect_left, so we want the first occurrence. 
                # But note: we might have duplicates? 
                # We have to continue to the left? 
                # But we are doing binary search: we can set high = mid_byte? 
                # Actually, we want the first occurrence. So we set high = start_of_line? 
                # But note: we are in the middle of the file. 

                # We can break and then return the start_of_line? But we have to check the left.

                # Actually, we are not done. We have to continue to the left to find the first occurrence.

                # We can set high = start_of_line? 

                # But note: the line we read is at start_of_line. We found one occurrence. We want to see if there is a duplicate to the left.

                # So we set high = start_of_line? 

                # But then we break the loop? 

                # We can set high = start_of_line and then continue the loop? 

                # Actually, we can remember this position and then continue to the left? 

                # We can set:
                #   found_position = start_of_line
                #   and then set high = mid_byte? 

                # But note: we are using byte offsets. We can set high = start_of_line? 

                # However, we are not sure if there is a duplicate to the left. So we set high = mid_byte? 

                # But then we might miss the line we just found? 

                # Alternatively, we can do as in bisect_left: even if we find the target, we continue to the left until we find the first occurrence.

                # So we set high = mid_byte? 

                # But note: the line we read might be the first occurrence? 

                # We can set high = start_of_line? 

                # Actually, we can set high = start_of_line and then continue the loop? 

                # But then the next iteration might not include the line we just found? 

                # We can set high = start_of_line, and then in the next iteration, we will search in [low, start_of_line). 

                # But the line we found is at start_of_line, so it's not in [low, start_of_line). Then we will eventually return start_of_line? 

                # But what if there is a duplicate to the left? 

                # We have to search in the left part for duplicates. 

                # So we set high = mid_byte? 

                # But then we are not including the line we found? 

                # We can set high = mid_byte, and then we will eventually find the first occurrence. 

                # But note: the line we found is at a position >= mid_byte. If we set high = mid_byte, then we are excluding it. 

                # We want to include the possibility of duplicates to the left. 

                # We can set high = start_of_line? 

                # Then the next iteration will search in [low, start_of_line). And we know that the line at start_of_line is the target. 

                # Then we will eventually return the first occurrence in the left part? 

                # But if there is no duplicate in the left part, then the first occurrence is at start_of_line. 

                # So we can remember the current start_of_line as a candidate, and then set high = mid_byte to search for a duplicate to the left. 

                # We can do:

                #   candidate = start_of_line
                #   high = mid_byte

                # But then we might lose the candidate if we find nothing in the left? 

                # Alternatively, we can break the loop and then do a linear search to the left? But that would be O(n).

            elif line < target:
                low = file.tell()   # because we want to search the next lines. The current line is at start_of_line, and we read it, so the next line starts at file.tell() after reading.
            else: # line > target
                high = start_of_line   # because the target should be inserted before this line, so we search in [low, start_of_line)

          But note: the above has a problem: when we set low = file.tell(), we are setting it to the position after reading the line. That is the start of the next line. 
          And when we set high = start_of_line, we are setting it to the start of the current line.

          However, we have to be careful: the line we read is at start_of_line, and after reading, the file pointer is at start_of_line + len(line) + len('\n')? 

          Actually, file.tell() after readline() returns the position after the newline.

          So:

            start_of_line = position of the beginning of the current line.
            After reading, the pointer is at the beginning of the next line.

          Then:

            if line < target: we set low = current pointer (which is the beginning of the next line).
            if line >= target: we set high = start_of_line.

          But note: if we find the target, we want to continue to the left? 

          We can do:

            if line < target:
                low = file.tell()
            else:
                high = start_of_line

          And if we find the target, we treat it as greater than or equal? But we want the first occurrence. 

          Actually, we can do:

            if target <= line:
                high = start_of_line
            else:
                low = file.tell()

          Then if we find the target, we set high = start_of_line, and then in the next iterations we will search for a duplicate to the left.

          This will eventually make low and high converge to the first occurrence.

          Why? 
            We are setting high = start_of_line when the line is >= target. 
            Then we are searching in the left part for the first occurrence.

          Example: 
            We have: ['a', 'b', 'b', 'c'] and target='b'

            We want to return the index of the first 'b'.

          Steps:

            Initially: low=0, high=file_size.

            mid_byte = ... suppose we land in the middle.

            We read a line. Suppose we read the first 'b'. Then we set high = start_of_line of that 'b'. 

            Then we search in [0, start_of_line). 

            Then we might land on 'a'. Then we set low = after 'a'. 

            Then we search in [after 'a', start_of_line of the first 'b'). 

            Then we might land in the middle of the first 'b'? 

            But note: we are using byte offsets. The start_of_line of the first 'b' is the beginning of the line that has 'b'. 

            Then we set low = after 'a', and then mid_byte = (after 'a' + start_of_line of 'b') // 2.

            Then we skip to the next line? But there is no line between 'a' and the first 'b'? 

            Then we read the next line, which is the first 'b'. Then we set high = start_of_line of the first 'b'. 

            Then the loop continues until low = high? 

          We break when low >= high. Then we return low? 

          But note: we are returning a byte offset? But the problem asks for the position (which line number?) or the byte offset? 

          The problem says: "the position of the target, or the insertion point". 

          But it doesn't specify if it's the line number or the byte offset. 

          However, the example of bisect_left returns the index (line number). 

          But we are working with byte offsets. 

          We can return the byte offset? But the problem might expect the line number. 

          Alternatively, we can count the line number? But that would require scanning from the beginning? 

          But the problem says O(log n) operations. 

          We cannot count the line number without scanning.

          The problem says: "return the position of the target, or the insertion point (as in 'bisect_left')"

          In bisect_left, it returns the index (the line number starting from 0). 

          How to return the line number? 

          We can modify the algorithm to count the lines? 

          But note: we are doing binary search by byte offsets. We don't know the line number.

          We have two options:

            Option 1: return the byte offset of the beginning of the line where the target is found or should be inserted.

            Option 2: return the line number.

          The problem does not specify. But the function signature is: `def binary_search_file(file_path, target)`

          And it says "position", which in the context of bisect_left is the index (line number). 

          How to get the line number? 

          We can count the number of newlines from the beginning of the file to the byte offset we found? 

          But that would be O(n). 

          Alternatively, we can modify the algorithm to count the lines in the segments? 

          We can maintain the line number? 

          But we don't know the total number of lines. 

          We can do:

            We start at the beginning and count the lines until the found byte offset? 

          But that is O(n). 

          The problem says at most O(log n) operations. 

          How to count the lines in O(log n)? 

          We can't without additional information.

          But note: the problem says "using at most O(log n) operations". The operations are disk accesses. 

          Counting the lines from the beginning would be one disk access? But it would read the entire file up to that point? 

          That is O(n) bytes read, but the problem says operations (disk accesses) are O(log n). 

          However, reading from the beginning to the found position is one disk access? 

          But the time to read is O(n) which is not log(n). 

          The problem says "operations", which I believe means disk seeks and reads of chunks. 

          But reading a large chunk is one operation? 

          Actually, the problem says "operations", and in the context of binary search, we do O(log n) disk seeks. 

          But if we then do a linear scan to count the lines, that would be one more disk seek? 

          However, the linear scan might read many bytes. 

          The problem does not specify if we count the number of bytes read or the number of disk seeks. 

          Typically, in external memory algorithms, we count the number of block transfers. 

          But here, we are reading the file in a streaming manner. 

          We can do: 

            Step 1: Find the byte offset of the insertion point (the beginning of the line where the target should be inserted).
            Step 2: Count the number of newlines from the beginning of the file to that byte offset.

          Step 2: we can do by reading the file from the beginning to the found byte offset and counting the newlines. 

          This is O(n) in the size of the file up to that point, but the number of disk seeks is 1 (if we read sequentially). 

          But the problem says "at most O(log n) operations". 

          If "operations" means disk seeks, then we have O(log n) for the binary search and 1 for the counting, so total O(log n). 

          But if "operations" means the number of bytes read, then it's O(n). 

          Given the ambiguity, we should clarify. 

          However, the problem says "using at most O(log(n)) operations", and in the context of binary search on a file, it usually means O(log n) disk seeks and reads of O(1) blocks per seek. 

          But in our binary search, we are reading O(1) lines per seek? 

          In each step of the binary search, we read two lines: one to skip and one to compare. 

          So the total number of lines read is O(log n). 

          But the total number of bytes read is O( log n * (average line length) ). 

          Then for counting the line number, we read O(offset) bytes, which is O(n) in the worst case.

          This is not O(log n) in the total bytes read.

          Therefore, we must return the byte offset? 

          But the problem says "position", and in bisect_left, it's the index. 

          Alternatively, we can count the lines during the binary search? 

          We can maintain the line number of the low and high pointers? 

          But we don't know the line number of low and high because they are byte offsets. 

          We can maintain the line number of the current segment boundaries? 

          We can do:

            low_ptr, high_ptr: byte offsets.
            low_line, high_line: line numbers? But we don't know high_line initially.

          We can start by reading the first line to get low_line=0, and then we don't know high_line.

          Alternatively, we can count the total number of lines? That would be O(n). 

          Given the complexity, let's assume the problem wants the byte offset of the beginning of the line. 

          But the problem says "as in bisect_left", which returns the index. 

          We have to return the line number. 

          How about we return the line number by counting the newlines from the beginning to the found byte offset, and hope that the problem considers the disk seeks as operations? 

          But the problem says O(log n) operations, and counting the newlines is one additional disk access (sequential read) which is one operation? 

          Then total operations: O(log n) + 1 = O(log n). 

          So we can do:

            Step 1: Find the byte offset `pos` of the insertion point (the beginning of the line) using binary search.
            Step 2: Open the file and read from the beginning to `pos`, counting the number of newlines. The count is the line number.

          But note: if the insertion point is at the beginning of the file, then count=0.

          And if the insertion point is at the beginning of the k-th line, then there are k newlines before it? 

          Actually, the first line: 
            "line1\nline2\n"
            The beginning of the first line: offset0, then we count 0 newlines -> line0.
            The beginning of the second line: after the first newline, we count 1 newline -> line1.

          But we want the insertion point to be the line number. 

          So the line number = number of newlines from the beginning to the insertion point (not including the insertion point's newline).

          Example: 
            We have three lines: 
              line0: "a"
              line1: "b"
              line2: "c"

            The insertion point for "b" should be line1.

            The byte offset of line1 is after the first newline.

            How many newlines from the beginning to that offset? 
              The file: "a\nb\nc"
              The offset of the beginning of "b" is 2 (if we have 'a' (1 byte) and then '\n' (1 byte), so offset=2).

            We read from 0 to 2 (exclusive of 2? or inclusive?) -> we read "a\n", which has one newline. 

            So the count is 1, but we want line1 -> which is index 1.

          So the line number = count.

          But what if the insertion point is at the end? 
            For example, inserting "d": 
              The insertion point is at the end: offset = len("a\nb\n

