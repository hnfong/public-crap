To perform a binary search on a text file that contains names sorted in lexicographical order, you need to read the file in a way that allows you to access lines without loading the entire file into memory. This can be achieved by using random access to the file, which is possible if the file is not too large and the operating system supports it.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Determine the size of the file**: This helps in calculating the mid-point for binary search.
2. **Seek to the mid-point**: Use the `seek` method to move the file pointer to the middle of the file.
3. **Read the line at the mid-point**: Read the line at the current file pointer position.
4. **Compare the target with the mid-point line**: Depending on the comparison, decide whether to search in the first half or the second half of the file.
5. **Repeat the process**: Continue the binary search until the target is found or the search space is exhausted.

Here is the Python function to perform this binary search:

```python
def binary_search_file(file_path, target):
    def get_line_number(file, offset):
        file.seek(0)
        current_offset = 0
        line_number = 0
        while current_offset < offset:
            file.readline()
            current_offset = file.tell()
            line_number += 1
        return line_number

    with open(file_path, 'r') as file:
        file_size = file.seek(0, 2)  # Move the cursor to the end of the file
        low, high = 0, file_size

        while low < high:
            mid = (low + high) // 2
            file.seek(mid)
            file.readline()  # Move to the start of the next line
            mid_line = file.readline().strip()

            if mid_line == target:
                return get_line_number(file, mid) - 1  # Return the 0-based index
            elif mid_line < target:
                low = file.tell()
            else:
                high = mid

        # If the target is not found, return the insertion point
        return get_line_number(file, low)

# Example usage:
# file_path = 'sorted_names.txt'
# target = 'John'
# position = binary_search_file(file_path, target)
# print(position)
```

### Explanation:
1. **get_line_number**: This helper function calculates the line number at a given offset. It seeks to the beginning of the file and reads line by line until it reaches the specified offset.
2. **Binary Search Logic**:
   - The file is opened in read mode.
   - The file size is determined by seeking to the end of the file.
   - The binary search loop continues until `low` is no longer less than `high`.
   - The mid-point is calculated, and the file pointer is moved to this position.
   - The line at the mid-point is read and compared with the target.
   - Depending on the comparison, the search space is adjusted (`low` or `high` is updated).
3. **Return Value**:
   - If the target is found, the function returns the 0-based index of the target.
   - If the target is not found, the function returns the insertion point (the position where the target should be inserted to maintain sorted order).

### Notes:
- This approach assumes that the file is not too large to handle with `seek` operations efficiently.
- The `get_line_number` function is used to convert the byte offset to a line number, which is necessary to return the correct position.
- This method is efficient and operates in O(log(n)) time complexity, where n is the number of lines in the file. [end of text]


