<s><|user|>
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.
<|end|>
<|assistant|>
Bubble Sort Implementation in Python:

```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr_j  # Swap
    return arr

# Example usage
example_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = bubble_sort(example_array)
print(sorted_array)
```

Merge Sort Implementation in Python:

```python
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        # Merge the sorted halves
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Checking if any element was left
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

    return arr

# Example usage
example_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = merge_sort(example_array)
print(sorted_array)
```

Comparison of Bubble Sort and Merge Sort:

Bubble Sort vs Merge Sort comparison:

1. Time Complexity:
   - Bubble Sort: Worst and average case time complexity is O(n^2), where n is the number of items being sorted.
   - Merge Sort: Time complexity is O(n log n) in all cases, which is much more efficient than Bubble Sort.

2. Space Complexity:
   - Bubble Sort: Space complexity is O(1), as it only requires a single additional memory space.
   - Merge Sort: Space complexity is O(n) due to the temporary arrays used during the merge process.

3. Stability:
   - Bubble Sort: Stable, it preserves the order of equal elements.
   - Merge Sort: Stable as well, maintaining the relative order of equal elements.

4. Use Cases:
   - Bubble Sort: Bubble Sort is usually used for educational purposes to teach the concept of sorting algorithms due to its simplicity, but it is not practical for large datasets.
   - Merge Sort: Due to its efficiency, Merge Sort is widely used in real-world applications where performance is critical, especially for large datasets.

In summary, while Bubble Sort is straightforward and has a lower space requirement, Merge Sort is significantly faster and more practical for large datasets, despite requiring more space.<|end|>