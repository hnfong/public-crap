```java
import java.io.*;
import java.util.*;
import java.util.regex.*;

public class NumberExtractor {
    private static final double KILO = 1024.0;
    private static final double MEGA = KILO * 1024.0;
    private static final double GIGA = MEGA * 1024.0;
    
    public static void main(String[] args) {
        try {
            StringBuilder inputBuilder = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String line;
            
            while ((line = reader.readLine()) != null) {
                inputBuilder.append(line).append("\n");
            }
            
            String input = inputBuilder.toString();
            double total = extractAndSumNumbers(input);
            
            System.out.printf("%.1f%n", total);
            System.out.printf("%.1f k%n", total / KILO);
            System.out.printf("%.1f M%n", total / MEGA);
            System.out.printf("%.1f G%n", total / GIGA);
            
        } catch (Exception e) {
            System.err.println("Error processing input: " + e.getMessage());
            System.exit(1);
        }
    }
    
    private static double extractAndSumNumbers(String input) {
        double sum = 0.0;
        
        // Pattern to match numbers with optional commas and optional suffixes
        Pattern pattern = Pattern.compile("([0-9,]+(?:\\.[0-9]+)?)\\s*([kKmMgG])?");
        Matcher matcher = pattern.matcher(input);
        
        while (matcher.find()) {
            String numberStr = matcher.group(1).replace(",", "");
            double value = Double.parseDouble(numberStr);
            
            String suffix = matcher.group(2);
            if (suffix != null) {
                switch (suffix.toLowerCase()) {
                    case "k":
                        value *= KILO;
                        break;
                    case "m":
                        value *= MEGA;
                        break;
                    case "g":
                        value *= GIGA;
                        break;
                }
            }
            
            sum += value;
        }
        
        return sum;
    }
}
``` [end of text]


