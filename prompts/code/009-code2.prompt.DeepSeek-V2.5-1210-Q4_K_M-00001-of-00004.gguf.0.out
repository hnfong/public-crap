To perform a binary search on a text file directly, we need to efficiently navigate through the file to find the target string. The key idea is to use the byte positions of the lines to narrow down the search space. Here's a step-by-step approach to achieve this:

1. **Determine the total number of lines**: This can be done by counting the number of newline characters in the file.
2. **Binary search on line numbers**: Instead of searching directly on the lines, we search on the line numbers. For each midpoint line number, we find the byte position of that line.
3. **Compare the target with the line**: Read the line at the midpoint byte position and compare it with the target.
4. **Adjust the search range**: Based on the comparison, adjust the search range (start or end) and repeat the process.
5. **Return the byte position**: Once the target is found, return its byte position. If not found, return the insertion point.

Here's the Python function `binary_search_file` that implements this approach:

```python
def binary_search_file(file_path, target):
    def count_lines(file):
        return sum(1 for _ in file)

    def find_line_position(file, line_number):
        file.seek(0)
        position = 0
        for _ in range(line_number):
            position = file.tell()
            file.readline()
        return position

    with open(file_path, 'rb') as file:
        total_lines = count_lines(file)
        start, end = 0, total_lines - 1

        while start <= end:
            mid = (start + end) // 2
            mid_position = find_line_position(file, mid)
            file.seek(mid_position)
            line = file.readline().strip()

            if line < target:
                start = mid + 1
            elif line > target:
                end = mid - 1
            else:
                return mid_position

        return find_line_position(file, start)

# Example usage:
file_path = "myfile.txt"
target = b"2 by"
print(binary_search_file(file_path, target))  # Output: 17
```

### Explanation:

1. **count_lines(file)**: This helper function counts the number of lines in the file by iterating through it and counting the newline characters.
2. **find_line_position(file, line_number)**: This helper function finds the byte position of a specific line number by seeking to the beginning of the file and reading lines until it reaches the desired line number.
3. **binary_search_file(file_path, target)**:
   - Open the file in binary mode.
   - Count the total number of lines.
   - Initialize the search range (`start` and `end`).
   - Perform the binary search:
     - Calculate the midpoint line number.
     - Find the byte position of the midpoint line.
     - Read the line at the midpoint byte position.
     - Compare the line with the target.
     - Adjust the search range based on the comparison.
   - If the target is found, return its byte position.
   - If not found, return the byte position where the target should be inserted (the `start` position).

This approach ensures that the binary search is performed in O(log(n)) operations, where n is the number of lines in the file. [end of text]


