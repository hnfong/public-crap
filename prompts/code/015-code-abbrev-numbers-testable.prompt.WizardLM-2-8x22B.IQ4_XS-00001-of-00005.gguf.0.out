 Here's a Python function that meets the requirements:

```python
def abbrev_num(x):
    if x < 1000:
        return str(x)
    
    suffixes = [(10**12, 'T'), (10**9, 'B'), (10**6, 'M'), (10**3, 'K')]
    
    for threshold, suffix in suffixes:
        if x >= threshold:
            x /= threshold
            if x < 10:
                return f"{x:.1f}{suffix}"
            elif x < 100:
                return f"{x:.0f}{suffix}"
            else:
                return f"{x:.0f}T"  # This should never happen with the given constraints
    
    return str(x)  # This should never happen with the given constraints

# Example usage:
# print(abbrev_num(2))       # Output: '2'
# print(abbrev_num(8180))    # Output: '8.2K'
# print(abbrev_num(9385832)) # Output: '9.4M'
# print(abbrev_num(74581))   # Output: '75K'
```

This function first checks if the number is less than 1000, in which case it returns the number as a string. If the number is greater than or equal to 1000, it iterates through a list of tuples containing thresholds and their corresponding suffixes. When it finds the appropriate threshold, it divides the number by the threshold and formats the result according to the rules specified in the task. The function ensures that the output string is less than 4 characters by rounding the number appropriately before appending the suffix. [end of text]


