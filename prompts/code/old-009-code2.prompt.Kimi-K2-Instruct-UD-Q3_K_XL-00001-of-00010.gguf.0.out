To perform a binary search on a **sorted text file** in **O(log n)** time, we need to treat the file as a **random-access array of lines**, where we can jump to any byte offset and read a line. However, since lines have **variable lengths**, we can't directly index them like an array. Instead, we use **byte-level binary search** with careful handling of line boundaries.

---

### 🔍 Key Idea:
- Use `seek()` to jump to byte positions.
- Read a line starting from a guessed byte offset.
- Adjust the offset to the **start of the next line** if we land in the middle of one.
- Use binary search on byte ranges to find the target line or insertion point.

---

### ✅ Assumptions:
- The file is sorted lexicographically.
- Lines are separated by `\n`.
- The file is not loaded into memory — we only read small chunks.

---

### 🧠 Strategy:
1. Get the total file size.
2. Use binary search on byte ranges.
3. At each midpoint:
   - Seek to the midpoint.
   - Read forward to the next newline to get a full line.
   - Compare the line with the target.
   - Adjust the search range accordingly.

---

### ✅ Python Function:

```python
import os

def binary_search_file(file_path, target):
    """
    Perform binary search on a lexicographically sorted text file.
    Returns the byte offset of the first line >= target (insertion point).
    If exact match is found, returns its offset.
    """
    with open(file_path, 'rb') as f:
        left = 0
        right = os.path.getsize(file_path)
        result = right  # default insertion point at end

        while left < right:
            mid = (left + right) // 2
            f.seek(mid)

            # Ensure we are at the start of a line
            if mid > 0:
                f.readline()  # discard partial line

            line_start = f.tell()
            line = f.readline()
            if not line:
                break

            line_str = line.decode().rstrip('\n')
            if line_str < target:
                left = f.tell()
            else:
                result = line_start
                right = mid

        return result
```

---

### 🧪 Example Usage:

```python
offset = binary_search_file('sorted_names.txt', 'Grace')
print(f"Insert at byte offset: {offset}")
```

---

### 📝 Notes:
- This returns the **byte offset** of the insertion point (like `bisect_left`).
- If you want to check if the exact line exists, read the line at `offset` and compare.
- This avoids loading the entire file into memory and runs in **O(log n)** disk seeks.

Let me know if you want a version that returns the actual line or a line index instead of byte offset. [end of text]


