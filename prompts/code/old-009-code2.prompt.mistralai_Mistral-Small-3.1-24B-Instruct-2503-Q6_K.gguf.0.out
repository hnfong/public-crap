Performing a binary search on a file directly can be challenging because files are not random-access data structures like lists or arrays in memory. However, it is possible to achieve this by reading the file in chunks and seeking to specific positions. Here's a step-by-step approach to implement a binary search on a file:

1. **Determine the size of the file**: This helps in calculating the mid-point.
2. **Seek to the mid-point**: Use the `seek` method to move the file pointer to the middle of the file.
3. **Read the line at the mid-point**: Read the line at the current file pointer position.
4. **Compare the target with the mid-point line**: Depending on the comparison, decide whether to search in the first half or the second half of the file.
5. **Repeat the process**: Continue the binary search until the target is found or the search space is exhausted.

Here is the Python function `binary_search_file` that implements this approach:

```python
def binary_search_file(file_path, target):
    def get_line_number(file, position):
        file.seek(0)
        current_position = 0
        line_number = 0
        while current_position < position:
            file.readline()
            current_position = file.tell()
            line_number += 1
        return line_number

    with open(file_path, 'r') as file:
        file_size = file.seek(0, 2)  # Move to the end of the file to get its size
        low, high = 0, file_size

        while low < high:
            mid = (low + high) // 2
            file.seek(mid)
            file.readline()  # Move to the start of the next line
            mid_position = file.tell()
            line = file.readline().strip()

            if line == target:
                return get_line_number(file, mid_position)
            elif line < target:
                low = mid_position
            else:
                high = mid

        # If the target is not found, return the insertion point
        return get_line_number(file, low)

# Example usage:
# file_path = 'sorted_names.txt'
# target = 'John'
# position = binary_search_file(file_path, target)
# print(position)
```

### Explanation:
1. **get_line_number**: This helper function calculates the line number at a given file position. It seeks to the beginning of the file and reads line by line until it reaches the specified position.
2. **Binary Search Logic**:
   - The file is opened in read mode.
   - The size of the file is determined using `file.seek(0, 2)`.
   - The binary search loop continues until `low` is no longer less than `high`.
   - The mid-point is calculated, and the file pointer is moved to this position.
   - The line at the mid-point is read and compared with the target.
   - Depending on the comparison, the search space is adjusted (`low` or `high` is updated).
3. **Return Value**: If the target is found, the line number is returned. If not, the insertion point (as in `bisect_left`) is returned.

This approach ensures that the file is read in chunks, and the binary search is performed efficiently with at most O(log(n)) operations. [end of text]


