To perform a binary search on a text file directly, we need to treat the file as a sequence of lines and use a binary search algorithm to find the target line. The key challenge is that we cannot directly index into the file as we would with an array, because the lines are of variable length. However, we can use a combination of seeking and reading to achieve this.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Determine the file size**: We need to know the total size of the file to set the initial search range.
2. **Binary search**: Use binary search to narrow down the range. At each step, seek to the middle of the current range, read a line, and compare it with the target.
3. **Adjust the search range**: Based on the comparison, adjust the search range to the left or right half.
4. **Handle edge cases**: Ensure that we correctly handle the case where the target is not found and return the insertion point.

Here's the implementation:

```python
def binary_search_file(file_path, target):
    def read_line_from_position(file, pos):
        file.seek(pos)
        # Skip any partial line at the current position
        if pos > 0 and file.read(1) != b'\n':
            file.readline()
        return file.readline()

    with open(file_path, 'rb') as file:
        file_size = file.seek(0, 2)  # Get the file size
        low, high = 0, file_size

        while low < high:
            mid = (low + high) // 2
            line = read_line_from_position(file, mid)
            line_start = file.tell() - len(line)  # Get the start position of the line

            if line.startswith(target):
                return line_start
            elif line < target:
                low = line_start + len(line)
            else:
                high = line_start

        # If the target is not found, return the insertion point
        return low

# Example usage
file_path = "myfile.txt"
target = b"2 by"
position = binary_search_file(file_path, target)
print(position)  # Output should be 17
```

### Explanation:

1. **read_line_from_position**: This helper function seeks to a given position in the file, skips any partial line, and reads the next complete line.
2. **Binary search loop**: We initialize `low` and `high` to the start and end of the file, respectively. In each iteration, we calculate the middle position, read the line at that position, and compare it with the target.
3. **Adjust search range**: If the line is less than the target, we move the `low` pointer to the start of the next line. If the line is greater than or equal to the target, we move the `high` pointer to the start of the current line.
4. **Return insertion point**: If the target is not found, the loop will terminate with `low` at the correct insertion point.

This approach ensures that the search is performed in O(log(n)) operations, where n is the number of lines in the file. [end of text]


