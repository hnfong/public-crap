 <|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.
<|im_end|>
<|im_start|>assistant
Bubble Sort Implementation:

```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        # Track if any swap happens
        swapped = False
        for j in range(0, n-i-1):
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        # If no two elements were swapped by inner loop, then break
        if not swapped:
            break
    return arr

# Example usage:
example_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = bubble_sort(example_array)
print("Sorted array with Bubble Sort:", sorted_array)
```

Merge Sort Implementation:

```python
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

    return arr

# Example usage:
example_array = [64, 34, 25, 12, 22, 11, 90]
sorted_array = merge_sort(example_array)
print("Sorted array with Merge Sort:", sorted_array)
```

Comparison:

Bubble Sort:
- Bubble Sort is a simple comparison-based algorithm.
- It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.
- The algorithm gets its name because smaller elements "bubble" to the top of the list.
- It has a worst-case and average complexity of O(n^2), where n is the number of items being sorted.
- Bubble Sort is not suitable for large datasets as its performance degrades quickly with the increase in data size.
- It has a best-case time complexity of O(n) when the list is already sorted.

Merge Sort:
- Merge Sort is a divide-and-conquer algorithm.
- It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.
- The merge function is used for merging two halves.
- Merge Sort has a worst-case and average complexity of O(n log n), which is much better than Bubble Sort.
- It is a stable sort, meaning that it maintains the relative order of equal elements.
- Merge Sort requires additional space for the temporary arrays used during the merge process, which makes it less space-efficient than Bubble Sort.
- It performs well on large datasets and is suitable for sorting linked lists.

In summary, Merge Sort is generally more efficient than Bubble Sort, especially for larger datasets, due to its O(n log n) time complexity compared to Bubble Sort's O(n^2). However, Bubble Sort can be useful for small datasets or nearly sorted arrays due to its simplicity and the fact that it has a best-case time complexity of O(n).<|im_end|>