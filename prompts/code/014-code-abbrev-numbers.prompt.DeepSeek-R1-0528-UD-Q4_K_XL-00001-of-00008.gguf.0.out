<think>
We are going to convert the number to a compact form with at most 4 characters.
 Steps:
 1. We'll consider the absolute value to handle negative numbers.
 2. We'll define thresholds for the suffixes: 
      no suffix for numbers less than 1000 (but note: we might need to format even in the thousands if it's exactly 1000?),
      then 'k' for thousands (10^3), 
      'M' for millions (10^6), 
      'B' for billions (10^9), 
      'T' for trillions (10^12), 
      and so on? But note: the requirement says "less than 4 characters", so we might not go too far.

 3. However, note the examples: 
      2 -> "2" (1 char)
      800 -> "0.8k" (3 chars) -> but wait, 800 is 0.8k? Actually, 800 is 0.8 * 1000, so that's correct.
      9385832 -> 9.4M (3 chars)

 4. How to format?
    We want at most 4 characters. So we can have:
        - A digit, then a decimal point, then one digit, then a suffix (like "9.4M") -> that's 3 characters? Actually, 3: '9', '.', '4', 'M' -> 4? Wait, that's 4: 9, ., 4, M -> 4 characters. So that's acceptable.

    But note: 800 becomes "0.8k" which is 4 characters? Actually, 0.8k is 4: '0','.','8','k'. But the example says 0.8k and that's acceptable.

    However, the requirement says "less than 4 characters if at all possible". So we should try to use 3 or fewer when we can.

    Let's break down:
        - For numbers less than 1000, we can just output the integer as string? But 800 is 800 -> that's 3 characters. But the example output is "0.8k", which is 4. Why not 800? 

    Actually, the example says 800 becomes "0.8k". So the requirement is to use the compact form even for 800? 

    The problem says: "roughly represents the number in compact, human readable form". So we are trading off precision for compactness.

    But note: 800 is 0.8k and that is 4 characters, while "800" is 3. So why use 0.8k? 

    Let me re-read: "output should be a string that roughly represents the number". And the example input 800 is given as 0.8k.

    So we must follow the example: 800 becomes "0.8k".

    However, we must also note: 2 becomes "2", which is 1 character. So we don't use any suffix for numbers below 1000? But 800 is below 1000? 

    Actually, 800 is 800, which is less than 1000. But the example output is "0.8k". 

    This implies that we are using a threshold of 1000? Actually, no: 800 is being represented in thousands. 

    So the rule: 
        We are going to represent the number in the highest unit such that the number is at least 1 in that unit? 
        But 800 is 0.8 in thousands, so we are allowing the fractional part.

    How about: 
        We break the number by orders of 1000. We'll use:
            if abs(num) < 1000 -> output as integer? But 800 is 800, but the example output is 0.8k. 

    Actually, the example output for 800 is 0.8k, which is 4 characters. But 800 is 3 characters. So why? 

    The requirement says "compact, human readable". In many contexts, 0.8k is acceptable and compact for numbers that are in the hundreds? 

    However, let's see the example: 9385832 becomes 9.4M. That's 9.4 million, which is 9.4 * 10^6.

    So the rule might be: 
        We use a suffix when the number has at least 4 digits? (i.e., 1000 and above) but 800 is 3 digits.

    But wait: 800 is 3 digits and the example uses 0.8k. 

    Alternatively, the example might be using a rule: 
        Represent the number with at most 3 digits? 
        For 800: we can write as 800 (3 digits) -> that's 3 characters. 
        For 9385832: we have 9,385,832 -> that's 7 digits. We want to represent in 3 digits? So 9.4M (which is 9.4 and then M) -> 3 digits and a letter.

    But 800: if we write 0.8k, that's 3 digits? Actually, 0.8k uses 3 characters? No, it uses 4: '0', '.', '8', 'k'. 

    So the requirement says "less than 4 characters if at all possible". 800 can be written as 800 (3 characters) which is less than 4. So why 0.8k? 

    This suggests that the example might have a mistake? Or perhaps the rule is: 
        We use the unit that brings the number to between 1 and 1000? 
        For 800: we can leave it as 800 (which is between 1 and 1000) -> so no suffix? 
        But 800 is 0.8 of a thousand, so if we use thousands, we get 0.8. 

    However, the example output for 800 is 0.8k. 

    Let me check the example again: 
        input: 800 -> output: 0.8k

    So we must output 0.8k for 800.

    How about 1200? 
        We could write 1.2k -> 4 characters.

    How about 1000? 
        We could write 1k -> 2 characters? But 1k is 2 characters. But 1000 is 4 characters. So 1k is more compact.

    So the rule: 
        We will convert the number to a value in the highest unit (thousands, millions, etc.) such that the value is at least 1? 
        But 800 is less than 1000, so we don't have 1 thousand? Then we use the next lower unit? 

    Alternatively, we might use the unit that minimizes the number of digits? 

    After re-thinking: 
        The example 800 -> 0.8k: that is 4 characters, which is the maximum allowed? But the requirement says "less than 4 if at all possible". 
        For 800, we can write "800" which is 3, so that would be better. 

    However, the problem says: "roughly represents the number". And the example input 800 is given as 0.8k. 

    So we must follow the example. Therefore, we will use:

        For numbers below 1000: we output the integer? But 800 is below 1000 and we output 0.8k? 

    This is confusing.

    Let me look at the example 2: output "2", which is correct.

    How about 1000? 
        We can output 1k -> 2 characters.

    How about 1200? 
        We can output 1.2k -> 4 characters.

    How about 999? 
        We can output 999 -> 3 characters.

    How about 1000? 1k -> 2 characters.

    How about 999.5? That's 999.5 -> but we are given an integer. So we don't have to worry about non-integers.

    But 800: if we output 800, that's 3. If we output 0.8k, that's 4. So why choose 0.8k? 

    I think the example might have intended: 
        800 -> 800 (because it's 3 digits) and then 1000 becomes 1k, 1200 becomes 1.2k, etc.

    But the example explicitly says 800 becomes 0.8k.

    Alternatively, the rule might be: 
        We always use a suffix for thousands and above, and for numbers in the hundreds that are multiples of 100? 
        But 800 is 0.8k, but 500 would be 0.5k? 

    This doesn't seem consistent.

    After re-examining the problem: 
        "output should be a string that roughly represents the number in compact, human readable form"

    And the examples: 
        2 -> 2
        800 -> 0.8k
        9385832 -> 9.4M

    So 800 is being represented as 0.8k, which is 4 characters. 

    Therefore, we design:

        We will break the number by powers of 1000. We'll have suffixes:
            '' for units
            'k' for 10^3
            'M' for 10^6
            'B' for 10^9
            'T' for 10^12
            ... but we can stop at a certain point.

        Steps:
          Let n = absolute value of the input.

          If n < 1000: 
              we output the number as integer? But 800 is less than 1000 and we want 0.8k? 

          Actually, the example 800 is 800, which is less than 1000, but we are going to represent it in thousands? 

          How about: 
            We find the smallest power such that the number divided by 1000^power is less than 1000? 
            But 800 divided by 1000 (power=1) is 0.8, which is less than 1000? 

          We want the representation to be at least 1? 

          Alternatively, we can do:

            We'll iterate from the highest unit (like T, then B, then M, then k) down to units, and when we find a unit such that the number is at least 1 in that unit, we use it? 

          But 800: 
            in T: 800 / 1e12 -> 0.0000000008 -> too small
            ... until we get to k: 800/1000 = 0.8 -> which is at least 0.1? 

          The example uses 0.8k. 

          So we can set a threshold: we use a unit if the value in that unit is at least 0.1? 

          Then:
            n=800: 
                k: 0.8 -> which is >= 0.1 -> so we use k.

          Then for n=99: 
                k: 0.099 -> which is < 0.1 -> so we don't use k, we use units -> output "99"

          For n=100: 
                k: 0.1 -> which is >=0.1 -> so we use 0.1k -> 4 characters? 

          But 100 is 3 characters, so we don't want to use 0.1k? 

          However, the example 800 is 800 -> 3 characters, but we are using 0.8k (4 characters). 

          So the rule is: we use the unit if the number is at least 1000? 

          Then 800 would be 800, and 1000 would be 1k. 

          But the example says 800 becomes 0.8k. 

    I think there might be a misunderstanding. Let me check the example again: 
        Input: 800 -> output: 0.8k

    But 0.8k is 800, so it's correct. However, the problem says "compact", and 800 is more compact than 0.8k? 

    After reading the requirement: "less than 4 characters if at all possible". 
        For 800: 
            "800" is 3 characters -> which is less than 4, so we can use that.
            "0.8k" is 4 characters -> which is the maximum allowed? 

    The requirement says "less than 4 if at all possible", meaning we should try to use 3 or fewer when we can. 

    Therefore, for 800 we should use "800" (3) instead of "0.8k" (4). 

    But the example output for 800 is "0.8k". 

    This is a contradiction.

    I suspect the example might have intended 800 to be represented as 800? 

    However, the problem says: "for example, input/output pairs may be: ... 800 => 0.8k"

    So we must output 0.8k for 800.

    Therefore, we will use the following:

        We will represent the number in the unit that is the highest such that the number in that unit is at least 1 OR we can represent it with one digit and a decimal? 

        Actually, we can do:

          We'll consider the number of digits of the integer part.

          Steps:

            Let n = absolute value of the input.

            If n < 1000:
                # But we want to represent 800 as 0.8k? So we don't do this? 
                # Instead, we might break the rule for numbers below 1000? 

            Alternatively, we can use:

                We'll use:
                    if n < 10: we output the integer (1 digit)
                    if 10 <= n < 1000: 
                         # we can output as integer? but 800 is 3 digits -> 3 characters, but the example wants 0.8k (4) -> so we don't do that.

            This is confusing.

    After reading the example again: 
        The example 2 -> 2 (1 char) and 800 -> 0.8k (4 char) and 9385832 -> 9.4M (3 char? wait, 9.4M is 3 characters? Actually, 9, ., 4, M -> 4 characters).

    So all the examples are at most 4 characters.

    How about we do:

        We want to represent the number with at most 3 digits? and then a suffix if needed? 

        For 2: 1 digit -> no suffix -> "2"
        For 800: 3 digits -> but we can also represent as 0.8k: that uses 3 digits? Actually, 0.8k uses 3 characters? No, 0.8k is 4: '0','.','8','k'

        Alternatively, we can do:

            We'll convert the number to a string that has at most 3 significant digits? and then if we are above 1000, we use a suffix.

        Algorithm:

          Let suffixes = ['', 'k', 'M', 'B', 'T']   # we can extend if needed, but the problem says "popular and reasonable", so we stop at T or maybe beyond?

          We'll start from the largest suffix (T) and go down to ''.

          For each suffix (with exponent 12, 9, 6, 3, 0):

            divisor = 10^(exponent)   # but note: k=1000=10^3, M=10^6, etc.

            if n >= divisor:
                # we try to represent the number in this unit
                value = n / divisor   # but we are an integer, so we do floating point division

                # We want to format the value to have at most 3 digits? but the total string must be <=4 including the suffix.

                How to format:

                  We can have:
                    - If value >= 100, then we can round to the nearest integer? and then we have 3 digits? but then we can output as integer and the suffix? 
                      Example: 123456 -> 123k? but 123k is 4 characters (if we write 123k) -> that's 4. But 123456 is 123,456 -> 6 digits. 123k is 123 thousand -> 123000, which is 123456 rounded to 123000? 

                  But the example 9385832 -> 9.4M: 
                      9385832 / 1000000 = 9.385832 -> rounded to one decimal: 9.4 -> then we output "9.4M"

                So the rule for formatting the value:

                  We want at most 3 characters for the numeric part? but:

                    If we use one digit and a decimal and one digit, that's 3 characters for the number, plus the suffix -> total 4.

                    If we use two integer digits and no decimal, that's 2 characters plus the suffix -> 3 total.

                    If we use three integer digits, that's 3 characters plus the suffix -> 4 total? 

                  But note: the suffix might be one character.

                So:

                  We'll consider:

                    If value >= 100: 
                         # we can round to the nearest integer? but then we have 3 digits -> so we output the integer part (if it has 3 digits) and then the suffix? 
                         # but 100.5 would be 101? 
                         # However, we want at most 4 characters: 101k -> 4 characters -> acceptable.

                    If 10 <= value < 100:
                         # we can round to one decimal place? but that would be 3 characters (like 10.0 -> but we don't need the trailing zero) -> but we can do: 
                         # if we round to one decimal, we get a string that might be "10.0" -> we can remove the trailing zero? 
                         # Actually, we want at most 3 characters for the number? 
                         # How about: 
                         #   We format the number to have at most 1 decimal place, but then remove any trailing zeros and the decimal point if it becomes an integer.

                    If value < 10:
                         # we round to one decimal place? and then we get a string like "9.4" -> 3 characters? 

                But note: 0.8k: value=0.8 -> which is less than 10, so we would do one decimal place: "0.8" -> then add 'k' -> "0.8k"

          However, we must avoid representing numbers that are too small for the unit? 

          We are iterating from the largest unit to the smallest. We break when we find a unit such that the value is at least 1? 

          But 800: 
            We start with T: 800/1e12 -> 8e-10 -> skip.
            ... until we get to k: 800/1000 = 0.8 -> which is less than 1? 

          Then we skip and go to the next? which is no suffix -> then we output 800? 

          But we want 0.8k. 

          So we don't require the value to be at least 1? We just use the unit that is the highest such that the number is at least 0.1? 

          Then for 800: 
            k: 0.8 >= 0.1 -> so we use k.

          For 99: 
            k: 0.099 < 0.1 -> so we skip and use the next (which is no suffix) -> output "99"

          For 100: 
            k: 0.1 -> >=0.1 -> so we use 0.1k -> "0.1k" -> 4 characters.

          But 100 is 3 characters, so we could output "100" (3) which is better than "0.1k" (4). 

          However, the requirement says "if at all possible" to be less than 4. So for 100, we can output "100" (3) and avoid "0.1k". 

          How can we achieve that?

          We can compare the length of the string representation:

            Option1: without any unit -> just the integer as string: len(str(100)) = 3.
            Option2: with unit: "0.1k" -> 4.

          So we choose the one with the smallest length? 

          But the example 800: 
            Option1: "800" -> 3
            Option2: "0.8k" -> 4

          Then we choose "800". But the example output is "0.8k". 

          This contradicts.

    I think the problem example is fixed: 800 must be 0.8k. 

    Therefore, we will not compare the length. We will use the unit if the value in that unit is at least 0.1, regardless of the string length.

    Steps:

      Let n = abs(number)

      Define the suffixes and their thresholds:

        We'll create a list of tuples: 
          [ (10**12, 'T'),
            (10**9, 'B'),
            (10**6, 'M'),
            (10**3, 'k'),
            (1, '') ]

      But note: we want the highest unit that satisfies: n >= 0.1 * threshold? 

      Actually, we want: 
          We are going to divide by the threshold, and we require that the result is at least 0.1.

      So for each (divisor, suffix) in the list (from largest to smallest):

          if n >= 0.1 * divisor: 
              value = n / divisor   # as float
              # Now format value to have at most 3 characters? (including the decimal point and the suffix)

          How to format value?

            We want the entire string (number part + suffix) to be at most 4 characters? 

            The suffix is 1 character (or 0 for the last one). So the number part must be at most 3 if suffix is non-empty, or 4 if suffix is empty? 

            But wait: the requirement says "less than 4 if at all possible", but 4 is the maximum.

            We'll format the number part to be:

              If value >= 100:
                  # we can round to the nearest integer? because 100.0 has 3 digits, and we can't have decimal without going over?
                  # But 100.0 rounded to integer is 100 -> 3 digits -> then we output "100" + suffix -> but if suffix is non-empty, that would be 4 characters? 
                  # Example: 100k -> 100k -> 4 characters -> acceptable.
                  # But 100.5k -> if we round to integer: 101k -> 4 characters.
                  # So we do: 
                      s = str(round(value))
                  # But what if rounding gives 1000? then we have 4 digits? -> then we might have to move to the next unit? 
                  # Example: 999.5k -> rounded to 1000k -> which is 1000k -> 5 characters? -> that's too long.

              Alternatively, we can do:

                We want at most 3 digits in the number part.

                So:

                  if value >= 100:
                      # we round to the nearest integer, but if the integer part has 3 digits, that's acceptable.
                      num_str = str(round(value))
                      # if the length of num_str is 3, then we output num_str + suffix -> total 3+len(suffix) 
                      # but if it becomes 4? (like 1000) then we have a problem.

                  if 10 <= value < 100:
                      # we can try to show one decimal place? but then we have 4 characters: "10.0" -> but we can remove the trailing zero? 
                      # We want to avoid the trailing zero. So we format to one decimal and then remove the trailing zero and the decimal point if any.
                      # Example: 10.0 -> "10" -> but then we can use the integer representation? 
                      # Actually, we can do: 
                          formatted = "{:.1f}".format(value)
                          # then remove trailing zeros and the decimal point if needed.
                      # But we want at most 3 characters for the number part? 
                      # Actually, we are allowed 3 characters for the number part if the suffix is non-empty? because then total is 4.

                  if value < 10:
                      # we do one decimal place: 
                          formatted = "{:.1f}".format(value)
                      # then remove the trailing zero? 
                      # Example: 9.4 -> "9.4", 9.0 -> "9" -> but wait, 9.0 becomes 9? 

              However, we must be cautious: 
                  For 0.8: 
                      formatted = "{:.1f}".format(0.8) -> "0.8"
                  But we cannot remove the zero? because then it would be ".8" which is not standard.

          But note: the requirement says "human readable". So we should not output ".8k", we should output "0.8k".

      How about we do:

          We'll format the value to have one decimal place, but then:

            If the formatted string has a decimal part, we remove any trailing zeros and the decimal point if it becomes an integer.

          However, for values less than 10, we always want one decimal place? 

          Actually, we can do:

            if value >= 100:
                # round to integer and then convert to string
                num_str = str(round(value))
                # But what if rounding causes the number to become 1000? then we have 4 digits -> which is too long for the number part? 
                # Then we should use the next higher unit? 
                # Example: 999.5k -> rounded to 1000k -> which is 1000k -> 5 characters? 
                # But 1000k is 1,000,000 -> which is 1M. 
                # So we should avoid that: if after rounding, the value becomes 1000, then we should use the next higher unit? 

                # However, we are already in the unit 'k'. The next higher unit is 'M'. 
                # So we should break out and use the next higher unit? 

                # But we are iterating from the highest unit down. We already skipped T, B, M, and then we are at k. 
                # So we cannot go back up.

          This is getting complicated.

      Alternative approach:

        We can iterate from the highest unit to the lowest, and for each unit, we check:

          if n >= divisor: 
              value = n / divisor
              # Now, we want to represent value with at most 3 digits? 

          But we can also consider: we break at the first divisor that is <= n * 1000? 
          Actually, we want the divisor such that the value is at least 1? or at least 0.1? 

      After research, common practice (like StackOverflow) for human readable numbers:

        We use the unit that makes the number between 1 and 1000? 

        But then 800 would be 800 (in the unit of ones) -> so we output 800.

        But the example 800 is 0.8k.

      I found a common solution online:

        def human_format(num):
            num = float('{:.3g}'.format(num))
            magnitude = 0
            while abs(num) >= 1000:
                magnitude += 1
                num /= 1000.0
            return '{}{}'.format('{:f}'.format(num).rstrip('0').rstrip('.'), ['', 'K', 'M', 'B', 'T'][magnitude])

        But this does: 
          800: 
            formats to 800.0 -> then while loop: 800<1000 -> so magnitude=0, then output 800 -> but then we want to remove trailing zeros: 800 -> then '' -> "800"

        But we want "0.8k"

      Another common approach is to use logarithms to determine the magnitude.

    Given the confusion, let me stick to the example: 
        2 -> 2
        800 -> 0.8k
        9385832 -> 9.4M

    So we will do:

        We will use suffixes for thousands and above, and also for hundreds if they are not a full thousand? 

        But specifically, we will represent the number in thousands if the number is at least 100? 

        How about: 
          if n < 1000:
             # but then we also want to use 'k' for numbers >= 100? 
             # then for 100 to 999, we represent as 0.1k to 0.999k? 

        This is not standard.

    I think the example might have a typo. In many systems, 800 is represented as 800, and 1000 as 1k.

    But the problem says: "output should be a string that roughly represents the number in compact, human readable form" and the example includes 800 as 0.8k.

    Therefore, we will follow the example literally.

    We will use:

        We'll have a list of units: starting from the largest (like T, B, M, k) down to no unit.

        For each unit with divisor:

            if n >= divisor / 10:   # meaning we can represent it in this unit with at least 0.1
                value = n / divisor

                # Format value to have:
                #   if value >= 100: 
                #       we try to round to integer, but if after rounding it becomes 1000, then we have to use the next unit? 
                #       but we are iterating from high to low, so we cannot. Instead, we can check: if value >= 1000, then we should have used the next higher unit? 
                #       but we skipped the next higher unit because n was not >= (next higher unit)/10? 
                #   So we assume that value < 1000? because we are using the first unit for which n>=divisor/10, and the next higher unit would have divisor_next = divisor * 1000, and we would have used that if n>= (divisor_next/10) = divisor*100, but here n < divisor*100 (because otherwise we would have taken the next higher unit) -> so value = n/divisor < 1000.

                Therefore, value is in [0.1, 1000).

                Now, we format value to a string with at most 3 digits total (including the decimal point) and then add the suffix.

                How to format value in [0.1, 1000) to at most 3 digits?

                  We have:

                    [0.1, 1): 
                         We want one digit after the decimal? 
                         Example: 0.8 -> "0.8" -> 3 characters? (including the '0' and the '.' and '8') -> 3 characters for the number part.
                         But then add suffix -> total 4.

                    [1, 10): 
                         We can show up to one decimal place? but then we might have "9.4" -> 3 characters.
                         Or if we can avoid the decimal for integers: 
                             if value is integer -> then we output the integer -> which might be 1 digit, 2 digits, or 3 digits.

                    [10, 100):
                         We can show as integer if it's integer? or with one decimal if not? 
                         But we want at most 3 characters for the number part.

                    [100, 1000):
                         We must show as integer? because if we do one decimal, it would be 3 digits for the integer part and then the decimal and one digit -> 5 characters? 

                  Actually, we want the entire string (number part and suffix) to be at most 4 characters.

                  The suffix is one character (or empty for the last unit).

                  For the last unit (divisor=1, suffix=''), we are formatting a number in [0.1, 1000). 
                     If the number is between 0.1 and 1, we would output "0.8" -> 3 characters, then no suffix -> total 3.
                     But 0.8 is not an integer? but the input is integer, so this case (0.1 to 1) only happens when we are using a unit? 

                  Actually, for the last unit (divisor=1), we only use it if n < 1000 and n>=0.1? which is always true for n>=1, but n>=0.1 -> but n is integer so n>=1. 
                  However, we might have n=0? 

                  But for the non-last units, the number part must be formatted to at most 3 characters? 

                  How to achieve at most 3 characters for the number part?

                    We can do:

                      if value >= 100:
                          # then we format as integer: 
                              s = str(round(value))
                          # but what if it's 999.5? -> rounds to 1000 -> then we have 4 digits -> too long.
                          # But note: value < 1000, so the integer part is at most 3 digits? 
                          # However, if value is 999.9, rounding to integer gives 1000 -> 4 digits.

                  So we must avoid that.

                  Instead, we can do:

                      if value >= 100:
                          # we format as integer, but we do: 
                              s = str(int(round(value)))
                          # and if the length of s is 3, then we use it.
                          # if the length is 4, then we have a problem.

                  But note: value < 1000, so the integer part of value is at most 3 digits? 
                  However, when we round, 999.5 becomes 1000 -> which is 4 digits.

                  So we should not round to integer if it might push to 1000.

                  Instead, we can floor to integer? 

                  But 999.9 -> we want to represent as 999? -> then it's 3 digits.

                  However, the example 9385832 becomes 9.4M, which is rounded.

                  So we want rounding.

                  How about: 
                      if value >= 100:
                          # we round to the nearest integer, but if it becomes 1000, then we use "0.1" and then the next higher unit suffix? 
                          # but we are already in a unit, and the next higher unit is not available in this iteration.

                  Given that we are iterating from the highest unit, and we only use a unit if the value is at least 0.1, and the next higher unit would have been used if the value was at least 0.1 * next_unit_threshold = 0.1 * (current_unit_threshold * 1000) = 100 * current_unit_threshold.

                  So if value >= 100 * current_unit_threshold, we would have used the next higher unit. 

                  But we are in the current unit because value < 100 * current_unit_threshold.

                  Therefore, value in the current unit is < 100 * current_unit_threshold / current_unit_threshold = 100.

                  Wait, no: 

                      value = n / current_unit_threshold.

                      We are in this unit because n >= 0.1 * current_unit_threshold and n < 0.1 * next_unit_threshold = 0.1 * (current_unit_threshold * 1000) = 100 * current_unit_threshold.

                  So value = n / current_unit_threshold is in [0.1, 100).

                  Therefore, value is in [0.1, 100). 

                  So we don't have to worry about value>=100? 

                  But wait, 100 is not included? 

                  The condition: n < 100 * current_unit_threshold -> so value < 100.

                  So value is in [0.1, 100).

                  Then we can format:

                    if value >= 10:
                        # then we can try to show as integer? 
                        # but 10.5? we might want to show as 10.5 -> 4 characters (10.5k -> 5 characters) -> too long.
                        # instead, we show one decimal place only if necessary, and if we show one decimal place, it might be 4 characters for the number part

