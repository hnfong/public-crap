==========
```python
def abbrev_num(x):
    if x < 1000:
        return str(x)
    
    suffixes = ['', 'K', 'M', 'B', 'T']
    magnitude = 0
    while x >= 1000 and magnitude < len(suffixes) - 1:
        magnitude += 1
        x /= 1000.0
    
    # Format the number to have at most 3 significant digits
    if x >= 100:
        # Round to the nearest integer (e.g., 938 -> 938)
        formatted = str(int(round(x)))
    elif x >= 10:
        # Round to 1 decimal place, then remove the decimal if it's .0
        rounded = round(x, 1)
        if rounded == int(rounded):
            formatted = str(int(rounded))
        else:
            formatted = "{:.1f}".format(rounded)
    else:
        # Round to 2 decimal places, then remove trailing .0 or .00
        rounded = round(x, 2)
        if rounded == int(rounded):
            formatted = str(int(rounded))
        else:
            formatted = "{:.2f}".format(rounded).rstrip('0').rstrip('.')
    
    # Check if the formatted string + suffix is <= 4 characters
    if len(formatted + suffixes[magnitude]) > 4:
        # Need to round more aggressively
        if x >= 10:
            # Round to nearest integer
            formatted = str(int(round(x)))
        else:
            # Round to 1 decimal place
            rounded = round(x, 1)
            if rounded == int(rounded):
                formatted = str(int(rounded))
            else:
                formatted = "{:.1f}".format(rounded)
    
    # Final check to ensure it's <= 4 characters
    result = formatted + suffixes[magnitude]
    if len(result) > 4:
        # If still too long, round to integer
        formatted = str(int(round(x)))
        result = formatted + suffixes[magnitude]
    
    return result
```
==========
Prompt: 221 tokens, 153.645 tokens-per-sec
Generation: 441 tokens, 21.388 tokens-per-sec
Peak memory: 199.130 GB
