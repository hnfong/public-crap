To perform a binary search on a sorted text file, we need to read the file line by line and maintain a sorted list of names. This way, we can use binary search on the list of names. Here's how we can implement the `binary_search_file` function in Python:

1. Read the file line by line and store the names in a list.
2. Use binary search to find the target name in the list.
3. Return the index of the target name or the insertion point (as in "bisect_left").

Here's the implementation:

```python
def binary_search_file(file_path, target):
    # Step 1: Read the file and store the names in a list
    with open(file_path, 'r') as file:
        names = file.readlines()
    
    # Step 2: Convert the list of names to a sorted list
    names = [name.strip() for name in names]
    names.sort()
    
    # Step 3: Perform binary search
    def binary_search(arr, target):
        left, right = 0, len(arr) - 1
        while left <= right:
            mid = left + (right - left) // 2
            if arr[mid] == target:
                return mid  # Target found, return its index
            elif arr[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return left  # Target not found, return insertion point
    
    # Perform binary search on the sorted list
    result = binary_search(names, target)
    
    return result

# Example usage:
# file_path = 'sorted_names.txt'
# target = 'John'
# print(binary_search_file(file_path, target))
```

### Explanation:

1. **Reading the File**: The `with open(file_path, 'r') as file:` statement reads the file line by line and stores the names in a list. Each line is stripped of any leading or trailing whitespace.

2. **Sorting the List**: The list of names is sorted using the `sort()` method.

3. **Binary Search Function**: The `binary_search` function is a standard binary search algorithm. It takes a sorted list and a target value, and returns the index of the target if found, or the insertion point if the target is not found.

4. **Returning the Result**: The function returns the result of the binary search, which is the index of the target name or the insertion point.

### Note:
- The binary search is performed on the list of names, not the file itself. This approach assumes that the file is sorted and that the names are unique.
- The function assumes that the file is not too large to fit into memory. If the file is very large, you might need to implement a more efficient approach, such as using a binary search tree or a balanced binary search tree.

This implementation ensures that the search is performed in O(log(n)) time, where n is the number of names in the file. [end of text]


