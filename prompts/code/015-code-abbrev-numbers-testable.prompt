#!Source: https://www.threads.net/@richwhitjr/post/C6NOsXmO0Qg
#! PYTHON_TEST(abbrev_num, 2, "2")
#! PYTHON_TEST(abbrev_num, 9385832, "9.4M")
#! PYTHON_TEST(abbrev_num, 1, "1")
#! PYTHON_TEST(abbrev_num, 12, "12")
#! PYTHON_TEST(abbrev_num, 123, "123")
#! PYTHON_TEST(abbrev_num, 1234, "1.2K")
#! PYTHON_TEST(abbrev_num, 12345, "12K")
#! PYTHON_TEST(abbrev_num, 67890, "68K")
#! PYTHON_TEST(abbrev_num, 123456, "123K")
#! PYTHON_TEST(abbrev_num, 678912, "679K")
#! PYTHON_TEST(abbrev_num, 1234567, "1.2M")
#! PYTHON_TEST(abbrev_num, 7654321, "7.7M")
#! PYTHON_TEST(abbrev_num, 12345678, "12M")
#! PYTHON_TEST(abbrev_num, 87675678, "88M")
#! PYTHON_TEST(abbrev_num, 123456789, "123M")
#! PYTHON_TEST(abbrev_num, 987654321, "988M")
Here's a coding task. Please read the requirements carefully as it may contain some nuance.

You are required to write a function that takes in an integer. The output should be a string that roughly represents the number in compact, human readable form. for example, input/output pairs may be:

- 2 => 2
- 8180 => 8.2K
- 9385832 => 9.4M

The idea is to represent the number with a couple significant digits and give the order of magnitude.

The output string should be <= 4 characters if at all possible.
So if the input is 74581, output should be "75K" (rounded to nearest K) instead of "74.5K" since the latter is 5 characters which exceed the 4 character limit.

You should use python to write the function. The function should be defined as `def abbrev_num(x):`. Only write the function. Do not write the main program or test cases.
