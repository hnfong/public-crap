```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DataSizeCalculator {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder input = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null && !line.isEmpty()) {
            input.append(line).append(" ");
        }
        String data = input.toString().trim();
        double totalBytes = parseAndSumDataSizes(data);
        System.out.printf("%.1f%n", totalBytes);
        System.out.printf("%.1f K%n", totalBytes / 1024.0);
        System.out.printf("%.1f M%n", totalBytes / (1024.0 * 1024.0));
        System.out.printf("%.1f G%n", totalBytes / (1024.0 * 1024.0 * 1024.0));
    }

    private static double parseAndSumDataSizes(String data) {
        Pattern pattern = Pattern.compile("(\\d+(?:,\\d+)*\\.?\\d*)\\s*([kKmMgG]?)");
        Matcher matcher = pattern.matcher(data);
        double totalBytes = 0.0;
        while (matcher.find()) {
            String numberStr = matcher.group(1).replace(",", "");
            double number = Double.parseDouble(numberStr);
            char suffix = matcher.group(2).charAt(0);
            totalBytes += convertToBytes(number, suffix);
        }
        return totalBytes;
    }

    private static double convertToBytes(double number, char suffix) {
        switch (Character.toLowerCase(suffix)) {
            case 'k':
                return number * 1024.0;
            case 'm':
                return number * 1024.0 * 1024.0;
            case 'g':
                return number * 1024.0 * 1024.0 * 1024.0;
            default:
                return number;
        }
    }
}
``` [end of text]


