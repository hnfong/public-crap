```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder input = new StringBuilder();
        String line;

        // Read all input lines
        while ((line = br.readLine()) != null) {
            input.append(line).append(" ");
        }
        br.close();

        // Regular expression pattern to match numbers with optional suffixes
        Pattern pattern = Pattern.compile("(\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?)([kKmMgG])?");
        Matcher matcher = pattern.matcher(input);

        double totalSum = 0;

        // Map for suffixes to their respective conversion factors
        double[] conversionFactors = {1, 1024, 1024 * 1024, 1024 * 1024 * 1024};
        char[] suffixes = {' ', 'k', 'K', 'm', 'M', 'g', 'G'};

        while (matcher.find()) {
            String numStr = matcher.group(1).replace(",", ""); // Remove commas
            double num = Double.parseDouble(numStr);
            char suffix = matcher.group(2) != null ? matcher.group(2).charAt(0) : ' ';

            // Determine conversion factor based on suffix
            double factor = 1;
            if (suffix != ' ') {
                if (Character.isUpperCase(suffix)) {
                    suffix = Character.toLowerCase(suffix);
                }
                switch (suffix) {
                    case 'k':
                        factor = conversionFactors[1];
                        break;
                    case 'm':
                        factor = conversionFactors[2];
                        break;
                    case 'g':
                        factor = conversionFactors[3];
                        break;
                }
            }

            totalSum += num * factor;
        }

        // Print results
        System.out.printf("%.1f%n", totalSum);
        System.out.printf("%.1f k%n", totalSum / conversionFactors[1]);
        System.out.printf("%.1f M%n", totalSum / conversionFactors[2]);
        System.out.printf("%.1f G%n", totalSum / conversionFactors[3]);
    }
}
``` [end of text]


