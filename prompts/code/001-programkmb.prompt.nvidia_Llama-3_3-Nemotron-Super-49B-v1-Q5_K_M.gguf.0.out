```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder input = new StringBuilder();
        String line;

        // Read all input lines
        while ((line = br.readLine()) != null) {
            input.append(line).append(" ");
        }

        br.close();

        // Regular expression pattern to match numbers with optional suffixes
        Pattern pattern = Pattern.compile("(\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?)([kKmMgG])?");
        Matcher matcher = pattern.matcher(input);

        double total = 0;

        // Map for suffixes and their conversion factors
        double[] suffixFactors = {1, 1024, 1024 * 1024, 1024 * 1024 * 1024};
        char[] suffixes = {' ', 'k', 'K', 'm', 'M', 'g', 'G'};

        while (matcher.find()) {
            String numStr = matcher.group(1).replace(",", ""); // Remove commas
            double num = Double.parseDouble(numStr);
            char suffix = matcher.group(2) != null ? matcher.group(2).charAt(0) : ' ';

            // Determine the conversion factor based on the suffix
            double factor = 1;
            if (suffix == 'k' || suffix == 'K') factor = suffixFactors[1];
            else if (suffix == 'm' || suffix == 'M') factor = suffixFactors[2];
            else if (suffix == 'g' || suffix == 'G') factor = suffixFactors[3];

            total += num * factor;
        }

        // Print results
        System.out.printf("%.1f%n", total);
        System.out.printf("%.1f K%n", total / suffixFactors[1]);
        System.out.printf("%.1f M%n", total / suffixFactors[2]);
        System.out.printf("%.1f G%n", total / suffixFactors[3]);
    }
}
``` [end of text]


