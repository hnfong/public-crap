Q1.  
The loop keeps adding 1.0 to x.  
IEEE-754 double precision has 53 bits of precision, so the spacing between representable numbers grows as the magnitude grows.  
When x becomes large enough (≈ 2⁵³ ≈ 9.007 × 10¹⁵), the distance between successive representable numbers is 2.0.  
Adding 1.0 to such a number therefore rounds back to the same number, so x stops increasing and the condition x < math.inf remains true forever.  
Hence the loop never terminates and the program never reaches the print statement.  
**No output is ever produced.**

---

Q2.  
Here x is multiplied by 1.001 each iteration.  
Unlike addition, multiplication by a factor greater than 1.0 keeps increasing the value even when x is very large, because the relative spacing (ULP) grows in proportion to the value itself.  
Eventually x will exceed the largest finite double (≈ 1.797 × 10³⁰⁸) and overflow to positive infinity.  
At that point x < math.inf becomes false, the loop exits, and the program prints  
```
inf
```  
So the eventual output is **inf**, which is different from Q1 (where no output occurs).

---

Q3.  
Yes, there are inputs that make the loop terminate and print “Done”.  
Any positive input that causes x to overflow to +∞ will do so.  
Examples:  
- 1.0e308  
- 9.9e307  

With these values, after a finite number of iterations x becomes +∞, the condition x < math.inf becomes false, and the program prints  
```
Done
``` [end of text]


