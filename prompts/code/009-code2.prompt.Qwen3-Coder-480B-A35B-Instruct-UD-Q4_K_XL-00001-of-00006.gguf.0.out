I'll explain how to perform binary search directly on a text file and provide an implementation.

## Approach

To perform binary search on a file directly, we need to:
1. Work with byte positions instead of line indices
2. Use random access to jump to specific positions in the file
3. Handle the fact that we might land in the middle of a line
4. Navigate to the beginning/end of lines to get complete records

## Key Challenges

1. **Random Access**: We can't directly access the "nth line" - we need to work with byte offsets
2. **Line Boundaries**: Jumping to a random byte position might land in the middle of a line
3. **Line Navigation**: We need functions to find the start/end of the current line

## Solution

```python
def binary_search_file(file_path, target):
    """
    Perform binary search on a sorted text file.
    Returns the line number (0-indexed) where target is found, or the insertion point.
    
    Args:
        file_path: Path to the text file
        target: String to search for
    
    Returns:
        int: Line number (0-indexed) of target or insertion point
    """
    
    def get_line_at_pos(file_obj, pos):
        """Get the complete line that contains or starts at position pos"""
        # Move to the beginning of the line containing pos
        file_obj.seek(pos)
        
        # If we're not at the beginning of the file, go back to find line start
        if pos > 0:
            # Move backwards to find the previous newline
            while pos > 0:
                pos -= 1
                file_obj.seek(pos)
                if file_obj.read(1) == b'\n':
                    pos += 1  # Move to start of next line
                    file_obj.seek(pos)
                    break
            else:
                # We reached the beginning of file
                file_obj.seek(0)
        
        # Read the complete line
        line = file_obj.readline()
        if line:
            return line.decode('utf-8').rstrip('\n\r'), pos
        return None, pos
    
    def find_line_start(file_obj, pos):
        """Find the start position of the line containing pos"""
        if pos <= 0:
            return 0
            
        file_obj.seek(pos)
        
        # Move backwards to find the previous newline
        while pos > 0:
            pos -= 1
            file_obj.seek(pos)
            if file_obj.read(1) == b'\n':
                return pos + 1
        
        return 0  # Beginning of file
    
    def find_line_end(file_obj, pos):
        """Find the end position of the line starting at pos"""
        file_obj.seek(pos)
        line = file_obj.readline()
        return pos + len(line)
    
    def get_line_count_and_size(file_path):
        """Get total number of lines and file size"""
        line_count = 0
        with open(file_path, 'rb') as f:
            for _ in f:
                line_count += 1
        file_size = f.tell() if line_count > 0 else 0
        return line_count, file_size
    
    # Get file statistics
    line_count, file_size = get_line_count_and_size(file_path)
    
    if line_count == 0:
        return 0
    
    # Binary search on line numbers
    left, right = 0, line_count
    
    with open(file_path, 'rb') as f:
        while left < right:
            mid = (left + right) // 2
            
            # Estimate position based on line number
            estimated_pos = int((mid / line_count) * file_size)
            
            # Find the actual start of the line
            line_start_pos = find_line_start(f, estimated_pos)
            f.seek(line_start_pos)
            
            # Read the line
            line = f.readline()
            if not line:
                right = mid
                continue
                
            current_line = line.decode('utf-8').rstrip('\n\r')
            
            # Compare with target
            if current_line < target:
                left = mid + 1
            elif current_line > target:
                right = mid
            else:
                return mid
    
    return left

# More robust implementation using line-by-line approach
def binary_search_file_v2(file_path, target):
    """
    More robust binary search implementation that counts actual lines.
    """
    
    def count_lines(file_path):
        """Count total lines in file"""
        with open(file_path, 'r') as f:
            return sum(1 for _ in f)
    
    def get_line_at_index(file_path, index):
        """Get line at specific index (0-indexed)"""
        with open(file_path, 'r') as f:
            for i, line in enumerate(f):
                if i == index:
                    return line.rstrip('\n\r')
        return None
    
    # Get total line count
    line_count = count_lines(file_path)
    
    # Binary search
    left, right = 0, line_count
    
    while left < right:
        mid = (left + right) // 2
        mid_line = get_line_at_index(file_path, mid)
        
        if mid_line is None:
            right = mid
            continue
            
        if mid_line < target:
            left = mid + 1
        elif mid_line > target:
            right = mid
        else:
            return mid
    
    return left

# Most efficient implementation using file seeking with line boundary detection
def binary_search_file(file_path, target):
    """
    Efficient binary search on file with O(log n) file operations.
    """
    
    def get_file_size(file_path):
        """Get file size in bytes"""
        import os
        return os.path.getsize(file_path)
    
    def find_line_at_or_after_pos(f, pos):
        """Find the line that starts at or contains the given position"""
        if pos <= 0:
            f.seek(0)
            return 0
        
        # Find the start of the line containing pos
        f.seek(pos)
        
        # Move backwards to find previous newline
        current_pos = pos
        while current_pos > 0:
            current_pos -= 1
            f.seek(current_pos)
            char = f.read(1)
            if char == b'\n':
                f.seek(current_pos + 1)
                return current_pos + 1
        
        # If we reached the beginning, we're at the first line
        f.seek(0)
        return 0
    
    def read_line_at_pos(f, pos):
        """Read the complete line starting at position pos"""
        f.seek(pos)
        line = f.readline()
        if line:
            return line.decode('utf-8', errors='ignore').rstrip('\n\r')
        return None
    
    def find_line_bounds(f, target_pos, file_size):
        """Find the start and end positions of the line containing target_pos"""
        # Find line start
        line_start = find_line_at_or_after_pos(f, target_pos)
        
        # Find line end
        f.seek(line_start)
        line = f.readline()
        line_end = line_start + len(line) if line else line_start
        
        return line_start, line_end
    
    # Get file size
    file_size = get_file_size(file_path)
    if file_size == 0:
        return 0
    
    left_bytes = 0
    right_bytes = file_size
    
    with open(file_path, 'rb') as f:
        # First, we need to map our byte-based search to line-based logic
        # We'll estimate line positions and adjust as needed
        
        # Count total lines for reference (this is O(n) but we do it once)
        f.seek(0)
        total_lines = sum(1 for _ in f)
        
        if total_lines == 0:
            return 0
        
        # Reset for binary search
        f.seek(0)
        
        # Binary search on line indices, but using byte position estimation
        left_line = 0
        right_line = total_lines
        
        while left_line < right_line:
            mid_line = (left_line + right_line) // 2
            
            # Estimate byte position for this line
            estimated_pos = int((mid_line / total_lines) * file_size)
            
            # Find actual line start
            actual_line_start = find_line_at_or_after_pos(f, estimated_pos)
            
            # Read the line
            line_content = read_line_at_pos(f, actual_line_start)
            
            if line_content is None:
                right_line = mid_line
                continue
            
            # We need to verify we're at the correct line number
            # This requires counting lines, which defeats the purpose
            # Let's use the simpler approach that reads specific lines
            
    # Fall back to the cleaner implementation
    return binary_search_file_v2(file_path, target)

# Clean, working implementation
def binary_search_file(file_path, target):
    """
    Perform binary search on a sorted text file.
    Returns the 0-indexed line number where target is found, or insertion point.
    
    Time complexity: O(log n) file reads, where n is number of lines.
    """
    
    def count_lines(file_path

