<think>
We are to abbreviate the number to at most 4 characters.
 Steps:
 1. If the number is less than 1000, we can return the string of the number (since it will be at most 3 digits, which is <=4).
 2. For numbers 1000 and above, we will use suffixes: K for thousand, M for million, B for billion, T for trillion, etc.
    But note: the problem examples only go up to millions, but we should consider higher if needed.

 However, note the requirement: output string must be <= 4 characters.

 How to handle:
   We'll break the number by orders of magnitude (thousands, millions, billions, trillions, etc.)

 Steps in the function:
   Let suffixes = ['', 'K', 'M', 'B', 'T']   # We can extend if needed, but note that the problem doesn't specify beyond millions, but we should be safe.

   We start from the largest suffix (like T) and go downwards until we find a magnitude that the number is at least 1 of.

   Alternatively, we can use logarithms to find the exponent, but we can also do by dividing.

   However, note: we are constrained by 4 characters.

   How to format:
     We want to represent the number with 1 to 3 digits and then the suffix.

     Examples:
        74581 -> 75K (because 74581 / 1000 = 74.581 -> rounded to nearest integer? but then 75K, which is 2 digits and a letter -> 3 characters, which is <=4)
        But note: 74.5K is 5 characters, so we cannot use that.

     We must round to the nearest whole number if using one digit after the decimal would exceed 4 characters? Actually, the requirement says "if at all possible" to be <=4.

     How about:
        For numbers in the thousands:
          If the number is less than 10,000: we can do one decimal? 
          But wait: 9999 -> 10.0K is 4 characters? Actually, that's 4: '10.0K' -> but wait, that's 5? because '1','0','.','0','K' -> 5.

     So we must avoid the decimal if it would make the string exceed 4 characters.

     Let's think of the possible formats:
        Without decimal: 
          [1-3] digits + suffix -> 1 to 3 digits and 1 suffix: total 2 to 4 characters. This is acceptable.

        With decimal:
          We can only have one digit after the decimal? and then the suffix. So the whole part must be 1 or 2 digits? 
          Example: 
            If the whole part is 1 digit: then we have 1 (whole) + '.' + 1 (fraction) + 1 (suffix) = 4 characters. 
            If the whole part is 2 digits: then 2 + 1 + 1 + 1 = 5 -> too long.

        Therefore, we can only use a decimal when the whole part is a single digit.

     So the rule:
        Let n = the number.
        We'll find the appropriate suffix by dividing by 1000 until the quotient is less than 1000, but we also note the suffix.

        Then, we have:
          Let value = n / (1000 ** exponent)   # exponent is the number of times we divided by 1000.

        Now, we have two cases:
          Case 1: value is less than 10 -> then we can do: 
                   formatted = f"{value:.1f}" -> but wait, this gives one decimal? but then we have to round and then check the whole part is 1 digit?
                   Actually, we can do: round the value to one decimal place? but then we have to format without trailing zero? 
                   However, note: if we have 9.4, that's two digits in the whole part? no, 9 is one digit.

          But wait: 9.4 is two digits (9 and 4) and a decimal and then the suffix? that's 4 characters: "9.4M"

          Case 2: if value is between 10 and 1000, then we can round to the nearest integer and represent as integer? because if we try to do decimal we get 5 characters.

        However, what about 999?
          Actually, 999 is less than 1000, so we don't use a suffix? so we return "999", which is 3 characters.

        For 1000: 
          value = 1000 / 1000 = 1.0 -> then we can represent as "1.0K"? but that's 4 characters? but wait, we can also represent as "1K" which is 2 characters? 
          The requirement says "as compact as possible", but also "human readable" and the example 8180 becomes "8.2K". 

        But note: the example 74581 becomes "75K", not "74.5K" because 74.5K is 5 characters. So we have to avoid 5 characters.

        Therefore, we can do:
          If value < 10:
             we format to one decimal place, then remove any potential trailing '.0'? but wait, we need one decimal even if zero? 
             Actually, the example 1000: we want "1.0K" -> 4 characters? but we could also do "1K" (which is 2) but that might be less precise.

        However, the requirement says "roughly" and "compact". The example 8180 becomes "8.2K", so they are using one decimal when possible without exceeding 4.

        But note: 1000: 
          If we do one decimal: "1.0K" -> 4 characters -> acceptable.
          But we could also do "1K" -> 2 characters -> also acceptable and more compact.

        The problem does not specify which one to choose. But the example 8180 is 8.2K, which uses one decimal. 

        However, for 1000, if we do "1K", that's 2 characters and within 4. But if we do "1.0K", that's 4. 

        We have to decide: the requirement says "as compact as possible" and "<=4". So we can choose the more compact representation? 

        But note: the example 74581: 74.5K is 5 -> not allowed, so we do 75K.

        So the rule we can use:

          Let value = n / (1000 ** exponent)

          If value < 10:
             # We can use one decimal: but then we have to format to one decimal and then check the length? 
             # Actually, we can format to one decimal and then if the formatted string has 4 characters (like "9.4K") then we use it.
             # But note: if we have 9.0, then we might get "9.0K" which is 4, but we could also do "9K" which is 2? 
             # The requirement doesn't specify, but to be consistent with the example (which uses 8.2K) we should use the decimal.

          However, the problem says "roughly", so we can round to the nearest integer if we are above 10? and below 1000? 

        Actually, we can do:

          If value >= 100:   # then we have 3 digits? but wait, we divided by 1000 until it's less than 1000, so value is in [1, 1000)
            Then we can round to the nearest integer and then we have 3 digits? but 3 digits plus a suffix is 4 characters? 
            Example: 999.5 -> 1000 -> then we have to go to the next magnitude? but wait, 999.5 * 1000 = 999500 -> that's 999.5K? 
            But 999.5K: if we round to integer we get 1000K -> which is 1M? 

          Actually, we should avoid that by the way we break.

        Let me reframe:

          We are going to break the number by thousands. We'll have:
            magnitude = 0 -> no suffix
            magnitude = 1 -> K
            magnitude = 2 -> M
            magnitude = 3 -> B
            magnitude = 4 -> T

          We want to represent the number in the form of a float in the range [1, 1000) for the given magnitude? but note: 
            Actually, we can have numbers that are less than 1 in the magnitude? no, because we break until the quotient is less than 1000, but at least 1? 
            But what about 0? we'll handle 0 separately.

        Steps:

          if x == 0:
            return "0"

          Let suffixes = ['', 'K', 'M', 'B', 'T']   # we can extend to more if needed, but for now up to T (trillion) is enough for most.

          magnitude = 0
          num = float(x)
          while abs(num) >= 1000 and magnitude < len(suffixes)-1:
              num /= 1000.0
              magnitude += 1

          Now, num is in the range [1, 1000) for non-zero, or less than 1000 in absolute value.

          Now, we have to format num to at most 3 digits? but we have the constraint of 4 characters including the suffix.

          How to format:

            Option 1: if num is an integer (or when rounded to integer has at most 3 digits) and the integer representation has at most 3 digits? 
            But note: 999.5 -> rounded to 1000 -> which would push to the next magnitude? but we already broke by magnitude.

          Actually, we should round to the appropriate significant digits.

          We have two possibilities:

            - If num >= 100:   # then we can represent as integer without decimal because 100 to 999 is 3 digits, and then the suffix: total 4 characters (if suffix is one char) -> but if magnitude is 0, then no suffix, so 3 digits is acceptable.
            - If 10 <= num < 100: then we can represent as integer? because that would be 2 digits plus suffix -> 3 characters? which is <=4. But wait, we could also do one decimal? but that would be 4 characters: e.g., "99.9K" -> 5 characters? so we avoid. So we round to integer? 
            - If num < 10: then we can do one decimal: which gives 4 characters: "9.9K"

          However, what about 999.9? 
            We have num = 999.9, which is >=100 -> we round to integer -> 1000 -> but wait, 1000 is 4 digits? and then we have to push to the next magnitude? 

          Actually, we must avoid that. So we should round to the nearest integer only if the integer has at most 3 digits? but 1000 is 4 digits.

          Therefore, we can do:

            if num >= 100 or magnitude == 0:
                # We try to format as integer, but we must check that the integer part is at most 3 digits? 
                # Since we are in [100, 1000) for the first condition, the integer part will be 3 digits? 
                # But if we round 999.5 we get 1000 -> which is 4 digits -> then we have to adjust: we can then divide by 1000 and increase magnitude? 
                # But note: we broke the magnitude until num < 1000, so 999.5 is the maximum? 

                # Actually, we should round and then if the rounded value is 1000, then we do:
                #   num = 1.0
                #   magnitude += 1
                #   and then we are in the next magnitude? but then we have to check again? 

          Alternatively, we can avoid this by using:

            We'll round to the nearest integer only if the fractional part is zero? or we can do:

            Let rounded = round(num)
            if rounded == 1000 and magnitude < len(suffixes)-1:
                num = 1.0
                magnitude += 1
                # then we are in the next magnitude, and then we can represent as 1.0 with the next suffix? but then we are in the <10 case? 
                # so then we do one decimal? but 1.0 is 3 characters? and then suffix -> 4? so "1.0X" -> 4.

          But note: 999.5 is 1000 when rounded? so we do:

            num = 999.5 -> we are in magnitude 'K'. Then we round to integer -> 1000 -> then we check: 1000 >= 100 -> so we try to use integer. But 1000 is 4 digits? that's too long for the number part? because we have to add the suffix? so total 5.

          So we must avoid that.

          Therefore, we can do:

            We'll represent the number as:

              if num < 10:
                 s = f"{num:.1f}"   # This gives one decimal, but might be '9.0'
                 # Then we remove the trailing zero? but the example 8.2K is given, so we want 8.2, not 8.0 -> but 8.0 is acceptable? 
                 # However, we can do: if the decimal part is zero, we can remove it? 
                 # But note: we have 4 characters: "9.0K" is 4, so we can leave it? 
                 # But if we remove the zero, we get "9.K" -> which is invalid.

                 # Instead, we can do: 
                 #   Format to one decimal, then if the fractional part is 0, we can convert to integer and then format without decimal? 
                 #   But then we get "9K" which is 2 characters -> more compact and acceptable.

                 # So: 
                 #   if the fractional part is 0, then we can do: str(int(num)) + suffixes[magnitude]
                 #   else: f"{num:.1f}" but then we have to remove the potential extra zero? no, because we did .1f.

                 # However, note: f"{num:.1f}" might give '9.0' for 9.0, and then we can remove the decimal part? 

                 # Alternatively, we can do:
                 #   s = f"{num:.1f}" -> then if s ends with '.0', then we use the integer part.

                 # Example: 
                 #   num = 9.0 -> s = "9.0" -> then we can do: s = s.rstrip('0').rstrip('.') -> becomes "9"
                 #   then we output s + suffix -> "9K"

                 # But what if num=9.01? -> we get "9.0" (because we rounded to one decimal) -> then we strip -> "9", which is not 9.0? 
                 # So we must round to one decimal first? 

                 # Actually, we rounded by the formatting. But 9.01 rounded to one decimal is 9.0.

                 # So we can do: 
                 #   s = f"{num:.1f}"   # This rounds to one decimal.
                 #   if '.' in s:
                 #       s = s.rstrip('0').rstrip('.')
                 #   Then we have at most 3 characters for the number? and then add the suffix.

                 # But then 9.0 becomes "9", and 9.4 becomes "9.4"

                 # Now, the total length: 
                 #   "9" + "K" -> 2
                 #   "9.4" + "K" -> 3? but wait, "9.4K" is 3 characters? no: '9','.', '4', 'K' -> 4? 
                 #   Actually, the string "9.4K" has 4 characters.

                 # But we are allowed 4, so that's acceptable.

                 # However, if we have 9.0 -> we get "9K" which is 2.

                 # But what about 10.0? -> we are in the next case? because 10.0 is >=10.

            But wait, we are in the case num < 10. So 10.0 is not in this case.

          Now, for the case 10 <= num < 1000:

            We want to avoid decimal because it would be 5 characters. So we round to integer.

            However, what if the integer has 3 digits? then 3 digits + suffix = 4 characters -> acceptable.

            But what if the integer has 4 digits? that would happen if num is 999.5 -> rounded to 1000 -> which is 4 digits? then we have to push to the next magnitude.

            So:

                rounded = round(num)
                if rounded == 1000 and magnitude < len(suffixes)-1:
                    num = 1.0
                    magnitude += 1
                    # then we are in the magnitude above, and then we can use the same formatting as above for the new magnitude? 
                    # but note: now num is 1.0, which is <10 -> so we go to the first case? 
                else:
                    # we can represent as integer: but we have to check the integer doesn't have more than 3 digits? 
                    # Actually, since we are in [10, 1000), the rounded integer will be between 10 and 999, or 1000? 
                    # But we just handled 1000, so now we have rounded < 1000? 
                    # So we can do: s = str(int(rounded))   and then output s + suffix

          But note: what if magnitude is 0? then we don't have a suffix. And we are in the range [10, 1000) -> so we output the integer? which is 2 or 3 digits -> acceptable.

          However, what about 999.9? 
            num = 999.9 -> rounded = 1000 -> then we push to next magnitude: becomes 1.0 in the next magnitude -> then we are in the num<10 case? 
            then we format 1.0 -> "1.0" -> then remove trailing zero -> "1", then add next suffix -> "1K" for the next magnitude? 
            but wait, 999.9 is 999.9, and the next magnitude is 1000 times, so 999.9 * 1000 = 999900 -> which is 999.9K? 
            but we are representing 999.9 as 1.0 in the next magnitude? which is 1000K? which is 1M? -> that's not the same.

          Correction: 
            We are in the magnitude for thousands (K). We have num = 999.9 (which is 999.9 thousands) -> that is 999900.
            Then we round to integer: 1000 -> which is 1000 thousands -> which is 1 million? 
            So 999900 is approximately 1 million? -> that's acceptable? because 999900 is very close to 1 million.

          But note: 999500 is exactly halfway? so we round to 1000 thousands -> 1 million.

          So the algorithm for the case [10,1000):

            rounded = round(num)
            if rounded >= 1000 and magnitude < len(suffixes)-1:
                # Then we move up one magnitude
                num = 1.0
                magnitude += 1
                # and then we will format this as the new magnitude (which is <10, so we go to the first case)
            else:
                # We use the integer representation of rounded (which is less than 1000) and then add suffix.

          But note: what if magnitude is the last one? then we cannot move up? then we have to represent 1000 in the current magnitude? 
          Example: if we have a number that is 999.5 (in the last magnitude we support) -> then we round to 1000, and we cannot move up -> then we output "1000" and the suffix? 
          But then the total length: "1000" + suffix -> 4 + len(suffix) -> which might be 5? 

          However, the problem says "if at all possible" to be <=4. So we must avoid that.

          How to avoid? 
            We can cap the magnitude: if we are at the last suffix and the rounded value is 1000, then we have to output "1000" without the suffix? but that would be 4 characters? 
            But wait, we are in a magnitude, so we must use the suffix? 

          Actually, the last suffix we have is for trillion? but what if the number is 999.5 trillion? then we round to 1000 trillion -> which is 1 quadrillion? but we don't have a suffix for that? 

          The problem doesn't specify beyond the examples. We can assume that the suffixes are only up to 'T'. 

          So if we are at the last suffix and the rounded value is 1000, then we have to output "1000T", which is 5 characters -> violates the constraint.

          How to handle? 
            We can then use the same representation as the last magnitude but without moving up? and output "1000T" -> but that's 5.

          Alternatively, we can output "INF" or something? but the problem doesn't say.

          Since the problem says "roughly", and we are constrained by 4 characters, we might output "999T" for 999.5T? but that would be rounding down? 

          But the requirement says "rounded to nearest".

          We have to stick to rounding to nearest. 

          However, the problem says "if at all possible" to be <=4. So we must avoid 5 characters. 

          Therefore, we can do:

            if we are at the last suffix and rounded >= 1000:
                # We cannot move up, so we have to represent as 1000T -> but that's 5, so we try to use the previous representation: 
                # We can try to use the decimal representation? but 1000.0T is 6 characters.

                # Alternatively, we can use scientific notation? but the problem uses K, M, etc.

                # Or we can output ">999T" or something? but that's not the number.

          Given the ambiguity, and the problem says "roughly", we can output "999T" for 999.5T? but that's not rounded to nearest.

          Alternatively, we can output "1e3T" -> but that's 4 characters? but not the same style.

          The problem examples use "8.2K", so we want to stick to that style.

          Since the problem does not specify beyond T, and the input is integer, we assume the input is not so large that we hit 1000T? 

          But to be safe, we can do:

            if magnitude == len(suffixes)-1 and rounded >= 1000:
                # We output the number without the magnitude? but that would be the original number? which is huge and will be more than 4 characters.

          We might have to break the 4 character limit? but the problem says "if at all possible". So if it's not possible, we might have to output 4 characters by truncating? 

          However, the problem says "output should be a string that roughly represents the number", and "<=4 characters if at all possible".

          So if it's not possible, we can output more? but the problem doesn't specify.

          Given the ambiguity, we'll assume the input will not be so large that we exceed the last suffix by 1000 times? 

          But to be safe, we can do:

            We'll extend the suffixes: 
              suffixes = ['', 'K', 'M', 'B', 'T', 'Q']   # Q for quadrillion? 

          Then we can handle up to 10^15.

          But the problem doesn't specify the range. 

          Alternatively, we can generate the suffixes? but the problem says "compact, human readable", and the common ones are K, M, B, T.

          We'll go up to 'T' (trillion) and then if we go beyond, we use the next one? but we don't have a standard. 

          Since the problem doesn't specify, we'll do:

            suffixes = ['', 'K', 'M', 'B', 'T']

          And if we get to a number that is >= 1000 * 1000^4 (which is 10^15) and we are at the last suffix, then we do:

            while abs(num) >= 1000 and magnitude < len(suffixes)-1:
                ... 

          Then after the loop, if we are at the last suffix and num>=1000, we just use the last suffix and then format the number as integer? and hope it's <=3 digits? but it won't be.

          We'll assume the input is within 10^15.

          Actually, the problem says "integer", which in Python can be arbitrarily large, but we are constrained by the suffixes.

          We'll do:

            We break until we are at the last suffix and then if the number is still >=1000, we just use the last suffix and then format the number as integer? and if the integer representation is more than 3 digits, we have to break the 4 char limit? 

          But the problem says "if at all possible", so we do our best.

          We'll design for numbers that fit in the suffixes we have.

        Summary of the function:

          if x == 0:
              return "0"

          suffixes = ['', 'K', 'M', 'B', 'T']
          magnitude = 0
          num = float(x)

          while abs(num) >= 1000 and magnitude < len(suffixes)-1:
              num /= 1000.0
              magnitude += 1

          # Now, num is in the range [0, 1000) for the current magnitude, but note: if we broke because of the last suffix, then num might be >=1000.

          # Now, we have to format num.

          if magnitude == 0:
              # then we haven't divided, so we output the integer
              # But note: num might be a float? but we started with integer. But we did division? only if magnitude>0. So for magnitude0, num is the original integer? 
              # But we converted to float. So we can do:
              return str(int(round(num)))

          # Now, for magnitude>=1:

          if num < 10:
              # Format to one decimal, then remove trailing zeros if any.
              s = f"{num:.1f}"   # This gives one decimal, rounding to nearest tenth.
              # Remove potential trailing zero and decimal if needed.
              if s.endswith('.0'):
                  s = s[:-2]
              # But note: what if we have '9.0' -> becomes '9', then we add suffix -> "9K"
              # What if we have '9.5' -> becomes '9.5'
              # Now, the total length: 
              #   if s is 1 digit -> then total 1 (for number) + 1 (suffix) = 2
              #   if s is 3 digits (like '9.5') -> then total 3 (for number) + 1 (suffix) = 4
              return s + suffixes[magnitude]

          else:   # num >= 10
              # We round to integer
              rounded = round(num)
              # Check if we need to move up a magnitude?
              if rounded >= 1000 and magnitude < len(suffixes)-1:
                  # Then we move up
                  num = 1.0
                  magnitude += 1
                  # Now we are in the next magnitude, and num=1.0 -> which is <10, so we do the same as above for <10.
                  s = f"{num:.1f}"
                  if s.endswith('.0'):
                      s = s[:-2]
                  return s + suffixes[magnitude]
              else:
                  # We output the integer representation of rounded
                  # But note: if rounded is 1000 and we are at the last magnitude, then we output "1000" + suffixes[magnitude] -> which is 5 characters? 
                  # We have to avoid that? 
                  # We'll check the length: 
                  s_int = str(int(rounded))
                  if len(s_int) > 3:
                      # This should only happen if we are at the last magnitude and rounded>=1000.
                      # We try to use the same trick as above: we can try to use decimal? but then we have to check the length? 
                      # But we are in the >=10 case, and if we use decimal we get 5 characters? 
                      # Example: 1000.0T -> 6 characters.
                      # We can try to remove the decimal? but then we are back to 1000T -> 5.
                      # We have to break the 4 char limit? 
                      # But the problem says "if at all possible", so we do our best: we output the integer and suffix even if it's 5.
                      return s_int + suffixes[magnitude]
                  else:
                      return s_int + suffixes[magnitude]

          However, note: if we are at the last magnitude and rounded>=1000, we might have s_int being 4 digits? then we return 4+len(suffix) which is 5.

        We can try to avoid that by:

          In the else branch for >=10, we can check if we are at the last magnitude and rounded>=1000, then we do:

            # We try to represent with one decimal? but then we have to check the length: 
            # Example: 1000.0 -> we can do "1.0e3" but that's not the style.

          Alternatively, we can do:

            if rounded >= 1000 and magnitude == len(suffixes)-1:
                # We try to use the next suffix? but we don't have one. 
                # Then we output the number without the suffix? but that would be the original number? which is huge.

          Given the complexity, and the fact that the problem examples are small, we'll assume that the input is not so large that we exceed 1000T.

        But to be safe, we can change the condition in the while loop to break only if the next suffix exists? 

        Actually, we did: while abs(num) >= 1000 and magnitude < len(suffixes)-1.

        So if we are at the last suffix, we break the loop even if num>=1000. Then we are left with num>=1000 in the last suffix.

        Then in the formatting for the last suffix:

          if magnitude is the last and num>=1000, then we are in the else branch (>=10) and then we round to integer -> which might be 1000 or more.

          Then we do:

            s_int = str(int(rounded))

          and then we return s_int + suffixes[magnitude] -> which might be 4 or more digits for the integer part plus the suffix.

          We can try to avoid by:

            if magnitude is the last and num>=1000:
                # We try to use the same method as for the <10 case? but with one decimal? 
                # But note: num>=1000, so we can do:
                #   num = num / 1000.0   -> but then we are in the next magnitude which we don't have a suffix for? 
                #   then we can output f"{num:.1f}?" + "?" -> but we don't have a suffix.

          We'll leave it as: we output the integer and the suffix, even if it's 5 or more characters? 

          The problem says "if at all possible", so we do our best.

        Let's test with some examples:

          Example: 2 -> magnitude0: returns "2"

          Example: 8180:
            num = 8180 -> then we divide by 1000 -> 8.18, magnitude=1 -> then num<10 -> we format to one decimal: "8.2" (because 8.18 rounded to one decimal is 8.2) -> then we remove trailing zero? no -> then "8.2" + "K" -> "8.2K" -> 4 characters.

          Example: 9385832:
            divide by 1000: 9385.832 -> magnitude=1 -> still >=1000 -> divide again: 9.385832 -> magnitude=2 -> then num<10 -> format to one decimal: "9.4" -> then "9.4M" -> 4 characters.

          Example: 74581:
            divide by 1000: 74.581 -> magnitude=1 -> then num>=10 -> we round to integer: 75 -> then 75K -> 3 characters.

          Example: 1000:
            divide by 1000: 1.0 -> magnitude=1 -> num<10 -> format: "1.0" -> then remove trailing zero: becomes "1" -> then "1K" -> 2 characters.

          Example: 999500: 
            without rounding during division: 
              999500 / 1000 = 999.5 -> magnitude=1 -> then we are in the else branch (>=10) -> round to 1000 -> then we check: 1000>=1000 and magnitude<4 (since we have up to T, and magnitude=1) -> then we move up: 
                  num = 1.0, magnitude=2 -> then we are in the <10 case: format "1.0" -> remove trailing zero -> "1" -> then "1M" -> 2 characters.

          Example: 999499: 
            999499 / 1000 = 999.499 -> round to 999 -> then output "999K" -> 4 characters.

          Example: 999999: 
            999999 / 1000 = 999.999 -> round to 1000 -> then move up: 1.0 -> then "1M"

          Example: 1000000: 
            becomes 1.0 -> then "1M"

          Example: 10000000: 
            divide by 1000: 10000 -> then again: 10.0 -> magnitude=2 -> then <10? no, 10.0>=10 -> so we round to integer: 10 -> then "10M" -> 3 characters.

          Example: 1000000000: 
            becomes 1.0B -> then "1B" -> 2 characters.

          Example: 1234567890: 
            divide by 1000: 1234567.89 -> again: 1234.56789 -> again: 1.23456789 -> magnitude=3 -> then <10 -> format to one decimal: "1.2" -> then "1.2B"

          Example: 999999999999:  # 1e12-1
            divide by 1000: 999999999.999 -> again: 999999.999999 -> again: 999.999999999 -> magnitude=3 -> then >=10 -> round to 1000 -> then move up: magnitude becomes 4 (T) and num=1.0 -> then "1T"

          Example: 1000000000000: # 1e12
            becomes 1.0T -> then "1T"

          Example: 999499999999: # 999.5 billion -> 
            becomes 999.5 billion -> then round to 1000 billion -> then move up to 1.0T -> "1T"

          Example: 999499999: # 999.5 million? 
            becomes 999.499999 million -> round to 999 million -> "999M"

          Example: 999500000: 
            becomes 999.5 million -> round to 1000 million -> then move up: 1.0 billion -> "1B"

          Example: 

