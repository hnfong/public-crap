<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

<|im_start|>assistant
Bubble Sort:

Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Here is a Python implementation of Bubble Sort:

```python
def bubble_sort(arr):
    n = len(arr)
    
    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n-i-1):
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                
# Test the function
arr = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(arr)
print("Sorted array is:", arr)
```

Merge Sort:

Merge Sort is a Divide and Conquer algorithm. It divides the unsorted list into n sublists, each containing one element (since a list of one element is already sorted), and then repeatedly merges these sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list. Here is a Python implementation of Merge Sort:

```python
def merge_sort(arr):
    if len(arr) > 1:
        # Find the mid point
        mid = len(arr) // 2
        
        # Split the array into left and right halves
        L = arr[:mid]
        R = arr[mid:]
        
        merge_sort(L)
        merge_sort(R)
        
        i = j = k = 0
        
        # Merge the sorted halves
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        
        # Copy the remaining elements
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
            
# Test the function
arr = [64, 34, 25, 12, 22, 11, 90]
merge_sort(arr)
print("Sorted array is:", arr)
```

Comparison of Bubble Sort and Merge Sort:

Bubble Sort and Merge Sort are both comparison-based sorting algorithms, but they differ in their approach and efficiency:

1. Bubble Sort is a simple algorithm and is easy to understand and implement. However, it has a time complexity of O(nÂ²), which means it is not efficient for large lists. Merge Sort, on the other hand, has a time complexity of O(n log n), which makes it more efficient than Bubble Sort for larger lists.

2. Bubble Sort only performs comparisons and swaps, whereas Merge Sort divides the list into smaller sublists, sorts them, and then merges them back together. This makes Merge Sort more efficient than Bubble Sort.

3. Bubble Sort performs n-1 comparisons and swaps in the worst case, while Merge Sort divides the list into two halves of approximately equal size, recursively sorts them, and then merges them. This further reduces the number of comparisons and swaps needed.

In conclusion, Bubble Sort is a simple, easy-to-understand sorting algorithm, but Merge Sort is more efficient and is better suited for larger lists. Both algorithms have their uses, but Merge Sort is generally recommended for large lists.