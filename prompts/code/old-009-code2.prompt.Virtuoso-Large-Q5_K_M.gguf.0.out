To perform a binary search on a text file directly, we need to treat the file as a sorted array of lines. The key challenge is that we cannot directly access the middle element of the file as we would in an array, because files are typically accessed sequentially. However, we can use a combination of file seeking and line reading to achieve this.

Here's a step-by-step approach to perform a binary search on a text file:

1. **Determine the file size**: We need to know the total size of the file to calculate the middle position.
2. **Seek to the middle position**: Use the `seek` method to move the file pointer to the middle of the file.
3. **Read the line**: Read the line at the current position. If the file pointer is in the middle of a line, we need to move to the beginning of the line.
4. **Compare the line with the target**: If the line matches the target, return the position. If the line is lexicographically less than the target, search the right half; otherwise, search the left half.
5. **Adjust the search range**: Update the start and end positions based on the comparison result.
6. **Repeat the process**: Continue the process until the target is found or the search range is exhausted.

Here is the Python function `binary_search_file` that implements this approach:

```python
def binary_search_file(file_path, target):
    def read_line(file, pos):
        # Move to the position
        file.seek(pos)
        # Read the line, but if we are in the middle of a line, move to the start of the line
        if file.read(1) != '\n':
            file.seek(pos)
            while file.tell() > 0 and file.read(1) != '\n':
                file.seek(file.tell() - 2)
            file.seek(file.tell() + 1)
        return file.readline().strip()

    with open(file_path, 'r') as file:
        # Get the file size
        file.seek(0, 2)
        file_size = file.tell()
        start, end = 0, file_size

        while start < end:
            mid = (start + end) // 2
            mid_line = read_line(file, mid)
            if mid_line == target:
                return mid
            elif mid_line < target:
                start = file.tell()
            else:
                end = mid

        # If the target is not found, return the insertion point
        return start

# Example usage:
file_path = 'names.txt'
target = 'John'
position = binary_search_file(file_path, target)
print(f"Position: {position}")
```

### Explanation:
1. **read_line function**: This helper function reads a line from the file starting at a given position. If the position is in the middle of a line, it moves the file pointer to the start of the line.
2. **Main function**:
   - **File size**: We determine the file size by moving the file pointer to the end of the file.
   - **Binary search loop**: We use a while loop to perform the binary search. The `mid` position is calculated, and the line at that position is read using the `read_line` function.
   - **Comparison**: The line is compared with the target. If they match, the position is returned. If the line is less than the target, the search range is adjusted to the right half; otherwise, to the left half.
   - **Insertion point**: If the target is not found, the function returns the position where the target should be inserted to maintain the sorted order.

This approach ensures that the binary search is performed in O(log(n)) operations, where n is the number of lines in the file. [end of text]


