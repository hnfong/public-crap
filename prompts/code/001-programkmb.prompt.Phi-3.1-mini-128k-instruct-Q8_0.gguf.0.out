 ```java
import java.io.*;
import java.util.*;

public class NumberSuffixConverter {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String input = reader.readLine();
        String[] parts = input.split(",\\s*");
        long totalSum = 0L;
        long sumInKB = 0L;

        for (String part : parts) {
            String numberWithSuffix = part.trim();
            String suffix = "";
            double value = 0.0;

            if (numberWithSuffix.length() > 0) {
                String number = numberWithSuffix.substring(0, numberWithSuffix.length() - 1);
                char lastChar = numberWithSuffix.charAt(numberWithSuffix.length() - 1);

                if (Character.isDigit(lastChar)) {
                    value = Double.parseDouble(number);
                } else {
                    suffix = lastChar;
                    value = Double.parseDouble(number);
                }
            }

            long baseValue = convertToBaseValue(value, suffix);
            totalSum += baseValue;
            sumInKB += baseValue / 1024;
        }

        System.out.printf("%.1f%n", totalSum);
        System.out.printf("%.1f K%n", sumInKB);
        System.out.printf("%.1f M%n", sumInKB / 1024);
        System.out.printf("%.1f G%n", sumInKB / (1024 * 1024));
    }

    private static long convertToBaseValue(double value, char suffix) {
        switch (suffix) {
            case 'k':
                return (long) (value * 1024);
            case 'K':
                return (long) value;
            case 'm':
                return (long) (value * 1024 * 1024);
            case 'M':
                return (long) value;
            case 'g':
                return (long) (value * 1024 * 1024 * 1024);
            case 'G':
                return (long) value;
            default:
                return (long) value;
        }
    }
}
``` [end of text]


