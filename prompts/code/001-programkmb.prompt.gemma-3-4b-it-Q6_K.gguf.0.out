```java
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SumNumbers {

    public static void main(String[] args) {
        String input = System.getProperty("line.separator") + "";
        StringBuilder sb = new StringBuilder();
        while (true) {
            String line = System.lineSeparator() + "";
            if (line.isEmpty()) {
                break;
            }
            sb.append(line);
        }
        input = sb.toString();

        List<Double> numbers = new ArrayList<>();
        Pattern pattern = Pattern.compile("([-+]?\\d*\\.?\\d+(?:,\\d+)?)(k?|K?|m?|M?|g?|G?)?");
        Matcher matcher = pattern.matcher(input);

        while (matcher.find()) {
            String numberStr = matcher.group(1);
            String suffix = matcher.group(2);

            try {
                double number = Double.parseDouble(numberStr.replace(",", "."));
                double baseValue = 0;

                if (suffix != null && suffix.trim().toLowerCase().length() > 0) {
                    switch (suffix.trim().toLowerCase()) {
                        case "k":
                            baseValue = 1024;
                            break;
                        case "k":
                            baseValue = 1024;
                            break;
                        case "m":
                            baseValue = 1024 * 1024;
                            break;
                        case "m":
                            baseValue = 1024 * 1024;
                            break;
                        case "g":
                            baseValue = 1024 * 1024 * 1024;
                            break;
                        case "g":
                            baseValue = 1024 * 1024 * 1024;
                            break;
                    }
                }

                numbers.add(number * baseValue);
            } catch (NumberFormatException e) {
                // Ignore invalid number formats
            }
        }

        double totalSum = numbers.stream().mapToDouble(Double::doubleValue).sum();

        System.out.println(totalSum);

        double kilobytes = numbers.stream().mapToDouble(Double::doubleValue).sum() / 1024.0;
        System.out.printf("%.1f k\n", kilobytes);

        double megabytes = numbers.stream().mapToDouble(Double::doubleValue).sum() / (1024.0 * 1024.0);
        System.out.printf("%.1f M\n", megabytes);

        double gigabytes = numbers.stream().mapToDouble(Double::doubleValue).sum() / (1024.0 * 1024.0 * 1024.0);
        System.out.printf("%.1f G\n", gigabytes);
    }
}
``` [end of text]


