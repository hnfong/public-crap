<think>

</think>

```java
import java.util.*;

public class NumberConverter {
    private static final String[] SUFFIXES = {"k", "K", "m", "M", "g", "G"};
    private static final Map<String, Integer> SUFFIX_MAP = new HashMap<>();
    static {
        SUFFIX_MAP.put("k", 1024);
        SUFFIX_MAP.put("K", 1024);
        SUFFIX_MAP.put("m", 1024 * 1024);
        SUFFIX_MAP.put("M", 1024 * 1024);
        SUFFIX_MAP.put("g", 1024 * 1024 * 1024);
        SUFFIX_MAP.put("G", 1024 * 1024 * 1024);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        scanner.close();

        List<Double> numbers = new ArrayList<>();
        String[] lines = input.split("\n");
        for (String line : lines) {
            String[] parts = line.split(",");
            for (String part : parts) {
                String numStr = part.trim();
                if (numStr.isEmpty()) continue;

                double value = parseNumber(numStr);
                numbers.add(value);
            }
        }

        double total = numbers.stream().reduce(0.0, Double::sum);
        double totalK = total / SUFFIX_MAP.get("k");
        double totalM = totalK / SUFFIX_MAP.get("m");
        double totalG = totalM / SUFFIX_MAP.get("g");

        System.out.printf("%.1f%n", total);
        System.out.printf("%.1f k%n", totalK);
        System.out.printf("%.1f M%n", totalM);
        System.out.printf("%.1f G%n", totalG);
    }

    private static double parseNumber(String numStr) {
        numStr = numStr.replace(",", " ");
        String[] parts = numStr.split("\\s+");
        double value = 0.0;
        String unit = "";

        for (String part : parts) {
            if (part.matches("-?\\d+")) {
                value = Double.parseDouble(part);
            } else if (part.matches("-?\\d+\\s+([kKmMgG])")) {
                String suffix = part.substring(part.length() - 1).toUpperCase();
                if (SUFFIX_MAP.containsKey(suffix)) {
                    value = Double.parseDouble(part.substring(0, part.length() - 1)) * SUFFIX_MAP.get(suffix);
                }
            }
        }

        return value;
    }
}
``` [end of text]


