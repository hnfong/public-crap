To perform a binary search on a text file directly, we need to efficiently navigate through the file by seeking to specific positions and reading lines. Since the file is sorted lexicographically, we can leverage the properties of binary search to achieve this in O(log(n)) operations.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Open the file**: Open the file in binary mode to handle byte positions.
2. **Get file size**: Determine the total size of the file to calculate midpoints.
3. **Binary search loop**:
   - Calculate the midpoint byte position.
   - Seek to that position and read the line.
   - Compare the line with the target.
   - Adjust the search range based on the comparison.
4. **Return the result**: Return the byte position of the target or the insertion point.

Here's the Python implementation:

```python
def binary_search_file(file_path, target):
    with open(file_path, 'rb') as file:
        file.seek(0, 2)  # Seek to the end of the file
        file_size = file.tell()  # Get the total size of the file

        low, high = 0, file_size

        while low < high:
            mid = (low + high) // 2
            file.seek(mid)  # Seek to the midpoint

            # Move to the start of the current line
            while True:
                byte = file.read(1)
                if not byte or byte == b'\n':
                    break
                mid -= 1
                file.seek(mid)

            # Read the entire line
            line = file.readline().strip()

            if line < target:
                low = mid + len(line) + 1  # Move to the next line
            else:
                high = mid

        return low

# Example usage:
# binary_search_file("myfile.txt", b"2 by") should return 17
```

### Explanation:

1. **Opening the file**: The file is opened in binary mode (`'rb'`) to handle byte positions.
2. **File size**: The file size is obtained by seeking to the end of the file and using `tell()`.
3. **Binary search loop**:
   - **Midpoint calculation**: The midpoint byte position is calculated.
   - **Seeking and reading**: The file is seeked to the midpoint, and we move back to the start of the current line.
   - **Line comparison**: The line is read and compared with the target.
   - **Adjusting the range**: Depending on the comparison, the search range is adjusted.
4. **Return the result**: The function returns the byte position of the target or the insertion point.

This approach ensures that the binary search is performed efficiently, with at most O(log(n)) operations, where n is the number of lines in the file. [end of text]


