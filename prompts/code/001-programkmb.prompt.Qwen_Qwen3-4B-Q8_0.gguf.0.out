<think>

</think>

```java
import java.io.*;
import java.util.*;

public class NumberParser {
    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            StringBuilder input = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                input.append(line).append("\n");
            }

            String[] tokens = input.toString().split("[,\\s]+");
            double total = 0;
            double kTotal = 0, mTotal = 0, gTotal = 0;

            for (String token : tokens) {
                if (token.trim().isEmpty()) continue;

                double value = parseNumber(token);
                if (value == -1) continue;

                String suffix = getSuffix(token);
                double baseValue = convertToBase(value, suffix);

                total += baseValue;
                kTotal += baseValue / 1024;
                mTotal += baseValue / (1024 * 1024);
                gTotal += baseValue / (1024 * 1024 * 1024);
            }

            System.out.printf("%.1f%n", total);
            System.out.printf("%.1f k%n", kTotal);
            System.out.printf("%.1f M%n", mTotal);
            System.out.printf("%.1f G%n", gTotal);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static double parseNumber(String token) {
        try {
            // Check if the token contains a comma (thousand separator)
            if (token.contains(",")) {
                String[] parts = token.split(",");
                String numPart = parts[0];
                if (numPart.isEmpty()) return -1;
                return Double.parseDouble(numPart);
            } else {
                return Double.parseDouble(token);
            }
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private static String getSuffix(String token) {
        String suffix = "";
        for (int i = token.length() - 1; i >= 0; i--) {
            char c = token.charAt(i);
            if (c == 'G' || c == 'g' || c == 'M' || c == 'm' || c == 'K' || c == 'k') {
                suffix = String.valueOf(c);
                token = token.substring(0, i);
                break;
            }
        }
        return suffix;
    }

    private static double convertToBase(double value, String suffix) {
        double base = 1;
        switch (suffix.toUpperCase()) {
            case "K": case "k": base = 1024; break;
            case "M": case "m": base = 1024 * 1024; break;
            case "G": case "g": base = 1024 * 1024 * 1024; break;
        }
        return value * base;
    }
}
``` [end of text]


