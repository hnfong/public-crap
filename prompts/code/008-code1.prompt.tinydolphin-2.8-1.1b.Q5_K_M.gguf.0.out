<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.
<|im_end|>
<|im_start|>assistant
 Bubble Sort is a simple and inefficient sorting algorithm that repeatedly swaps the elements of a sorted array until it is sorted. Merge Sort is an in-place sorting algorithm that divides an unsorted array into two halves and then recursively sorts the two halves.

Bubble Sort:

```python
def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

arr = [6, 8, 2, 1, 4, 3]
bubbleSort(arr)
print(arr)
```

Merge Sort:

```python
def mergeSort(arr, low, high):
    mid = (low + high) // 2
    if high - low > 1:
        mid_right = mergeSort(arr, low, mid)
        mid_left = mergeSort(arr, mid + 1, high)

        i, j, k = 0, 0, 0

        # copy elements of mid_right to mid_left
        for l in range(mid, high + 1):
            for m in range(mid_right + 1, low + 1):
                if arr[l] > arr[m]:
                    arr[i] = arr[m]
                    i += 1
                else:
                    arr[i] = arr[l]
                    i += 1

        # copy remaining elements from mid_left to the end
        for j in range(mid + 1, high + 1):
            arr[i] = mid_left[j]
            i += 1

        # copy elements from mid_left to the beginning
        for j in range(mid, low + 1):
            arr[j] = mid_left[i - mid]
            i += 1

        return low, high
    else:
        return mid + 1, high

arr = [6, 8, 2, 1, 4, 3]
mid = mergeSort(arr, 0, len(arr)-1)
print(arr)
```

In the Merge Sort implementation above, it creates a temporary array `mid_right` to keep track of the subarrays sorted in increasing order, and a `mid_left` array for maintaining the indices of the subarrays. It then performs a binary partition of the array to divide it into left and right halves. The array `mid_left` is sorted in decreasing order and the elements in the left half are moved to the beginning of the array, and the array `mid_right` is sorted in increasing order. The final array is returned.<|im_end|>