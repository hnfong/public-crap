To perform a binary search on a text file where the lines are sorted in lexicographical order, we need to adapt the traditional binary search algorithm to work with file I/O operations. The key is to read only the necessary parts of the file, rather than loading the entire file into memory, which is crucial for handling large files efficiently.

Here's a step-by-step approach to implement the `binary_search_file` function:

1. **Open the file**: Use a context manager to open the file, ensuring it is properly closed after the operations.

2. **Determine the number of lines**: Use the `seek` and `tell` methods to determine the total number of lines in the file. This is necessary to calculate the middle index for the binary search.

3. **Binary search logic**:
   - Calculate the middle index.
   - Read the middle line and compare it with the target.
   - If the middle line is equal to the target, return the middle index.
   - If the middle line is less than the target, move the lower bound to the middle index + 1.
   - If the middle line is greater than the target, move the upper bound to the middle index - 1.
   - Repeat the process until the target is found or the bounds cross.

4. **Return the result**: If the target is found, return its position. If not, return the insertion point (which is the lower bound).

Here's the implementation of the `binary_search_file` function:

```python
def binary_search_file(file_path, target):
    with open(file_path, 'r') as file:
        low = 0
        high = -1
        
        # Determine the number of lines in the file
        while True:
            try:
                file.seek(0)
                while file.readline():
                    high += 1
            except EOFError:
                break
        
        # Perform binary search
        while low <= high:
            mid = (low + high) // 2
            file.seek(0)
            for _ in range(mid):
                file.readline()
            mid_line = file.readline().strip()
            
            if mid_line == target:
                return mid
            elif mid_line < target:
                low = mid + 1
            else:
                high = mid - 1
        
        # Return the insertion point
        return low

# Example usage:
# result = binary_search_file('sorted_names.txt', 'Alice')
# print(result)
```

### Explanation:
- **File Reading**: The file is read line by line, and the `seek` method is used to move the file pointer to the desired position.
- **Line Comparison**: Each line is compared with the target using the `strip()` method to remove any leading or trailing whitespace.
- **Binary Search**: The binary search logic is implemented using the `low` and `high` pointers to narrow down the search range.

This approach ensures that the file is read efficiently, and the binary search is performed in O(log(n)) operations, where n is the number of lines in the file. [end of text]


