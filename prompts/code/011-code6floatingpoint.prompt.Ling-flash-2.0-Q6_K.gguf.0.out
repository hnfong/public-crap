### **Q1.**
```python
import math
x = 0.0
while x < math.inf:
    x += 1.0
print(x)
```

**Analysis:**
- This loop keeps adding `1.0` to `x` starting from `0.0`.
- In IEEE 754 double-precision (which Python uses for `float`), there is a maximum finite value: approximately `1.7976931348623157e+308`.
- Once `x` exceeds this value, it becomes `inf`.
- The loop will continue until `x` becomes `inf`, at which point the condition `x < math.inf` becomes `False`, and the loop exits.
- So the final value printed is `inf`.

**Answer:**
```
inf
```

---

### **Q2.**
```python
import math
x = 1.0
while x < math.inf:
    x = x * 1.001
print(x)
```

**Analysis:**
- This loop multiplies `x` by `1.001` repeatedly.
- Eventually, `x` will grow beyond the maximum finite float and become `+inf`.
- Once `x` becomes `inf`, the loop stops.
- So the final value printed is `inf`.

**Is it different from Q1?**
- Both programs output `inf`, so the **final output is the same**.
- However, the **path to get there** is different: one uses addition, the other multiplication.
- Also, the number of iterations is vastly different: addition takes about `1e308` iterations, while multiplication by 1.001 takes many fewer (but still a large number — roughly exponential growth).

**Answer:**
```
inf
```
**Is it different?** No, the output is the same (`inf`), though the computation takes much fewer steps in Q2.

---

### **Q3.**
```python
import math
x = 0.0
inc = float(input("Enter a number"))
while x < math.inf:
    x += inc
print("Done")
```

**Question:** Are there inputs that will lead to the output `"Done"`? Give at least 2 examples.

**Analysis:**
- The loop will terminate only when `x` becomes `inf`, i.e., when the sum exceeds the maximum representable float.
- This will happen **unless** the increment `inc` is such that adding it never increases `x` meaningfully — for example, if `inc == 0.0`, then `x` remains `0.0` forever → infinite loop.
- So to get `"Done"`, we need `inc` such that repeated addition eventually causes overflow to `inf`.

**Conditions for termination (output "Done"):**
- `inc > 0`: Eventually `x` will overflow to `inf`.
- `inc < 0`: Then `x` goes to `-inf`, which is **less than `inf`**, so the loop continues forever.
- `inc == 0`: Loop never ends.

So only **positive** `inc` values will eventually terminate.

**Examples of inputs that lead to "Done":**
1. `1.0` → eventually overflows to `inf`
2. `0.5` → smaller steps, but still eventually overflows

**Examples that do NOT lead to "Done":**
- `0.0` → infinite loop
- `-1.0` → x goes to -inf, loop never ends
- `inf` → x becomes `inf` in one step → loop ends → prints "Done"
- `-inf` → x becomes `-inf`, loop continues forever

Wait — what about `inc = inf`?

- If `inc = float('inf')`, then `x += inf` → `x` becomes `inf` immediately → loop ends → prints "Done".

So valid inputs include:
- Any **positive finite float**
- `inf`

So two examples:
1. `1.0`
2. `float('inf')` (entered as `inf` or `1e400` in input)

**Answer:**
Yes, there are inputs that lead to "Done". Two examples:
1. `1.0`
2. `inf` (entered as "inf" or similar)

---

### ✅ Final Answers Summary:

**Q1:** `inf`  
**Q2:** `inf` — same output as Q1  
**Q3:** Yes — examples: `1.0`, `inf` [end of text]


