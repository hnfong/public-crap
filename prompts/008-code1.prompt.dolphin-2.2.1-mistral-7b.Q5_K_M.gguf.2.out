<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.
<|im_end|>
<|im_start|>assistant
 Bubble Sort:
Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in wrong order. It iterates n-1 times where n is the length of the list. The algorithm has an average time complexity of O(n^2) and is not recommended for large datasets due to its inefficiency.

Here's a Python implementation of bubble sort:

```python
def bubble_sort(arr):
    n = len(arr)

    # Traverse through all elements in the array
    for i in range(n):

        # Last i elements are already sorted, so we can skip them
        for j in range(0, n - i - 1):

            # Swap if the element found is greater than the next one
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

# Testing function
arr = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(arr)
print("Sorted array is:", arr)
```

Merge Sort:
Merge sort is a divide and conquer algorithm that divides the input list into two halves, sorts them individually using merge sort itself, and then merges the sorted halves together. It has an average time complexity of O(n log n) and is more efficient than bubble sort for large datasets.

Here's a Python implementation of merge sort:

```python
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

# Testing function
arr = [64, 34, 25, 12, 22, 11, 90]
merge_sort(arr)
print("Sorted array is:", arr)
```

Comparison:
Bubble sort and merge sort have different time complexities and are suitable for different types of datasets. Bubble sort is simple to implement but has a higher time complexity which makes it less efficient for large datasets. On the other hand, merge sort has a better average time complexity, making it more appropriate for larger datasets. However, bubble sort is easier to understand and can be used as a teaching tool for beginners.<|im_end|>