<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.
<|im_end|>
<|im_start|>assistant
Here is an example of Bubble Sort implemented in Python:
```python
def bubbleSort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n-1):
        swapped = False
         
        # Last i elements are already in place
        for j in range(0, n-i-1):
             
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
 
        # IF no two elements were swapped by inner loop, then break
        if swapped == False:
            break
            
# Test the function    
arr = [64, 34, 25, 12, 22, 11, 90]
bubbleSort(arr)
print ("Sorted array is:", arr)
```
Here is an example of Merge Sort implemented in Python:
```python
def merge_sort(array):
    if len(array) <= 1: # base case
        return array
    
    mid = int(len(array) / 2)
    left, right = merge_sort(array[:mid]), merge_sort(array[mid:])
    
    return list(merge(left, right))

def merge(left,right):
    result=[]
    i=j=0
    while i<len(left) and j<len(right):
        if left[i]<right[j]:
            result.append(left[i])
            i+=1
        else:
            result.append(right[j])
            j+=1
            
    result.extend(left[i:]) 
    result.extend(right[j:])
    
    return result

# Test the function  
arr = [64,34,25,12,22,11,90]
sorted_array=merge_sort(arr)
print ("Sorted array is:", sorted_array)
```
Both Bubble Sort and Merge Sort are comparison-based sorting algorithms used to sort an array or list. However, there are several differences between the two:

1. Efficiency: The main difference between the two sorts is their efficiency. While both Bubble Sort and Merge Sort have a worst case time complexity of O(n log n), in practice Merge Sort performs much better than Bubble Sort especially on larger lists. This is because Bubble Sort has many unnecessary comparisons, whereas Merge Sort divides the list into smaller sublists which are then combined back together in sorted order.
2. Memory: Another difference between the two sorts is their memory usage. Bubble sort uses O(1) auxiliary space since it can be performed in place, while merge sort requires O(n) additional space to store the merged lists during the sorting process.
3. Stability: Merge Sort is a stable sorting algorithm which means that equal elements keep their relative order before and after sorting, whereas bubble sort does not maintain stability. This feature makes merge sort suitable for certain applications where maintaining element order matters.