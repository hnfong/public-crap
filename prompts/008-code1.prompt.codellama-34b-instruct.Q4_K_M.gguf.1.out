 

### Instruction:

Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.


### Response:

The code for bubble sort is as follows:
```python
def Bubblesort(A):
    n = len(A)
    for i in range(n-1, 0, -1):
        for j in range(i):
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]
```
The code for merge sort is as follows:

```python
def Mergesort(A, p, r):
    if p < r:
        q = (p + r) // 2
        Mergesort(A, p, q)
        Mergesort(A, q+1, r)
        Merge(A, p, q, r)

def Merge(A, p, q, r):
    n1 = q - p + 1
    n2 = r- q
    L = [0] * (n1+1)
    R = [0] * (n2+1)
    for i in range(n1):
        L[i] = A[p+i]
    for j in range(n2):
        R[j] = A[q+j+1]
    L[n1] = math.inf
    R[n2] = math.inf
    i = 0; j=0
    for k in range(p, r+1):
        if L[i] <= R[j]:
            A[k] = L[i]
            i += 1
        else:
            A[k] = R[j]
            j += 1
```
Bubble sort has a time complexity of O(n^2) and it is the simplest sorting algorithm to implement. However, it is very inefficient and will take a long time when the size of the list becomes larger. On the other hand, merge sort is more complex but much faster than bubble sort. Its time complexity is O(n log n).

The main idea behind merge sort is dividing a big problem into small problems then solve them recursively and combine their solutions together to get the final answer. In this case, we keep dividing the list into smaller lists until each sublist has only one element (the base case). After that we start merging those sublists together while comparing elements within each sublist and put the smallest first in a new list. We continue doing so until all sublists are merged into one final list which is sorted.
