<|im_start|>user
Please write a python implementation of bubble sort. Then write a python implementation of merge sort. Discuss the two algorithms and compare them.

<|im_start|>assistant
Bubble Sort:
```python
def bubble_sort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):
        # Lasti element is already sorted
        for j in range(0, n-i-1):
            # Swap if the element found is greater than next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]

    return arr
```
Merge Sort:
```python
def merge_sort(arr):
    # If array contains 1 or 0 elements, then it is already sorted
    if len(arr) > 1:

        # Finding the mid of the array
        mid = len(arr) // 2

        # Dividing the array elements into two halves
        L = arr[:mid]
        R = arr[mid:]

        # Recursively sorting both halves
        merge_sort(L)
        merge_sort(R)

        i=j=k=0

        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k]=L[i]
                i+=1
            else:
                arr[k]=R[j]
                j+=1
            k+=1

        # Checking if any element was left
        while i < len(L):
            arr[k]=L[i]
            i+=1
            k+=1

        while j < len(R):
            arr[k]=R[j]
            j+=1
            k+=1
```

Discussion and Comparison:
Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. 

The worst-case time complexity of bubble sort is O(n^2), while the best-case and average cases are O(n). It's not suitable for large data sets due to its high time complexity.

On the other hand, merge sort divides an array into two halves until we get subarrays of size 1 and then merges them in a way that they form sorted arrays. The best-case and average time complexity of merge sort is O(n log n), making it more efficient than bubble sort for large data sets.

In terms of space complexity, both algorithms are O(1) as they do not require additional space proportional to the size of input array. However, bubble sort requires extra space for swapping whereas merge sort does not. 

Overall, given that sorting larger datasets is the primary concern, Merge sort is generally considered a more efficient algorithm than Bubble sort due to its lower time complexity and better performance on large data sets.